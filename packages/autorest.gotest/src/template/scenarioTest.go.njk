//go:build go1.18
// +build go1.18

{{copyright}}

package {{packageName}}_test

import (
    "context"
    "fmt"
    "testing"

    "github.com/Azure/azure-sdk-for-go/sdk/azcore"
    "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
    "github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
    "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/v2/testutil"
    "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
    "github.com/stretchr/testify/suite"
)
{{imports}}

type {{testCaseName}}TestSuite struct {
    suite.Suite

    ctx     context.Context
    cred    azcore.TokenCredential
    options *arm.ClientOptions
    clientFactory *{{packageName}}.ClientFactory

    {%- for name, variable in variablesOutput %}
    {%- if not requiredVariablesDefault.hasOwnProperty(name) %}
        {%- if variable.type === "prefix-string" %}
    {{name}} string
        {%- else %}
    {{name}} {{variable.type}}
        {%- endif %}
    {%- endif %}
    {%- endfor %}
    {%- for variable, _ in requiredVariablesDefault %}
    {{variable}} string
    {%- endfor %}
}

func (testsuite *{{testCaseName}}TestSuite) SetupSuite() {
    testutil.StartRecording(testsuite.T(), "sdk/resourcemanager/{{rpName}}/{{packageName}}/testdata")
    
    var err error
    testsuite.ctx = context.Background()
    testsuite.cred, testsuite.options = testutil.GetCredAndClientOptions(testsuite.T())
    testsuite.clientFactory, err = {{packageName}}.NewClientFactory({{jsFunc.getParamsValue(clientFactoryParametersOutput) + ", " if clientFactoryParametersOutput.length>0 else ""}}testsuite.cred, testsuite.options)
    testsuite.Require().NoError(err)
    {%- for name, variable in variablesOutput %}
    {%- if not requiredVariablesDefault.hasOwnProperty(name) %}
        {%- if variable.type === "prefix-string" %}
        testsuite.{{name}}, _ = recording.GenerateAlphaNumericID(testsuite.T(), {{variable.value}}, {{variable.value.length + 4}}, false)
        {%- else %}
            {%- if variable.value !== undefined and variable.value !== "testsuite." + name %}
        testsuite.{{name}} = {{variable.value}}
            {%- endif %}
        {%- endif %}
    {%- endif %}
    {%- endfor %}
    {%- for variable, _ in requiredVariablesDefault %}
        {%- if variable === "subscriptionId" %}
        testsuite.subscriptionId = recording.GetEnvVariable("AZURE_SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
        {%- else %}
        testsuite.{{variable}} = recording.GetEnvVariable("{{jsFunc.snakeCase(variable).toUpperCase()}}", "{{requiredVariablesDefault[variable]}}")
        {%- endif %}
    {%- endfor %}

    {%- if scope.toLowerCase() == 'resourcegroup'%}
    resourceGroup, _, err := testutil.CreateResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.location)
    testsuite.Require().NoError(err)
    testsuite.resourceGroupName = *resourceGroup.Name
    {%- endif %}
    {%- if prepareSteps.length > 0 %}
    testsuite.Prepare()
    {%- endif %}
}

func (testsuite *{{testCaseName}}TestSuite) TearDownSuite() {
    {%- if cleanUpSteps.length > 0 %}
    testsuite.Cleanup()
    {%- endif %}
    {%- if scope.toLowerCase() == 'resourcegroup'%}
    _, err := testutil.DeleteResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName)
    testsuite.Require().NoError(err)
    {%- endif %}
    testutil.StopRecording(testsuite.T())
}

func Test{{testCaseName}}TestSuite(t *testing.T) {
    suite.Run(t, new({{testCaseName}}TestSuite))
}
{%- if prepareSteps.length > 0 %}

func (testsuite *{{testCaseName}}TestSuite) Prepare() {
    {%- set steps = prepareSteps %}
    {%- include "./scenarioContent.go.njk" %}
}
{%- endif %}

{% for testScenario in scenarios %}
// {{testScenario.description}}
func (testsuite *{{testCaseName}}TestSuite) Test{{jsFunc.upperFirst(jsFunc.camelCase(testScenario.scenario))}}() {
    {%- for variable, value in testScenario.requiredVariablesDefault %}
    {%- if not requiredVariablesDefault.hasOwnProperty(variable) %}
    {{variable}} := recording.GetEnvVariable("{{jsFunc.snakeCase(variable).toUpperCase()}}", "{{value}}")
    {%- endif %}
    {%- endfor %}
    {%- for name, variable in testScenario.variablesOutput %}
    {%- if variable.value === undefined %}
    var {{name}} {{variable.type}}
    {%- else %}
        {%- if variable.type === "prefix-string" %}
    {{name}} := testutil.GenerateAlphaNumericID(testsuite.T(), {{variable.value}}, 6)
        {%- else %}
    {{name}} := {{variable.value}}
        {%- endif %}
    {%- endif %}
    {%- endfor %}
    
    {%- set steps = testScenario.steps %}
    {%- include "./scenarioContent.go.njk" %}
}
{%- endfor %}
{%- if cleanUpSteps.length > 0 %}

func (testsuite *{{testCaseName}}TestSuite) Cleanup() {
    {%- set steps = cleanUpSteps %}
    {%- include "./scenarioContent.go.njk" %}
}
{%- endif %}