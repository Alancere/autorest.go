//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armagrifood_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agrifood/armagrifood"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agrifood/armagrifood/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/v2/testutil"
	"github.com/stretchr/testify/suite"
)

type FakeTestSuite struct {
	suite.Suite

	cred           azcore.TokenCredential
	subscriptionId string
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.cred = &testutil.FakeCredential{}
	testsuite.subscriptionId = "00000000-0000-0000-0000-000000000000"
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestExtensions_Create() {
	ctx := context.Background()
	fakeServer := fake.ExtensionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewExtensionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Create"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleExtensionID string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	exampleExtensionID = "provider.extension"

	fakeServer.Create = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, extensionID string, options *armagrifood.ExtensionsClientCreateOptions) (resp azfake.Responder[armagrifood.ExtensionsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(exampleExtensionID, extensionID)
		resp = azfake.Responder[armagrifood.ExtensionsClientCreateResponse]{}
		resp.SetResponse(http.StatusCreated, armagrifood.ExtensionsClientCreateResponse{}, nil)
		return
	}
	_, err = client.Create(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleExtensionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Create.json")
}

func (testsuite *FakeTestSuite) TestExtensions_Get() {
	ctx := context.Background()
	fakeServer := fake.ExtensionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewExtensionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Get"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleExtensionID string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	exampleExtensionID = "provider.extension"

	exampleRes := armagrifood.Extension{
		Name: to.Ptr("provider.extension"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/extensions/provider.extension"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		ETag: to.Ptr("7200b954-0000-0700-0000-603cbbc40000"),
		Properties: &armagrifood.ExtensionProperties{
			ExtensionAPIDocsLink:      to.Ptr("https://docs.provider.com/documentation/extension"),
			ExtensionAuthLink:         to.Ptr("https://www.provider.com/extension/"),
			ExtensionCategory:         to.Ptr("Weather"),
			InstalledExtensionVersion: to.Ptr("1.0"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, extensionID string, options *armagrifood.ExtensionsClientGetOptions) (resp azfake.Responder[armagrifood.ExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(exampleExtensionID, extensionID)
		resp = azfake.Responder[armagrifood.ExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.ExtensionsClientGetResponse{Extension: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleExtensionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Extension))
}

func (testsuite *FakeTestSuite) TestExtensions_Update() {
	ctx := context.Background()
	fakeServer := fake.ExtensionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewExtensionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Update"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleExtensionID string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	exampleExtensionID = "provider.extension"

	exampleRes := armagrifood.Extension{
		Name: to.Ptr("provider.extension"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/extensions/provider.extension"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		ETag: to.Ptr("7200b954-0000-0700-0000-603cbbc40000"),
		Properties: &armagrifood.ExtensionProperties{
			ExtensionAPIDocsLink:      to.Ptr("https://docs.provider.com/documentation/extension"),
			ExtensionAuthLink:         to.Ptr("https://www.provider.com/extension/"),
			ExtensionCategory:         to.Ptr("Weather"),
			InstalledExtensionVersion: to.Ptr("2.0"),
		},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, extensionID string, options *armagrifood.ExtensionsClientUpdateOptions) (resp azfake.Responder[armagrifood.ExtensionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(exampleExtensionID, extensionID)
		resp = azfake.Responder[armagrifood.ExtensionsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.ExtensionsClientUpdateResponse{Extension: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleExtensionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Extension))
}

func (testsuite *FakeTestSuite) TestExtensions_Delete() {
	ctx := context.Background()
	fakeServer := fake.ExtensionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewExtensionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Delete"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleExtensionID string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	exampleExtensionID = "provider.extension"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, extensionID string, options *armagrifood.ExtensionsClientDeleteOptions) (resp azfake.Responder[armagrifood.ExtensionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(exampleExtensionID, extensionID)
		resp = azfake.Responder[armagrifood.ExtensionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.ExtensionsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleExtensionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Delete.json")
}

func (testsuite *FakeTestSuite) TestExtensions_ListByFarmBeats() {
	ctx := context.Background()
	fakeServer := fake.ExtensionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewExtensionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_ListByFarmBeats.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_ListByFarmBeats"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"

	exampleRes := armagrifood.ExtensionListResponse{
		Value: []*armagrifood.Extension{
			{
				Name: to.Ptr("provider.extension"),
				Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions"),
				ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/extensions/provider.extension"),
				SystemData: &armagrifood.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
				},
				ETag: to.Ptr("7200b954-0000-0700-0000-603cbbc40000"),
				Properties: &armagrifood.ExtensionProperties{
					ExtensionAPIDocsLink:      to.Ptr("https://docs.provider.com/documentation/extension"),
					ExtensionAuthLink:         to.Ptr("https://www.provider.com/extension/"),
					ExtensionCategory:         to.Ptr("Weather"),
					InstalledExtensionVersion: to.Ptr("1.0"),
				},
			}},
	}

	fakeServer.NewListByFarmBeatsPager = func(resourceGroupName string, farmBeatsResourceName string, options *armagrifood.ExtensionsClientListByFarmBeatsOptions) (resp azfake.PagerResponder[armagrifood.ExtensionsClientListByFarmBeatsResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		resp = azfake.PagerResponder[armagrifood.ExtensionsClientListByFarmBeatsResponse]{}
		resp.AddPage(http.StatusOK, armagrifood.ExtensionsClientListByFarmBeatsResponse{ExtensionListResponse: exampleRes}, nil)
		return
	}
	pager := client.NewListByFarmBeatsPager(exampleResourceGroupName, exampleFarmBeatsResourceName, &armagrifood.ExtensionsClientListByFarmBeatsOptions{ExtensionIDs: []string{},
		ExtensionCategories: []string{},
		MaxPageSize:         nil,
		SkipToken:           nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_ListByFarmBeats.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ExtensionListResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestFarmBeatsExtensions_List() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsExtensionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsExtensionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsExtensions_List"},
	})

	exampleRes := armagrifood.FarmBeatsExtensionListResponse{
		Value: []*armagrifood.FarmBeatsExtension{
			{
				Name: to.Ptr("DTN.ContentServices"),
				Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions"),
				ID:   to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/DTN.ContentServices"),
				SystemData: &armagrifood.SystemData{
					CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:28:06.000Z"); return t }()),
					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:30:01.000Z"); return t }()),
				},
				Properties: &armagrifood.FarmBeatsExtensionProperties{
					DetailedInformation: []*armagrifood.DetailedInformation{
						{
							APIInputParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("lat"),
								to.Ptr("lon"),
								to.Ptr("days"),
								to.Ptr("units"),
								to.Ptr("precision"),
								to.Ptr("sector")},
							APIName: to.Ptr("GetDailyObservations"),
							CustomParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("stationLatitude"),
								to.Ptr("stationLongitude"),
								to.Ptr("timeZone"),
								to.Ptr("sunrise"),
								to.Ptr("sunset"),
								to.Ptr("weatherCode"),
								to.Ptr("weatherDescription"),
								to.Ptr("maxTemperature"),
								to.Ptr("minTemperature"),
								to.Ptr("avgHeatIndex"),
								to.Ptr("maxHeatIndex"),
								to.Ptr("minHeatIndex"),
								to.Ptr("maxWindChill"),
								to.Ptr("minWindChill"),
								to.Ptr("maxFeelsLike"),
								to.Ptr("minFeelsLike"),
								to.Ptr("avgFeelsLike"),
								to.Ptr("maxWindSpeed"),
								to.Ptr("avgWetBulbGlobeTemp"),
								to.Ptr("maxWetBulbGlobeTemp"),
								to.Ptr("minWetBulbGlobeTemp"),
								to.Ptr("minutesOfSunshine"),
								to.Ptr("cornHeatUnit"),
								to.Ptr("evapotranspiration")},
							PlatformParameters: []*string{
								to.Ptr("cloudCover"),
								to.Ptr("dewPoint"),
								to.Ptr("growingDegreeDay"),
								to.Ptr("precipitation"),
								to.Ptr("pressure"),
								to.Ptr("relativeHumidity"),
								to.Ptr("temperature"),
								to.Ptr("wetBulbTemperature"),
								to.Ptr("dateTime"),
								to.Ptr("windChill"),
								to.Ptr("windSpeed"),
								to.Ptr("windDirection")},
							UnitsSupported: &armagrifood.UnitSystemsInfo{
								Key: to.Ptr("units"),
								Values: []*string{
									to.Ptr("us"),
									to.Ptr("si")},
							},
						},
						{
							APIInputParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("lat"),
								to.Ptr("lon"),
								to.Ptr("hours"),
								to.Ptr("units"),
								to.Ptr("precision"),
								to.Ptr("sector")},
							APIName: to.Ptr("GetHourlyObservations"),
							CustomParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("stationLatitude"),
								to.Ptr("stationLongitude"),
								to.Ptr("timeZone"),
								to.Ptr("weatherCode"),
								to.Ptr("weatherDescription"),
								to.Ptr("feelsLike"),
								to.Ptr("visibilityWeatherCode"),
								to.Ptr("visibilityWeatherDescription"),
								to.Ptr("minutesOfSunshine")},
							PlatformParameters: []*string{
								to.Ptr("cloudCover"),
								to.Ptr("dewPoint"),
								to.Ptr("precipitation"),
								to.Ptr("pressure"),
								to.Ptr("relativeHumidity"),
								to.Ptr("temperature"),
								to.Ptr("wetBulbTemperature"),
								to.Ptr("dateTime"),
								to.Ptr("visibility"),
								to.Ptr("windChill"),
								to.Ptr("windSpeed"),
								to.Ptr("windDirection"),
								to.Ptr("windGust")},
							UnitsSupported: &armagrifood.UnitSystemsInfo{
								Key: to.Ptr("units"),
								Values: []*string{
									to.Ptr("us"),
									to.Ptr("si")},
							},
						},
						{
							APIInputParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("lat"),
								to.Ptr("lon"),
								to.Ptr("days"),
								to.Ptr("units"),
								to.Ptr("precision"),
								to.Ptr("sector")},
							APIName: to.Ptr("GetHourlyForecasts"),
							CustomParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("stationLatitude"),
								to.Ptr("stationLongitude"),
								to.Ptr("timeZone"),
								to.Ptr("weatherCode"),
								to.Ptr("weatherDescription"),
								to.Ptr("feelsLike"),
								to.Ptr("visibilityWeatherCode"),
								to.Ptr("visibilityWeatherDescription"),
								to.Ptr("minutesOfSunshine")},
							PlatformParameters: []*string{
								to.Ptr("cloudCover"),
								to.Ptr("dewPoint"),
								to.Ptr("precipitation"),
								to.Ptr("pressure"),
								to.Ptr("relativeHumidity"),
								to.Ptr("temperature"),
								to.Ptr("wetBulbTemperature"),
								to.Ptr("dateTime"),
								to.Ptr("visibility"),
								to.Ptr("windChill"),
								to.Ptr("windSpeed"),
								to.Ptr("windDirection"),
								to.Ptr("windGust")},
							UnitsSupported: &armagrifood.UnitSystemsInfo{
								Key: to.Ptr("units"),
								Values: []*string{
									to.Ptr("us"),
									to.Ptr("si")},
							},
						},
						{
							APIInputParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("lat"),
								to.Ptr("lon"),
								to.Ptr("days"),
								to.Ptr("units"),
								to.Ptr("precision"),
								to.Ptr("sector")},
							APIName: to.Ptr("GetDailyForecasts"),
							CustomParameters: []*string{
								to.Ptr("stationId"),
								to.Ptr("stationLatitude"),
								to.Ptr("stationLongitude"),
								to.Ptr("timeZone"),
								to.Ptr("sunrise"),
								to.Ptr("sunset"),
								to.Ptr("weatherCode"),
								to.Ptr("weatherDescription"),
								to.Ptr("maxTemperature"),
								to.Ptr("minTemperature"),
								to.Ptr("avgHeatIndex"),
								to.Ptr("maxHeatIndex"),
								to.Ptr("minHeatIndex"),
								to.Ptr("maxWindChill"),
								to.Ptr("minWindChill"),
								to.Ptr("maxFeelsLike"),
								to.Ptr("minFeelsLike"),
								to.Ptr("avgFeelsLike"),
								to.Ptr("maxWindSpeed"),
								to.Ptr("avgWetBulbGlobeTemp"),
								to.Ptr("maxWetBulbGlobeTemp"),
								to.Ptr("minWetBulbGlobeTemp"),
								to.Ptr("minutesOfSunshine"),
								to.Ptr("cornHeatUnit"),
								to.Ptr("evapotranspiration")},
							PlatformParameters: []*string{
								to.Ptr("cloudCover"),
								to.Ptr("dewPoint"),
								to.Ptr("growingDegreeDay"),
								to.Ptr("precipitation"),
								to.Ptr("pressure"),
								to.Ptr("relativeHumidity"),
								to.Ptr("temperature"),
								to.Ptr("wetBulbTemperature"),
								to.Ptr("dateTime"),
								to.Ptr("windChill"),
								to.Ptr("windSpeed"),
								to.Ptr("windDirection")},
							UnitsSupported: &armagrifood.UnitSystemsInfo{
								Key: to.Ptr("units"),
								Values: []*string{
									to.Ptr("us"),
									to.Ptr("si")},
							},
						}},
					ExtensionAPIDocsLink:      to.Ptr("https://cs-docs.dtn.com/api/weather-observations-and-forecasts-rest-api/"),
					ExtensionAuthLink:         to.Ptr("https://www.dtn.com/dtn-content-integration/"),
					ExtensionCategory:         to.Ptr("Weather"),
					FarmBeatsExtensionID:      to.Ptr("DTN.ContentServices"),
					FarmBeatsExtensionName:    to.Ptr("DTN"),
					FarmBeatsExtensionVersion: to.Ptr("1.0"),
					PublisherID:               to.Ptr("dtn"),
					TargetResourceType:        to.Ptr("FarmBeats"),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armagrifood.FarmBeatsExtensionsClientListOptions) (resp azfake.PagerResponder[armagrifood.FarmBeatsExtensionsClientListResponse]) {
		resp = azfake.PagerResponder[armagrifood.FarmBeatsExtensionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armagrifood.FarmBeatsExtensionsClientListResponse{FarmBeatsExtensionListResponse: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(&armagrifood.FarmBeatsExtensionsClientListOptions{FarmBeatsExtensionIDs: []string{},
		FarmBeatsExtensionNames: []string{},
		ExtensionCategories:     []string{},
		PublisherIDs:            []string{},
		MaxPageSize:             nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.FarmBeatsExtensionListResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestFarmBeatsExtensions_Get() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsExtensionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsExtensionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsExtensions_Get"},
	})
	var exampleFarmBeatsExtensionID string
	exampleFarmBeatsExtensionID = "DTN.ContentServices"

	exampleRes := armagrifood.FarmBeatsExtension{
		Name: to.Ptr("DTN.ContentServices"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions"),
		ID:   to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/DTN.ContentServices"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:28:06.000Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:30:01.000Z"); return t }()),
		},
		Properties: &armagrifood.FarmBeatsExtensionProperties{
			DetailedInformation: []*armagrifood.DetailedInformation{
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("days"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetDailyObservations"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("sunrise"),
						to.Ptr("sunset"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("maxTemperature"),
						to.Ptr("minTemperature"),
						to.Ptr("avgHeatIndex"),
						to.Ptr("maxHeatIndex"),
						to.Ptr("minHeatIndex"),
						to.Ptr("maxWindChill"),
						to.Ptr("minWindChill"),
						to.Ptr("maxFeelsLike"),
						to.Ptr("minFeelsLike"),
						to.Ptr("avgFeelsLike"),
						to.Ptr("maxWindSpeed"),
						to.Ptr("avgWetBulbGlobeTemp"),
						to.Ptr("maxWetBulbGlobeTemp"),
						to.Ptr("minWetBulbGlobeTemp"),
						to.Ptr("minutesOfSunshine"),
						to.Ptr("cornHeatUnit"),
						to.Ptr("evapotranspiration")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("growingDegreeDay"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				},
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("hours"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetHourlyObservations"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("feelsLike"),
						to.Ptr("visibilityWeatherCode"),
						to.Ptr("visibilityWeatherDescription"),
						to.Ptr("minutesOfSunshine")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("visibility"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection"),
						to.Ptr("windGust")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				},
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("days"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetHourlyForecasts"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("feelsLike"),
						to.Ptr("visibilityWeatherCode"),
						to.Ptr("visibilityWeatherDescription"),
						to.Ptr("minutesOfSunshine")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("visibility"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection"),
						to.Ptr("windGust")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				},
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("days"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetDailyForecasts"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("sunrise"),
						to.Ptr("sunset"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("maxTemperature"),
						to.Ptr("minTemperature"),
						to.Ptr("avgHeatIndex"),
						to.Ptr("maxHeatIndex"),
						to.Ptr("minHeatIndex"),
						to.Ptr("maxWindChill"),
						to.Ptr("minWindChill"),
						to.Ptr("maxFeelsLike"),
						to.Ptr("minFeelsLike"),
						to.Ptr("avgFeelsLike"),
						to.Ptr("maxWindSpeed"),
						to.Ptr("avgWetBulbGlobeTemp"),
						to.Ptr("maxWetBulbGlobeTemp"),
						to.Ptr("minWetBulbGlobeTemp"),
						to.Ptr("minutesOfSunshine"),
						to.Ptr("cornHeatUnit"),
						to.Ptr("evapotranspiration")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("growingDegreeDay"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				}},
			ExtensionAPIDocsLink:      to.Ptr("https://cs-docs.dtn.com/api/weather-observations-and-forecasts-rest-api/"),
			ExtensionAuthLink:         to.Ptr("https://www.dtn.com/dtn-content-integration/"),
			ExtensionCategory:         to.Ptr("Weather"),
			FarmBeatsExtensionID:      to.Ptr("DTN.ContentServices"),
			FarmBeatsExtensionName:    to.Ptr("DTN"),
			FarmBeatsExtensionVersion: to.Ptr("1.0"),
			PublisherID:               to.Ptr("dtn"),
			TargetResourceType:        to.Ptr("FarmBeats"),
		},
	}

	fakeServer.Get = func(ctx context.Context, farmBeatsExtensionID string, options *armagrifood.FarmBeatsExtensionsClientGetOptions) (resp azfake.Responder[armagrifood.FarmBeatsExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleFarmBeatsExtensionID, farmBeatsExtensionID)
		resp = azfake.Responder[armagrifood.FarmBeatsExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.FarmBeatsExtensionsClientGetResponse{FarmBeatsExtension: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleFarmBeatsExtensionID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.FarmBeatsExtension))
}

func (testsuite *FakeTestSuite) TestFarmBeatsModels_Get() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsModelsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsModelsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsModelsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_Get"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmBeatsResourceName"

	exampleRes := armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmBeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, options *armagrifood.FarmBeatsModelsClientGetOptions) (resp azfake.Responder[armagrifood.FarmBeatsModelsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		resp = azfake.Responder[armagrifood.FarmBeatsModelsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.FarmBeatsModelsClientGetResponse{FarmBeats: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.FarmBeats))
}

func (testsuite *FakeTestSuite) TestFarmBeatsModels_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsModelsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsModelsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsModelsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleBody armagrifood.FarmBeats
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	exampleBody = armagrifood.FarmBeats{
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
	}

	exampleRes := armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmbeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, body armagrifood.FarmBeats, options *armagrifood.FarmBeatsModelsClientCreateOrUpdateOptions) (resp azfake.Responder[armagrifood.FarmBeatsModelsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armagrifood.FarmBeatsModelsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.FarmBeatsModelsClientCreateOrUpdateResponse{FarmBeats: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.FarmBeats))
}

func (testsuite *FakeTestSuite) TestFarmBeatsModels_Update() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsModelsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsModelsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsModelsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_Update"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleBody armagrifood.FarmBeatsUpdateRequestModel
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmBeatsResourceName"
	exampleBody = armagrifood.FarmBeatsUpdateRequestModel{
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
	}

	exampleRes := armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmBeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, body armagrifood.FarmBeatsUpdateRequestModel, options *armagrifood.FarmBeatsModelsClientBeginUpdateOptions) (resp azfake.PollerResponder[armagrifood.FarmBeatsModelsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armagrifood.FarmBeatsModelsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armagrifood.FarmBeatsModelsClientUpdateResponse{FarmBeats: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.FarmBeats))

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_UpdateWithSensor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_UpdateWithSensor"},
	})
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmBeatsResourceName"
	exampleBody = armagrifood.FarmBeatsUpdateRequestModel{
		Identity: &armagrifood.Identity{
			Type: to.Ptr("SystemAssigned"),
		},
		Properties: &armagrifood.FarmBeatsUpdateProperties{
			SensorIntegration: &armagrifood.SensorIntegration{
				Enabled: to.Ptr("True"),
			},
		},
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
	}

	exampleRes = armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmBeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Identity: &armagrifood.Identity{
			Type:     to.Ptr("SystemAssigned"),
			TenantID: to.Ptr("abcdefgh-86f1-41af-91ab-2d7cd011db47"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
			SensorIntegration: &armagrifood.SensorIntegration{
				Enabled:           to.Ptr("True"),
				ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, body armagrifood.FarmBeatsUpdateRequestModel, options *armagrifood.FarmBeatsModelsClientBeginUpdateOptions) (resp azfake.PollerResponder[armagrifood.FarmBeatsModelsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armagrifood.FarmBeatsModelsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armagrifood.FarmBeatsModelsClientUpdateResponse{FarmBeats: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_UpdateWithSensor.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_UpdateWithSensor.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.FarmBeats))
}

func (testsuite *FakeTestSuite) TestFarmBeatsModels_Delete() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsModelsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsModelsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsModelsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_Delete"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmBeatsResourceName"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, options *armagrifood.FarmBeatsModelsClientDeleteOptions) (resp azfake.Responder[armagrifood.FarmBeatsModelsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		resp = azfake.Responder[armagrifood.FarmBeatsModelsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.FarmBeatsModelsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Delete.json")
}

func (testsuite *FakeTestSuite) TestFarmBeatsModels_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsModelsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsModelsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsModelsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_ListBySubscription"},
	})

	exampleRes := armagrifood.FarmBeatsListResponse{
		Value: []*armagrifood.FarmBeats{
			{
				Name: to.Ptr("examples-farmBeatsResourceName"),
				Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
				ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
				SystemData: &armagrifood.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
				},
				Location: to.Ptr("eastus2"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
				Properties: &armagrifood.FarmBeatsProperties{
					InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
					ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armagrifood.FarmBeatsModelsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armagrifood.FarmBeatsModelsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armagrifood.FarmBeatsModelsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armagrifood.FarmBeatsModelsClientListBySubscriptionResponse{FarmBeatsListResponse: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(&armagrifood.FarmBeatsModelsClientListBySubscriptionOptions{MaxPageSize: nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.FarmBeatsListResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestFarmBeatsModels_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsModelsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsModelsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsModelsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_ListByResourceGroup"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "examples-rg"

	exampleRes := armagrifood.FarmBeatsListResponse{
		Value: []*armagrifood.FarmBeats{
			{
				Name: to.Ptr("examples-farmBeatsResourceName"),
				Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
				ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
				SystemData: &armagrifood.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.107Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
				},
				Location: to.Ptr("eastus2"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
				Properties: &armagrifood.FarmBeatsProperties{
					InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
					ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armagrifood.FarmBeatsModelsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armagrifood.FarmBeatsModelsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armagrifood.FarmBeatsModelsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armagrifood.FarmBeatsModelsClientListByResourceGroupResponse{FarmBeatsListResponse: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, &armagrifood.FarmBeatsModelsClientListByResourceGroupOptions{MaxPageSize: nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.FarmBeatsListResponse))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestFarmBeatsModels_GetOperationResult() {
	ctx := context.Background()
	fakeServer := fake.FarmBeatsModelsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewFarmBeatsModelsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewFarmBeatsModelsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_GetOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_GetOperationResult"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleOperationResultsID string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmBeatsResourceName"
	exampleOperationResultsID = "resource-provisioning-id-farmBeatsResourceName"

	exampleRes := armagrifood.ArmAsyncOperation{
		Status: to.Ptr("Succeeded"),
	}

	fakeServer.GetOperationResult = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, operationResultsID string, options *armagrifood.FarmBeatsModelsClientGetOperationResultOptions) (resp azfake.Responder[armagrifood.FarmBeatsModelsClientGetOperationResultResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(exampleOperationResultsID, operationResultsID)
		resp = azfake.Responder[armagrifood.FarmBeatsModelsClientGetOperationResultResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.FarmBeatsModelsClientGetOperationResultResponse{ArmAsyncOperation: exampleRes}, nil)
		return
	}
	res, err := client.GetOperationResult(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleOperationResultsID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_GetOperationResult.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ArmAsyncOperation))
}

func (testsuite *FakeTestSuite) TestLocations_CheckNameAvailability() {
	ctx := context.Background()
	fakeServer := fake.LocationsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewLocationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewLocationsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_AlreadyExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckNameAvailability_AlreadyExists"},
	})
	var exampleBody armagrifood.CheckNameAvailabilityRequest
	exampleBody = armagrifood.CheckNameAvailabilityRequest{
		Name: to.Ptr("existingaccountname"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
	}

	exampleRes := armagrifood.CheckNameAvailabilityResponse{
		Message:       to.Ptr("An account named 'existingaccountname' is already in use."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr(armagrifood.CheckNameAvailabilityReasonAlreadyExists),
	}

	fakeServer.CheckNameAvailability = func(ctx context.Context, body armagrifood.CheckNameAvailabilityRequest, options *armagrifood.LocationsClientCheckNameAvailabilityOptions) (resp azfake.Responder[armagrifood.LocationsClientCheckNameAvailabilityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armagrifood.LocationsClientCheckNameAvailabilityResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.LocationsClientCheckNameAvailabilityResponse{CheckNameAvailabilityResponse: exampleRes}, nil)
		return
	}
	res, err := client.CheckNameAvailability(ctx, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_AlreadyExists.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse))

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_Available.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckNameAvailability_Available"},
	})
	exampleBody = armagrifood.CheckNameAvailabilityRequest{
		Name: to.Ptr("newaccountname"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
	}

	exampleRes = armagrifood.CheckNameAvailabilityResponse{
		NameAvailable: to.Ptr(true),
	}

	fakeServer.CheckNameAvailability = func(ctx context.Context, body armagrifood.CheckNameAvailabilityRequest, options *armagrifood.LocationsClientCheckNameAvailabilityOptions) (resp azfake.Responder[armagrifood.LocationsClientCheckNameAvailabilityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armagrifood.LocationsClientCheckNameAvailabilityResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.LocationsClientCheckNameAvailabilityResponse{CheckNameAvailabilityResponse: exampleRes}, nil)
		return
	}
	res, err = client.CheckNameAvailability(ctx, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_Available.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse))
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	ctx := context.Background()
	fakeServer := fake.OperationsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewOperationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewOperationsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})

	exampleRes := armagrifood.OperationListResult{
		Value: []*armagrifood.Operation{
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/read"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("Gets or Lists existing AgFoodPlatform FarmBeats resource(s)."),
					Operation:   to.Ptr("Get or List AgFoodPlatform FarmBeats resource(s)."),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("AgFoodPlatform FarmBeats"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/write"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("Creates or Updates AgFoodPlatform FarmBeats."),
					Operation:   to.Ptr("Create or Update AgFoodPlatform FarmBeats."),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("AgFoodPlatform FarmBeats"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/delete"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("Deletes an existing AgFoodPlatform FarmBeats resource."),
					Operation:   to.Ptr("Delete AgFoodPlatform FarmBeats resource."),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("AgFoodPlatform FarmBeats"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/locations/checkNameAvailability/action"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("Checks that resource name is valid and is not in use."),
					Operation:   to.Ptr("Check Name Availability"),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("Locations"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/operations/read"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("List all operations in Microsoft AgFoodPlatform resource provider."),
					Operation:   to.Ptr("List all operations."),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("List all operations in Microsoft AgFoodPlatform resource provider."),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions/read"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("Gets or Lists existing AgFoodPlatform Extensions resource(s)."),
					Operation:   to.Ptr("Get or List AgFoodPlatform Extensions resource(s)."),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("AgFoodPlatform Extensions"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions/write"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("Creates or Updates AgFoodPlatform Extensions."),
					Operation:   to.Ptr("Create or Update AgFoodPlatform Extensions."),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("AgFoodPlatform Extensions"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions/delete"),
				Display: &armagrifood.OperationDisplay{
					Description: to.Ptr("Deletes an existing AgFoodPlatform Extensions resource."),
					Operation:   to.Ptr("Delete AgFoodPlatform Extensions resource."),
					Provider:    to.Ptr("Microsoft AgFoodPlatform"),
					Resource:    to.Ptr("AgFoodPlatform Extensions"),
				},
				IsDataAction: to.Ptr(false),
			}},
	}

	fakeServer.NewListPager = func(options *armagrifood.OperationsClientListOptions) (resp azfake.PagerResponder[armagrifood.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armagrifood.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armagrifood.OperationsClientListResponse{OperationListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Operations_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OperationListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var examplePrivateEndpointConnectionName string
	var exampleBody armagrifood.PrivateEndpointConnection
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	examplePrivateEndpointConnectionName = "privateEndpointConnectionName"
	exampleBody = armagrifood.PrivateEndpointConnection{
		Properties: &armagrifood.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Approved by johndoe@contoso.com"),
				Status:      to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
			},
		},
	}

	exampleRes := armagrifood.PrivateEndpointConnection{
		Name: to.Ptr("privateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName"),
		Properties: &armagrifood.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armagrifood.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
			},
			PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approved by johndoe@contoso.com"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, privateEndpointConnectionName string, body armagrifood.PrivateEndpointConnection, options *armagrifood.PrivateEndpointConnectionsClientCreateOrUpdateOptions) (resp azfake.Responder[armagrifood.PrivateEndpointConnectionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armagrifood.PrivateEndpointConnectionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.PrivateEndpointConnectionsClientCreateOrUpdateResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, examplePrivateEndpointConnectionName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Get() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Get"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	examplePrivateEndpointConnectionName = "privateEndpointConnectionName"

	exampleRes := armagrifood.PrivateEndpointConnection{
		Name: to.Ptr("privateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName"),
		Properties: &armagrifood.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armagrifood.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
			},
			PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approved by johndoe@contoso.com"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, privateEndpointConnectionName string, options *armagrifood.PrivateEndpointConnectionsClientGetOptions) (resp azfake.Responder[armagrifood.PrivateEndpointConnectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.Responder[armagrifood.PrivateEndpointConnectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.PrivateEndpointConnectionsClientGetResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	examplePrivateEndpointConnectionName = "privateEndpointConnectionName"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, privateEndpointConnectionName string, options *armagrifood.PrivateEndpointConnectionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armagrifood.PrivateEndpointConnectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.PollerResponder[armagrifood.PrivateEndpointConnectionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armagrifood.PrivateEndpointConnectionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Delete.json")
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_ListByResource() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_ListByResource"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"

	exampleRes := armagrifood.PrivateEndpointConnectionListResult{
		Value: []*armagrifood.PrivateEndpointConnection{
			{
				Name: to.Ptr("privateEndpointConnectionName"),
				Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName"),
				Properties: &armagrifood.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armagrifood.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
					},
					PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Approved by johndoe@contoso.com"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
				},
			},
			{
				Name: to.Ptr("privateEndpointConnectionName2"),
				Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName2"),
				Properties: &armagrifood.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armagrifood.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName2"),
					},
					PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Approved by johndoe@contoso.com"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListByResourcePager = func(resourceGroupName string, farmBeatsResourceName string, options *armagrifood.PrivateEndpointConnectionsClientListByResourceOptions) (resp azfake.PagerResponder[armagrifood.PrivateEndpointConnectionsClientListByResourceResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		resp = azfake.PagerResponder[armagrifood.PrivateEndpointConnectionsClientListByResourceResponse]{}
		resp.AddPage(http.StatusOK, armagrifood.PrivateEndpointConnectionsClientListByResourceResponse{PrivateEndpointConnectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourcePager(exampleResourceGroupName, exampleFarmBeatsResourceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_ListByResource.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateEndpointConnectionListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestPrivateLinkResources_ListByResource() {
	ctx := context.Background()
	fakeServer := fake.PrivateLinkResourcesServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateLinkResourcesClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListByResource"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"

	exampleRes := armagrifood.PrivateLinkResourceListResult{
		Value: []*armagrifood.PrivateLinkResource{
			{
				Name: to.Ptr("farmbeats"),
				Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateLinkResources"),
				ID:   to.Ptr("subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateLinkResources/farmbeats"),
				Properties: &armagrifood.PrivateLinkResourceProperties{
					GroupID: to.Ptr("farmbeats"),
					RequiredMembers: []*string{
						to.Ptr("farmbeats")},
					RequiredZoneNames: []*string{
						to.Ptr("privatelink.farmbeats.azure.net")},
				},
			}},
	}

	fakeServer.NewListByResourcePager = func(resourceGroupName string, farmBeatsResourceName string, options *armagrifood.PrivateLinkResourcesClientListByResourceOptions) (resp azfake.PagerResponder[armagrifood.PrivateLinkResourcesClientListByResourceResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		resp = azfake.PagerResponder[armagrifood.PrivateLinkResourcesClientListByResourceResponse]{}
		resp.AddPage(http.StatusOK, armagrifood.PrivateLinkResourcesClientListByResourceResponse{PrivateLinkResourceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourcePager(exampleResourceGroupName, exampleFarmBeatsResourceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_ListByResource.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateLinkResourceListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestPrivateLinkResources_Get() {
	ctx := context.Background()
	fakeServer := fake.PrivateLinkResourcesServer{}
	clientFactory, err := armagrifood.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateLinkResourcesClient()

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	var exampleResourceGroupName string
	var exampleFarmBeatsResourceName string
	var exampleSubResourceName string
	exampleResourceGroupName = "examples-rg"
	exampleFarmBeatsResourceName = "examples-farmbeatsResourceName"
	exampleSubResourceName = "farmbeats"

	exampleRes := armagrifood.PrivateLinkResource{
		Name: to.Ptr("farmbeats"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateLinkResources"),
		ID:   to.Ptr("subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateLinkResources/farmbeats"),
		Properties: &armagrifood.PrivateLinkResourceProperties{
			GroupID: to.Ptr("farmbeats"),
			RequiredMembers: []*string{
				to.Ptr("farmbeats")},
			RequiredZoneNames: []*string{
				to.Ptr("privatelink.farmbeats.azure.net")},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, subResourceName string, options *armagrifood.PrivateLinkResourcesClientGetOptions) (resp azfake.Responder[armagrifood.PrivateLinkResourcesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleFarmBeatsResourceName, farmBeatsResourceName)
		testsuite.Require().Equal(exampleSubResourceName, subResourceName)
		resp = azfake.Responder[armagrifood.PrivateLinkResourcesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armagrifood.PrivateLinkResourcesClientGetResponse{PrivateLinkResource: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleFarmBeatsResourceName, exampleSubResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateLinkResource))
}
