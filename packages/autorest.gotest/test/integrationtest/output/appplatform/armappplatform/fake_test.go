//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform/v2"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform/v2/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/v2/testutil"
	"github.com/stretchr/testify/suite"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx            context.Context
	cred           azcore.TokenCredential
	subscriptionId string
	serverFactory  *fake.ServerFactory
	clientFactory  *armappplatform.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &testutil.FakeCredential{}
	testsuite.subscriptionId = "00000000-0000-0000-0000-000000000000"
	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = armappplatform.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestServices_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	exampleRes := armappplatform.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &armappplatform.ClusterResourceProperties{
			NetworkProfile: &armappplatform.NetworkProfile{
				OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("20.39.3.173"),
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*armappplatform.RequiredTraffic{
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
			},
			ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &armappplatform.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}

	testsuite.serverFactory.ServicesServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, options *armappplatform.ServicesClientGetOptions) (resp azfake.Responder[armappplatform.ServicesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.Responder[armappplatform.ServicesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.ServicesClientGetResponse{ServiceResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ServiceResource))
}

func (testsuite *FakeTestSuite) TestServices_CreateOrUpdate() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleResource armappplatform.ServiceResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleResource = armappplatform.ServiceResource{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &armappplatform.ClusterResourceProperties{},
		SKU: &armappplatform.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}

	exampleRes := armappplatform.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &armappplatform.ClusterResourceProperties{
			NetworkProfile: &armappplatform.NetworkProfile{
				OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("20.39.3.173"),
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*armappplatform.RequiredTraffic{
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
			},
			ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &armappplatform.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}

	testsuite.serverFactory.ServicesServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, resource armappplatform.ServiceResource, options *armappplatform.ServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armappplatform.ServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleResource, resource))
		resp = azfake.PollerResponder[armappplatform.ServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.ServicesClientCreateOrUpdateResponse{ServiceResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ServiceResource))

	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate_VNetInjection"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleResource = armappplatform.ServiceResource{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &armappplatform.ClusterResourceProperties{
			NetworkProfile: &armappplatform.NetworkProfile{
				AppNetworkResourceGroup:            to.Ptr("my-app-network-rg"),
				AppSubnetID:                        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
				ServiceCidr:                        to.Ptr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
				ServiceRuntimeNetworkResourceGroup: to.Ptr("my-service-runtime-network-rg"),
				ServiceRuntimeSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
			},
		},
		SKU: &armappplatform.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}

	exampleRes = armappplatform.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &armappplatform.ClusterResourceProperties{
			NetworkProfile: &armappplatform.NetworkProfile{
				AppNetworkResourceGroup: to.Ptr("my-app-network-rg"),
				AppSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
				OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*armappplatform.RequiredTraffic{
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
				ServiceCidr:                        to.Ptr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
				ServiceRuntimeNetworkResourceGroup: to.Ptr("my-service-runtime-network-rg"),
				ServiceRuntimeSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
			},
			ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &armappplatform.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}

	testsuite.serverFactory.ServicesServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, resource armappplatform.ServiceResource, options *armappplatform.ServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armappplatform.ServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleResource, resource))
		resp = azfake.PollerResponder[armappplatform.ServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.ServicesClientCreateOrUpdateResponse{ServiceResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ServiceResource))
}

func (testsuite *FakeTestSuite) TestServices_Delete() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_Delete"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	testsuite.serverFactory.ServicesServer.BeginDelete = func(ctx context.Context, resourceGroupName string, serviceName string, options *armappplatform.ServicesClientBeginDeleteOptions) (resp azfake.PollerResponder[armappplatform.ServicesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.PollerResponder[armappplatform.ServicesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armappplatform.ServicesClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json")
}

func (testsuite *FakeTestSuite) TestServices_Update() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_Update"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleResource armappplatform.ServiceResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleResource = armappplatform.ServiceResource{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &armappplatform.ClusterResourceProperties{},
		SKU: &armappplatform.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}

	exampleRes := armappplatform.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &armappplatform.ClusterResourceProperties{
			NetworkProfile: &armappplatform.NetworkProfile{
				OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("20.39.3.173"),
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*armappplatform.RequiredTraffic{
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
			},
			ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &armappplatform.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}

	testsuite.serverFactory.ServicesServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, resource armappplatform.ServiceResource, options *armappplatform.ServicesClientBeginUpdateOptions) (resp azfake.PollerResponder[armappplatform.ServicesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleResource, resource))
		resp = azfake.PollerResponder[armappplatform.ServicesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.ServicesClientUpdateResponse{ServiceResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ServiceResource))
}

func (testsuite *FakeTestSuite) TestServices_ListTestKeys() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_ListTestKeys"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	exampleRes := armappplatform.TestKeys{
		Enabled:               to.Ptr(true),
		PrimaryKey:            to.Ptr("<primaryKey>"),
		PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
		SecondaryKey:          to.Ptr("<secondaryKey>"),
		SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
	}

	testsuite.serverFactory.ServicesServer.ListTestKeys = func(ctx context.Context, resourceGroupName string, serviceName string, options *armappplatform.ServicesClientListTestKeysOptions) (resp azfake.Responder[armappplatform.ServicesClientListTestKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.Responder[armappplatform.ServicesClientListTestKeysResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.ServicesClientListTestKeysResponse{TestKeys: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	res, err := client.ListTestKeys(ctx, exampleResourceGroupName, exampleServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TestKeys))
}

func (testsuite *FakeTestSuite) TestServices_RegenerateTestKey() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_RegenerateTestKey"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleRegenerateTestKeyRequest armappplatform.RegenerateTestKeyRequestPayload
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleRegenerateTestKeyRequest = armappplatform.RegenerateTestKeyRequestPayload{
		KeyType: to.Ptr(armappplatform.TestKeyTypePrimary),
	}

	exampleRes := armappplatform.TestKeys{
		Enabled:               to.Ptr(true),
		PrimaryKey:            to.Ptr("<primaryKey>"),
		PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
		SecondaryKey:          to.Ptr("<secondaryKey>"),
		SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
	}

	testsuite.serverFactory.ServicesServer.RegenerateTestKey = func(ctx context.Context, resourceGroupName string, serviceName string, regenerateTestKeyRequest armappplatform.RegenerateTestKeyRequestPayload, options *armappplatform.ServicesClientRegenerateTestKeyOptions) (resp azfake.Responder[armappplatform.ServicesClientRegenerateTestKeyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleRegenerateTestKeyRequest, regenerateTestKeyRequest))
		resp = azfake.Responder[armappplatform.ServicesClientRegenerateTestKeyResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.ServicesClientRegenerateTestKeyResponse{TestKeys: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	res, err := client.RegenerateTestKey(ctx, exampleResourceGroupName, exampleServiceName, exampleRegenerateTestKeyRequest, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TestKeys))
}

func (testsuite *FakeTestSuite) TestServices_DisableTestEndpoint() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_DisableTestEndpoint.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_DisableTestEndpoint"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	testsuite.serverFactory.ServicesServer.DisableTestEndpoint = func(ctx context.Context, resourceGroupName string, serviceName string, options *armappplatform.ServicesClientDisableTestEndpointOptions) (resp azfake.Responder[armappplatform.ServicesClientDisableTestEndpointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.Responder[armappplatform.ServicesClientDisableTestEndpointResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.ServicesClientDisableTestEndpointResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	_, err = client.DisableTestEndpoint(ctx, exampleResourceGroupName, exampleServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_DisableTestEndpoint.json")
}

func (testsuite *FakeTestSuite) TestServices_EnableTestEndpoint() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_EnableTestEndpoint"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	exampleRes := armappplatform.TestKeys{
		Enabled:               to.Ptr(true),
		PrimaryKey:            to.Ptr("<primaryKey>"),
		PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
		SecondaryKey:          to.Ptr("<secondaryKey>"),
		SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
	}

	testsuite.serverFactory.ServicesServer.EnableTestEndpoint = func(ctx context.Context, resourceGroupName string, serviceName string, options *armappplatform.ServicesClientEnableTestEndpointOptions) (resp azfake.Responder[armappplatform.ServicesClientEnableTestEndpointResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.Responder[armappplatform.ServicesClientEnableTestEndpointResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.ServicesClientEnableTestEndpointResponse{TestKeys: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	res, err := client.EnableTestEndpoint(ctx, exampleResourceGroupName, exampleServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TestKeys))
}

func (testsuite *FakeTestSuite) TestServices_CheckNameAvailability() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_CheckNameAvailability"},
	})
	var exampleLocation string
	var exampleAvailabilityParameters armappplatform.NameAvailabilityParameters
	exampleLocation = "eastus"
	exampleAvailabilityParameters = armappplatform.NameAvailabilityParameters{
		Name: to.Ptr("myservice"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring"),
	}

	exampleRes := armappplatform.NameAvailability{
		Message:       to.Ptr("The name is already used."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}

	testsuite.serverFactory.ServicesServer.CheckNameAvailability = func(ctx context.Context, location string, availabilityParameters armappplatform.NameAvailabilityParameters, options *armappplatform.ServicesClientCheckNameAvailabilityOptions) (resp azfake.Responder[armappplatform.ServicesClientCheckNameAvailabilityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().True(reflect.DeepEqual(exampleAvailabilityParameters, availabilityParameters))
		resp = azfake.Responder[armappplatform.ServicesClientCheckNameAvailabilityResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.ServicesClientCheckNameAvailabilityResponse{NameAvailability: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	res, err := client.CheckNameAvailability(ctx, exampleLocation, exampleAvailabilityParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.NameAvailability))
}

func (testsuite *FakeTestSuite) TestServices_ListBySubscription() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_ListBySubscription"},
	})

	exampleRes := armappplatform.ServiceResourceList{
		Value: []*armappplatform.ServiceResource{
			{
				Name:     to.Ptr("myservice"),
				Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				Properties: &armappplatform.ClusterResourceProperties{
					NetworkProfile: &armappplatform.NetworkProfile{
						OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
							PublicIPs: []*string{
								to.Ptr("20.39.3.173"),
								to.Ptr("40.64.67.13")},
						},
						RequiredTraffics: []*armappplatform.RequiredTraffic{
							{
								Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
								IPs: []*string{
									to.Ptr("20.62.211.25"),
									to.Ptr("52.188.47.226")},
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("TCP"),
							},
							{
								Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
								IPs: []*string{
									to.Ptr("20.62.211.25"),
									to.Ptr("52.188.47.226")},
								Port:     to.Ptr[int32](1194),
								Protocol: to.Ptr("UDP"),
							},
							{
								Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
								IPs: []*string{
									to.Ptr("20.62.211.25"),
									to.Ptr("52.188.47.226")},
								Port:     to.Ptr[int32](9000),
								Protocol: to.Ptr("TCP"),
							}},
					},
					ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
					ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
				},
				SKU: &armappplatform.SKU{
					Name: to.Ptr("S0"),
					Tier: to.Ptr("Standard"),
				},
			}},
	}

	testsuite.serverFactory.ServicesServer.NewListBySubscriptionPager = func(options *armappplatform.ServicesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armappplatform.ServicesClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armappplatform.ServicesClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.ServicesClientListBySubscriptionResponse{ServiceResourceList: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ServiceResourceList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestServices_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Services_List"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armappplatform.ServiceResourceList{
		Value: []*armappplatform.ServiceResource{
			{
				Name:     to.Ptr("myservice"),
				Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				Properties: &armappplatform.ClusterResourceProperties{
					NetworkProfile: &armappplatform.NetworkProfile{
						OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
							PublicIPs: []*string{
								to.Ptr("20.39.3.173"),
								to.Ptr("40.64.67.13")},
						},
						RequiredTraffics: []*armappplatform.RequiredTraffic{
							{
								Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
								IPs: []*string{
									to.Ptr("20.62.211.25"),
									to.Ptr("52.188.47.226")},
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("TCP"),
							},
							{
								Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
								IPs: []*string{
									to.Ptr("20.62.211.25"),
									to.Ptr("52.188.47.226")},
								Port:     to.Ptr[int32](1194),
								Protocol: to.Ptr("UDP"),
							},
							{
								Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
								IPs: []*string{
									to.Ptr("20.62.211.25"),
									to.Ptr("52.188.47.226")},
								Port:     to.Ptr[int32](9000),
								Protocol: to.Ptr("TCP"),
							}},
					},
					ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
					ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
				},
				SKU: &armappplatform.SKU{
					Name: to.Ptr("S0"),
					Tier: to.Ptr("Standard"),
				},
			}},
	}

	testsuite.serverFactory.ServicesServer.NewListPager = func(resourceGroupName string, options *armappplatform.ServicesClientListOptions) (resp azfake.PagerResponder[armappplatform.ServicesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armappplatform.ServicesClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.ServicesClientListResponse{ServiceResourceList: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewServicesClient()
	pager := client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ServiceResourceList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestConfigServers_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ConfigServers_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	exampleRes := armappplatform.ConfigServerResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
		Properties: &armappplatform.ConfigServerProperties{
			ConfigServer: &armappplatform.ConfigServerSettings{
				GitProperty: &armappplatform.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
			ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
		},
	}

	testsuite.serverFactory.ConfigServersServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, options *armappplatform.ConfigServersClientGetOptions) (resp azfake.Responder[armappplatform.ConfigServersClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.Responder[armappplatform.ConfigServersClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.ConfigServersClientGetResponse{ConfigServerResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConfigServersClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConfigServerResource))
}

func (testsuite *FakeTestSuite) TestConfigServers_UpdatePut() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePut"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleConfigServerResource armappplatform.ConfigServerResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleConfigServerResource = armappplatform.ConfigServerResource{
		Properties: &armappplatform.ConfigServerProperties{
			ConfigServer: &armappplatform.ConfigServerSettings{
				GitProperty: &armappplatform.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
		},
	}

	exampleRes := armappplatform.ConfigServerResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
		Properties: &armappplatform.ConfigServerProperties{
			ConfigServer: &armappplatform.ConfigServerSettings{
				GitProperty: &armappplatform.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
			ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
		},
	}

	testsuite.serverFactory.ConfigServersServer.BeginUpdatePut = func(ctx context.Context, resourceGroupName string, serviceName string, configServerResource armappplatform.ConfigServerResource, options *armappplatform.ConfigServersClientBeginUpdatePutOptions) (resp azfake.PollerResponder[armappplatform.ConfigServersClientUpdatePutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleConfigServerResource, configServerResource))
		resp = azfake.PollerResponder[armappplatform.ConfigServersClientUpdatePutResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.ConfigServersClientUpdatePutResponse{ConfigServerResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConfigServersClient()
	poller, err := client.BeginUpdatePut(ctx, exampleResourceGroupName, exampleServiceName, exampleConfigServerResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConfigServerResource))
}

func (testsuite *FakeTestSuite) TestConfigServers_UpdatePatch() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePatch"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleConfigServerResource armappplatform.ConfigServerResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleConfigServerResource = armappplatform.ConfigServerResource{
		Properties: &armappplatform.ConfigServerProperties{
			ConfigServer: &armappplatform.ConfigServerSettings{
				GitProperty: &armappplatform.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
		},
	}

	exampleRes := armappplatform.ConfigServerResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
		Properties: &armappplatform.ConfigServerProperties{
			ConfigServer: &armappplatform.ConfigServerSettings{
				GitProperty: &armappplatform.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
			ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
		},
	}

	testsuite.serverFactory.ConfigServersServer.BeginUpdatePatch = func(ctx context.Context, resourceGroupName string, serviceName string, configServerResource armappplatform.ConfigServerResource, options *armappplatform.ConfigServersClientBeginUpdatePatchOptions) (resp azfake.PollerResponder[armappplatform.ConfigServersClientUpdatePatchResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleConfigServerResource, configServerResource))
		resp = azfake.PollerResponder[armappplatform.ConfigServersClientUpdatePatchResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.ConfigServersClientUpdatePatchResponse{ConfigServerResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConfigServersClient()
	poller, err := client.BeginUpdatePatch(ctx, exampleResourceGroupName, exampleServiceName, exampleConfigServerResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConfigServerResource))
}

func (testsuite *FakeTestSuite) TestConfigServers_Validate() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ConfigServers_Validate"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleConfigServerSettings armappplatform.ConfigServerSettings
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleConfigServerSettings = armappplatform.ConfigServerSettings{
		GitProperty: &armappplatform.ConfigServerGitProperty{
			Label: to.Ptr("master"),
			SearchPaths: []*string{
				to.Ptr("/")},
			URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
		},
	}

	exampleRes := armappplatform.ConfigServerSettingsValidateResult{
		IsValid: to.Ptr(true),
	}

	testsuite.serverFactory.ConfigServersServer.BeginValidate = func(ctx context.Context, resourceGroupName string, serviceName string, configServerSettings armappplatform.ConfigServerSettings, options *armappplatform.ConfigServersClientBeginValidateOptions) (resp azfake.PollerResponder[armappplatform.ConfigServersClientValidateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleConfigServerSettings, configServerSettings))
		resp = azfake.PollerResponder[armappplatform.ConfigServersClientValidateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.ConfigServersClientValidateResponse{ConfigServerSettingsValidateResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewConfigServersClient()
	poller, err := client.BeginValidate(ctx, exampleResourceGroupName, exampleServiceName, exampleConfigServerSettings, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConfigServerSettingsValidateResult))
}

func (testsuite *FakeTestSuite) TestMonitoringSettings_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"MonitoringSettings_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	exampleRes := armappplatform.MonitoringSettingResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
		Properties: &armappplatform.MonitoringSettingProperties{
			AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
				Java: to.Ptr("3.0.0"),
			},
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			ProvisioningState:             to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
			TraceEnabled:                  to.Ptr(true),
		},
	}

	testsuite.serverFactory.MonitoringSettingsServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, options *armappplatform.MonitoringSettingsClientGetOptions) (resp azfake.Responder[armappplatform.MonitoringSettingsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.Responder[armappplatform.MonitoringSettingsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.MonitoringSettingsClientGetResponse{MonitoringSettingResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewMonitoringSettingsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MonitoringSettingResource))
}

func (testsuite *FakeTestSuite) TestMonitoringSettings_UpdatePut() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePut"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleMonitoringSettingResource armappplatform.MonitoringSettingResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleMonitoringSettingResource = armappplatform.MonitoringSettingResource{
		Properties: &armappplatform.MonitoringSettingProperties{
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			TraceEnabled:                  to.Ptr(true),
		},
	}

	exampleRes := armappplatform.MonitoringSettingResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
		Properties: &armappplatform.MonitoringSettingProperties{
			AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
				Java: to.Ptr("3.0.0"),
			},
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			ProvisioningState:             to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
			TraceEnabled:                  to.Ptr(true),
		},
	}

	testsuite.serverFactory.MonitoringSettingsServer.BeginUpdatePut = func(ctx context.Context, resourceGroupName string, serviceName string, monitoringSettingResource armappplatform.MonitoringSettingResource, options *armappplatform.MonitoringSettingsClientBeginUpdatePutOptions) (resp azfake.PollerResponder[armappplatform.MonitoringSettingsClientUpdatePutResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleMonitoringSettingResource, monitoringSettingResource))
		resp = azfake.PollerResponder[armappplatform.MonitoringSettingsClientUpdatePutResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.MonitoringSettingsClientUpdatePutResponse{MonitoringSettingResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewMonitoringSettingsClient()
	poller, err := client.BeginUpdatePut(ctx, exampleResourceGroupName, exampleServiceName, exampleMonitoringSettingResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MonitoringSettingResource))
}

func (testsuite *FakeTestSuite) TestMonitoringSettings_UpdatePatch() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePatch"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleMonitoringSettingResource armappplatform.MonitoringSettingResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleMonitoringSettingResource = armappplatform.MonitoringSettingResource{
		Properties: &armappplatform.MonitoringSettingProperties{
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			TraceEnabled:                  to.Ptr(true),
		},
	}

	exampleRes := armappplatform.MonitoringSettingResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
		Properties: &armappplatform.MonitoringSettingProperties{
			AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
				Java: to.Ptr("3.0.0"),
			},
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			ProvisioningState:             to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
			TraceEnabled:                  to.Ptr(true),
		},
	}

	testsuite.serverFactory.MonitoringSettingsServer.BeginUpdatePatch = func(ctx context.Context, resourceGroupName string, serviceName string, monitoringSettingResource armappplatform.MonitoringSettingResource, options *armappplatform.MonitoringSettingsClientBeginUpdatePatchOptions) (resp azfake.PollerResponder[armappplatform.MonitoringSettingsClientUpdatePatchResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().True(reflect.DeepEqual(exampleMonitoringSettingResource, monitoringSettingResource))
		resp = azfake.PollerResponder[armappplatform.MonitoringSettingsClientUpdatePatchResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.MonitoringSettingsClientUpdatePatchResponse{MonitoringSettingResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewMonitoringSettingsClient()
	poller, err := client.BeginUpdatePatch(ctx, exampleResourceGroupName, exampleServiceName, exampleMonitoringSettingResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MonitoringSettingResource))
}

func (testsuite *FakeTestSuite) TestApps_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Apps_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"

	exampleRes := armappplatform.AppResource{
		Name: to.Ptr("myapp"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
		Identity: &armappplatform.ManagedIdentityProperties{
			Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("principalid"),
			TenantID:    to.Ptr("tenantid"),
		},
		Location: to.Ptr("eastus"),
		Properties: &armappplatform.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &armappplatform.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
				UsedInGB:  to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
			Public:            to.Ptr(true),
			TemporaryDisk: &armappplatform.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
		},
	}

	testsuite.serverFactory.AppsServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, options *armappplatform.AppsClientGetOptions) (resp azfake.Responder[armappplatform.AppsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		resp = azfake.Responder[armappplatform.AppsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.AppsClientGetResponse{AppResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewAppsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, &armappplatform.AppsClientGetOptions{SyncStatus: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AppResource))
}

func (testsuite *FakeTestSuite) TestApps_CreateOrUpdate() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Apps_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleAppResource armappplatform.AppResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleAppResource = armappplatform.AppResource{
		Location: to.Ptr("eastus"),
		Properties: &armappplatform.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &armappplatform.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			Public: to.Ptr(true),
			TemporaryDisk: &armappplatform.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
		},
	}

	exampleRes := armappplatform.AppResource{
		Name: to.Ptr("myapp"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
		Identity: &armappplatform.ManagedIdentityProperties{
			Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("principalid"),
			TenantID:    to.Ptr("tenantid"),
		},
		Location: to.Ptr("eastus"),
		Properties: &armappplatform.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &armappplatform.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
				UsedInGB:  to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
			Public:            to.Ptr(true),
			TemporaryDisk: &armappplatform.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
		},
	}

	testsuite.serverFactory.AppsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, appResource armappplatform.AppResource, options *armappplatform.AppsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armappplatform.AppsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().True(reflect.DeepEqual(exampleAppResource, appResource))
		resp = azfake.PollerResponder[armappplatform.AppsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.AppsClientCreateOrUpdateResponse{AppResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewAppsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleAppResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AppResource))
}

func (testsuite *FakeTestSuite) TestApps_Delete() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Apps_Delete"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"

	testsuite.serverFactory.AppsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, options *armappplatform.AppsClientBeginDeleteOptions) (resp azfake.PollerResponder[armappplatform.AppsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		resp = azfake.PollerResponder[armappplatform.AppsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.AppsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewAppsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json")
}

func (testsuite *FakeTestSuite) TestApps_Update() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Apps_Update"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleAppResource armappplatform.AppResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleAppResource = armappplatform.AppResource{
		Identity: &armappplatform.ManagedIdentityProperties{
			Type: to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
		},
		Location: to.Ptr("eastus"),
		Properties: &armappplatform.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &armappplatform.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			Public: to.Ptr(true),
			TemporaryDisk: &armappplatform.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
		},
	}

	exampleRes := armappplatform.AppResource{
		Name: to.Ptr("myapp"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
		Identity: &armappplatform.ManagedIdentityProperties{
			Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("principalid"),
			TenantID:    to.Ptr("tenantid"),
		},
		Location: to.Ptr("eastus"),
		Properties: &armappplatform.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &armappplatform.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
				UsedInGB:  to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
			Public:            to.Ptr(true),
			TemporaryDisk: &armappplatform.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
		},
	}

	testsuite.serverFactory.AppsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, appResource armappplatform.AppResource, options *armappplatform.AppsClientBeginUpdateOptions) (resp azfake.PollerResponder[armappplatform.AppsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().True(reflect.DeepEqual(exampleAppResource, appResource))
		resp = azfake.PollerResponder[armappplatform.AppsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.AppsClientUpdateResponse{AppResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewAppsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleAppResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AppResource))
}

func (testsuite *FakeTestSuite) TestApps_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Apps_List"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	exampleRes := armappplatform.AppResourceCollection{
		Value: []*armappplatform.AppResource{
			{
				Name: to.Ptr("myapp"),
				Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
				Identity: &armappplatform.ManagedIdentityProperties{
					Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("principalid"),
					TenantID:    to.Ptr("tenantid"),
				},
				Location: to.Ptr("eastus"),
				Properties: &armappplatform.AppResourceProperties{
					ActiveDeploymentName: to.Ptr("mydeployment1"),
					EnableEndToEndTLS:    to.Ptr(false),
					Fqdn:                 to.Ptr("myapp.mydomain.com"),
					HTTPSOnly:            to.Ptr(false),
					PersistentDisk: &armappplatform.PersistentDisk{
						MountPath: to.Ptr("/mypersistentdisk"),
						SizeInGB:  to.Ptr[int32](2),
						UsedInGB:  to.Ptr[int32](1),
					},
					ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
					Public:            to.Ptr(true),
					TemporaryDisk: &armappplatform.TemporaryDisk{
						MountPath: to.Ptr("/mytemporarydisk"),
						SizeInGB:  to.Ptr[int32](2),
					},
					URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
				},
			}},
	}

	testsuite.serverFactory.AppsServer.NewListPager = func(resourceGroupName string, serviceName string, options *armappplatform.AppsClientListOptions) (resp azfake.PagerResponder[armappplatform.AppsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.PagerResponder[armappplatform.AppsClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.AppsClientListResponse{AppResourceCollection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewAppsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleServiceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AppResourceCollection))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestApps_ValidateDomain() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Apps_ValidateDomain"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleValidatePayload armappplatform.CustomDomainValidatePayload
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleValidatePayload = armappplatform.CustomDomainValidatePayload{
		Name: to.Ptr("mydomain.io"),
	}

	exampleRes := armappplatform.CustomDomainValidateResult{
		IsValid: to.Ptr(false),
		Message: to.Ptr("Certificate is invalid, please check if it is a self signed cert or if it contains a suitable dns name"),
	}

	testsuite.serverFactory.AppsServer.ValidateDomain = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, validatePayload armappplatform.CustomDomainValidatePayload, options *armappplatform.AppsClientValidateDomainOptions) (resp azfake.Responder[armappplatform.AppsClientValidateDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().True(reflect.DeepEqual(exampleValidatePayload, validatePayload))
		resp = azfake.Responder[armappplatform.AppsClientValidateDomainResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.AppsClientValidateDomainResponse{CustomDomainValidateResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewAppsClient()
	res, err := client.ValidateDomain(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleValidatePayload, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CustomDomainValidateResult))
}

func (testsuite *FakeTestSuite) TestBindings_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Bindings_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleBindingName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleBindingName = "mybinding"

	exampleRes := armappplatform.BindingResource{
		Name: to.Ptr("mybinding"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
		Properties: &armappplatform.BindingResourceProperties{
			BindingParameters: map[string]any{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
			ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			ResourceName:        to.Ptr("my-cosmosdb-1"),
			ResourceType:        to.Ptr("Microsoft.DocumentDB"),
			UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
		},
	}

	testsuite.serverFactory.BindingsServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, bindingName string, options *armappplatform.BindingsClientGetOptions) (resp azfake.Responder[armappplatform.BindingsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleBindingName, bindingName)
		resp = azfake.Responder[armappplatform.BindingsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.BindingsClientGetResponse{BindingResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBindingsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleBindingName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BindingResource))
}

func (testsuite *FakeTestSuite) TestBindings_CreateOrUpdate() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Bindings_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleBindingName string
	var exampleBindingResource armappplatform.BindingResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleBindingName = "mybinding"
	exampleBindingResource = armappplatform.BindingResource{
		Properties: &armappplatform.BindingResourceProperties{
			BindingParameters: map[string]any{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			Key:        to.Ptr("xxxx"),
			ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
		},
	}

	exampleRes := armappplatform.BindingResource{
		Name: to.Ptr("mybinding"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
		Properties: &armappplatform.BindingResourceProperties{
			BindingParameters: map[string]any{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
			ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			ResourceName:        to.Ptr("my-cosmosdb-1"),
			ResourceType:        to.Ptr("Microsoft.DocumentDB"),
			UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
		},
	}

	testsuite.serverFactory.BindingsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, bindingName string, bindingResource armappplatform.BindingResource, options *armappplatform.BindingsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armappplatform.BindingsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleBindingName, bindingName)
		testsuite.Require().True(reflect.DeepEqual(exampleBindingResource, bindingResource))
		resp = azfake.PollerResponder[armappplatform.BindingsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.BindingsClientCreateOrUpdateResponse{BindingResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBindingsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleBindingName, exampleBindingResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BindingResource))
}

func (testsuite *FakeTestSuite) TestBindings_Delete() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Bindings_Delete"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleBindingName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleBindingName = "mybinding"

	testsuite.serverFactory.BindingsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, bindingName string, options *armappplatform.BindingsClientBeginDeleteOptions) (resp azfake.PollerResponder[armappplatform.BindingsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleBindingName, bindingName)
		resp = azfake.PollerResponder[armappplatform.BindingsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.BindingsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewBindingsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleBindingName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json")
}

func (testsuite *FakeTestSuite) TestBindings_Update() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Bindings_Update"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleBindingName string
	var exampleBindingResource armappplatform.BindingResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleBindingName = "mybinding"
	exampleBindingResource = armappplatform.BindingResource{
		Properties: &armappplatform.BindingResourceProperties{
			BindingParameters: map[string]any{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			Key: to.Ptr("xxxx"),
		},
	}

	exampleRes := armappplatform.BindingResource{
		Name: to.Ptr("mybinding"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
		Properties: &armappplatform.BindingResourceProperties{
			BindingParameters: map[string]any{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
			ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			ResourceName:        to.Ptr("my-cosmosdb-1"),
			ResourceType:        to.Ptr("Microsoft.DocumentDB"),
			UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
		},
	}

	testsuite.serverFactory.BindingsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, bindingName string, bindingResource armappplatform.BindingResource, options *armappplatform.BindingsClientBeginUpdateOptions) (resp azfake.PollerResponder[armappplatform.BindingsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleBindingName, bindingName)
		testsuite.Require().True(reflect.DeepEqual(exampleBindingResource, bindingResource))
		resp = azfake.PollerResponder[armappplatform.BindingsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.BindingsClientUpdateResponse{BindingResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBindingsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleBindingName, exampleBindingResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BindingResource))
}

func (testsuite *FakeTestSuite) TestBindings_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Bindings_List"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"

	exampleRes := armappplatform.BindingResourceCollection{
		Value: []*armappplatform.BindingResource{
			{
				Name: to.Ptr("mybinding"),
				Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
				Properties: &armappplatform.BindingResourceProperties{
					BindingParameters: map[string]any{
						"apiType":      "SQL",
						"databaseName": "db1",
					},
					CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
					GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
					ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
					ResourceName:        to.Ptr("my-cosmosdb-1"),
					ResourceType:        to.Ptr("Microsoft.DocumentDB"),
					UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
				},
			}},
	}

	testsuite.serverFactory.BindingsServer.NewListPager = func(resourceGroupName string, serviceName string, appName string, options *armappplatform.BindingsClientListOptions) (resp azfake.PagerResponder[armappplatform.BindingsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		resp = azfake.PagerResponder[armappplatform.BindingsClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.BindingsClientListResponse{BindingResourceCollection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBindingsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleServiceName, exampleAppName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.BindingResourceCollection))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCertificates_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Certificates_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleCertificateName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleCertificateName = "mycertificate"

	exampleRes := armappplatform.CertificateResource{
		Name: to.Ptr("mycertificate"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
		Properties: &armappplatform.CertificateProperties{
			ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
			CertVersion:  to.Ptr("08a219d06d874795a96db47e06fbb01e"),
			DNSNames: []*string{
				to.Ptr("mydomain.com"),
				to.Ptr("mydomain.net"),
				to.Ptr("mydomain.io")},
			ExpirationDate:   to.Ptr("2019-02-21T07:40:42Z"),
			IssuedDate:       to.Ptr("2019-02-20T07:40:42Z"),
			Issuer:           to.Ptr("mydomain.com"),
			KeyVaultCertName: to.Ptr("mycert"),
			SubjectName:      to.Ptr("mysubjectname"),
			Thumbprint:       to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
		},
	}

	testsuite.serverFactory.CertificatesServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, certificateName string, options *armappplatform.CertificatesClientGetOptions) (resp azfake.Responder[armappplatform.CertificatesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleCertificateName, certificateName)
		resp = azfake.Responder[armappplatform.CertificatesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.CertificatesClientGetResponse{CertificateResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCertificatesClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, exampleCertificateName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CertificateResource))
}

func (testsuite *FakeTestSuite) TestCertificates_CreateOrUpdate() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Certificates_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleCertificateName string
	var exampleCertificateResource armappplatform.CertificateResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleCertificateName = "mycertificate"
	exampleCertificateResource = armappplatform.CertificateResource{
		Properties: &armappplatform.CertificateProperties{
			CertVersion:      to.Ptr("08a219d06d874795a96db47e06fbb01e"),
			KeyVaultCertName: to.Ptr("mycert"),
			VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
		},
	}

	exampleRes := armappplatform.CertificateResource{
		Name: to.Ptr("mycertificate"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
		Properties: &armappplatform.CertificateProperties{
			ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
			CertVersion:  to.Ptr("08a219d06d874795a96db47e06fbb01e"),
			DNSNames: []*string{
				to.Ptr("mydomain.com"),
				to.Ptr("mydomain.net"),
				to.Ptr("mydomain.io")},
			ExpirationDate:   to.Ptr("2019-02-21T07:40:42Z"),
			IssuedDate:       to.Ptr("2019-02-20T07:40:42Z"),
			Issuer:           to.Ptr("mydomain.com"),
			KeyVaultCertName: to.Ptr("mycert"),
			SubjectName:      to.Ptr("mysubjectname"),
			Thumbprint:       to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
		},
	}

	testsuite.serverFactory.CertificatesServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, certificateName string, certificateResource armappplatform.CertificateResource, options *armappplatform.CertificatesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armappplatform.CertificatesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleCertificateName, certificateName)
		testsuite.Require().True(reflect.DeepEqual(exampleCertificateResource, certificateResource))
		resp = azfake.PollerResponder[armappplatform.CertificatesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.CertificatesClientCreateOrUpdateResponse{CertificateResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCertificatesClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleCertificateName, exampleCertificateResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CertificateResource))
}

func (testsuite *FakeTestSuite) TestCertificates_Delete() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Certificates_Delete"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleCertificateName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleCertificateName = "mycertificate"

	testsuite.serverFactory.CertificatesServer.BeginDelete = func(ctx context.Context, resourceGroupName string, serviceName string, certificateName string, options *armappplatform.CertificatesClientBeginDeleteOptions) (resp azfake.PollerResponder[armappplatform.CertificatesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleCertificateName, certificateName)
		resp = azfake.PollerResponder[armappplatform.CertificatesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.CertificatesClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewCertificatesClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleServiceName, exampleCertificateName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json")
}

func (testsuite *FakeTestSuite) TestCertificates_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Certificates_List"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myService"

	exampleRes := armappplatform.CertificateResourceCollection{
		Value: []*armappplatform.CertificateResource{
			{
				Name: to.Ptr("mycertificate"),
				Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
				Properties: &armappplatform.CertificateProperties{
					ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
					CertVersion:  to.Ptr("08a219d06d874795a96db47e06fbb01e"),
					DNSNames: []*string{
						to.Ptr("mydomain.com"),
						to.Ptr("mydomain.net"),
						to.Ptr("mydomain.io")},
					ExpirationDate:   to.Ptr("2019-02-21T07:40:42Z"),
					IssuedDate:       to.Ptr("2019-02-20T07:40:42Z"),
					Issuer:           to.Ptr("mydomain.com"),
					KeyVaultCertName: to.Ptr("mycert"),
					SubjectName:      to.Ptr("mysubjectname"),
					Thumbprint:       to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
					VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
				},
			}},
	}

	testsuite.serverFactory.CertificatesServer.NewListPager = func(resourceGroupName string, serviceName string, options *armappplatform.CertificatesClientListOptions) (resp azfake.PagerResponder[armappplatform.CertificatesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.PagerResponder[armappplatform.CertificatesClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.CertificatesClientListResponse{CertificateResourceCollection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCertificatesClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleServiceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CertificateResourceCollection))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCustomDomains_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CustomDomains_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDomainName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDomainName = "mydomain.com"

	exampleRes := armappplatform.CustomDomainResource{
		Name: to.Ptr("mydomain.com"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
		Properties: &armappplatform.CustomDomainProperties{
			AppName:    to.Ptr("myapp"),
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}

	testsuite.serverFactory.CustomDomainsServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, domainName string, options *armappplatform.CustomDomainsClientGetOptions) (resp azfake.Responder[armappplatform.CustomDomainsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDomainName, domainName)
		resp = azfake.Responder[armappplatform.CustomDomainsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.CustomDomainsClientGetResponse{CustomDomainResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCustomDomainsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDomainName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CustomDomainResource))
}

func (testsuite *FakeTestSuite) TestCustomDomains_CreateOrUpdate() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CustomDomains_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDomainName string
	var exampleDomainResource armappplatform.CustomDomainResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDomainName = "mydomain.com"
	exampleDomainResource = armappplatform.CustomDomainResource{
		Properties: &armappplatform.CustomDomainProperties{
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}

	exampleRes := armappplatform.CustomDomainResource{
		Name: to.Ptr("mydomain.com"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
		Properties: &armappplatform.CustomDomainProperties{
			AppName:    to.Ptr("myapp"),
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}

	testsuite.serverFactory.CustomDomainsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, domainName string, domainResource armappplatform.CustomDomainResource, options *armappplatform.CustomDomainsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armappplatform.CustomDomainsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDomainName, domainName)
		testsuite.Require().True(reflect.DeepEqual(exampleDomainResource, domainResource))
		resp = azfake.PollerResponder[armappplatform.CustomDomainsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.CustomDomainsClientCreateOrUpdateResponse{CustomDomainResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCustomDomainsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDomainName, exampleDomainResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CustomDomainResource))
}

func (testsuite *FakeTestSuite) TestCustomDomains_Delete() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CustomDomains_Delete"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDomainName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDomainName = "mydomain.com"

	testsuite.serverFactory.CustomDomainsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, domainName string, options *armappplatform.CustomDomainsClientBeginDeleteOptions) (resp azfake.PollerResponder[armappplatform.CustomDomainsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDomainName, domainName)
		resp = azfake.PollerResponder[armappplatform.CustomDomainsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.CustomDomainsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewCustomDomainsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDomainName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json")
}

func (testsuite *FakeTestSuite) TestCustomDomains_Update() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CustomDomains_Update"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDomainName string
	var exampleDomainResource armappplatform.CustomDomainResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDomainName = "mydomain.com"
	exampleDomainResource = armappplatform.CustomDomainResource{
		Properties: &armappplatform.CustomDomainProperties{
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}

	exampleRes := armappplatform.CustomDomainResource{
		Name: to.Ptr("mydomain.com"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
		Properties: &armappplatform.CustomDomainProperties{
			AppName:    to.Ptr("myapp"),
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}

	testsuite.serverFactory.CustomDomainsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, domainName string, domainResource armappplatform.CustomDomainResource, options *armappplatform.CustomDomainsClientBeginUpdateOptions) (resp azfake.PollerResponder[armappplatform.CustomDomainsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDomainName, domainName)
		testsuite.Require().True(reflect.DeepEqual(exampleDomainResource, domainResource))
		resp = azfake.PollerResponder[armappplatform.CustomDomainsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.CustomDomainsClientUpdateResponse{CustomDomainResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCustomDomainsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDomainName, exampleDomainResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CustomDomainResource))
}

func (testsuite *FakeTestSuite) TestCustomDomains_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CustomDomains_List"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"

	exampleRes := armappplatform.CustomDomainResourceCollection{
		Value: []*armappplatform.CustomDomainResource{
			{
				Name: to.Ptr("mydomain.com"),
				Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
				Properties: &armappplatform.CustomDomainProperties{
					AppName:    to.Ptr("myapp"),
					CertName:   to.Ptr("mycert"),
					Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
				},
			}},
	}

	testsuite.serverFactory.CustomDomainsServer.NewListPager = func(resourceGroupName string, serviceName string, appName string, options *armappplatform.CustomDomainsClientListOptions) (resp azfake.PagerResponder[armappplatform.CustomDomainsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		resp = azfake.PagerResponder[armappplatform.CustomDomainsClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.CustomDomainsClientListResponse{CustomDomainResourceCollection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCustomDomainsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleServiceName, exampleAppName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CustomDomainResourceCollection))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDeployments_Get() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_Get"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDeploymentName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDeploymentName = "mydeployment"

	exampleRes := armappplatform.DeploymentResource{
		Name: to.Ptr("mydeployment"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
		Properties: &armappplatform.DeploymentResourceProperties{
			Active:  to.Ptr(false),
			AppName: to.Ptr("myapp"),
			DeploymentSettings: &armappplatform.DeploymentSettings{
				CPU: to.Ptr[int32](1),
				EnvironmentVariables: map[string]*string{
					"env": to.Ptr("test"),
				},
				JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
				MemoryInGB:     to.Ptr[int32](3),
				RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
			},
			Instances: []*armappplatform.DeploymentInstance{
				{
					Name:            to.Ptr("instance1"),
					DiscoveryStatus: to.Ptr("pending"),
					StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
					Status:          to.Ptr("Running"),
				}},
			ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
			Source: &armappplatform.UserSourceInfo{
				Type:             to.Ptr(armappplatform.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
			Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
		},
		SKU: &armappplatform.SKU{
			Name:     to.Ptr("S0"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr("Standard"),
		},
	}

	testsuite.serverFactory.DeploymentsServer.Get = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, deploymentName string, options *armappplatform.DeploymentsClientGetOptions) (resp azfake.Responder[armappplatform.DeploymentsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.Responder[armappplatform.DeploymentsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.DeploymentsClientGetResponse{DeploymentResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DeploymentResource))
}

func (testsuite *FakeTestSuite) TestDeployments_CreateOrUpdate() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDeploymentName string
	var exampleDeploymentResource armappplatform.DeploymentResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDeploymentName = "mydeployment"
	exampleDeploymentResource = armappplatform.DeploymentResource{
		Properties: &armappplatform.DeploymentResourceProperties{
			DeploymentSettings: &armappplatform.DeploymentSettings{
				CPU: to.Ptr[int32](1),
				EnvironmentVariables: map[string]*string{
					"env": to.Ptr("test"),
				},
				JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
				MemoryInGB:     to.Ptr[int32](3),
				RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
			},
			Source: &armappplatform.UserSourceInfo{
				Type:             to.Ptr(armappplatform.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
		},
		SKU: &armappplatform.SKU{
			Name:     to.Ptr("S0"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes := armappplatform.DeploymentResource{
		Name: to.Ptr("mydeployment"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
		Properties: &armappplatform.DeploymentResourceProperties{
			Active:  to.Ptr(false),
			AppName: to.Ptr("myapp"),
			DeploymentSettings: &armappplatform.DeploymentSettings{
				CPU: to.Ptr[int32](1),
				EnvironmentVariables: map[string]*string{
					"env": to.Ptr("test"),
				},
				JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
				MemoryInGB:     to.Ptr[int32](3),
				RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
			},
			Instances: []*armappplatform.DeploymentInstance{
				{
					Name:            to.Ptr("instance1"),
					DiscoveryStatus: to.Ptr("pending"),
					StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
					Status:          to.Ptr("Running"),
				}},
			ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
			Source: &armappplatform.UserSourceInfo{
				Type:             to.Ptr(armappplatform.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
			Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
		},
		SKU: &armappplatform.SKU{
			Name:     to.Ptr("S0"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr("Standard"),
		},
	}

	testsuite.serverFactory.DeploymentsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, deploymentName string, deploymentResource armappplatform.DeploymentResource, options *armappplatform.DeploymentsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armappplatform.DeploymentsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleDeploymentResource, deploymentResource))
		resp = azfake.PollerResponder[armappplatform.DeploymentsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.DeploymentsClientCreateOrUpdateResponse{DeploymentResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDeploymentName, exampleDeploymentResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DeploymentResource))
}

func (testsuite *FakeTestSuite) TestDeployments_Delete() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_Delete"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDeploymentName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDeploymentName = "mydeployment"

	testsuite.serverFactory.DeploymentsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, deploymentName string, options *armappplatform.DeploymentsClientBeginDeleteOptions) (resp azfake.PollerResponder[armappplatform.DeploymentsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.PollerResponder[armappplatform.DeploymentsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.DeploymentsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json")
}

func (testsuite *FakeTestSuite) TestDeployments_Update() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_Update"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDeploymentName string
	var exampleDeploymentResource armappplatform.DeploymentResource
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDeploymentName = "mydeployment"
	exampleDeploymentResource = armappplatform.DeploymentResource{
		Properties: &armappplatform.DeploymentResourceProperties{
			Source: &armappplatform.UserSourceInfo{
				Type:             to.Ptr(armappplatform.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
		},
	}

	exampleRes := armappplatform.DeploymentResource{
		Name: to.Ptr("mydeployment"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
		Properties: &armappplatform.DeploymentResourceProperties{
			Active:  to.Ptr(false),
			AppName: to.Ptr("myapp"),
			DeploymentSettings: &armappplatform.DeploymentSettings{
				CPU: to.Ptr[int32](1),
				EnvironmentVariables: map[string]*string{
					"env": to.Ptr("test"),
				},
				JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
				MemoryInGB:     to.Ptr[int32](3),
				RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
			},
			Instances: []*armappplatform.DeploymentInstance{
				{
					Name:            to.Ptr("instance1"),
					DiscoveryStatus: to.Ptr("pending"),
					StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
					Status:          to.Ptr("Running"),
				}},
			ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
			Source: &armappplatform.UserSourceInfo{
				Type:             to.Ptr(armappplatform.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
			Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
		},
		SKU: &armappplatform.SKU{
			Name:     to.Ptr("S0"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr("Standard"),
		},
	}

	testsuite.serverFactory.DeploymentsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, deploymentName string, deploymentResource armappplatform.DeploymentResource, options *armappplatform.DeploymentsClientBeginUpdateOptions) (resp azfake.PollerResponder[armappplatform.DeploymentsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleDeploymentResource, deploymentResource))
		resp = azfake.PollerResponder[armappplatform.DeploymentsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.DeploymentsClientUpdateResponse{DeploymentResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDeploymentName, exampleDeploymentResource, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DeploymentResource))
}

func (testsuite *FakeTestSuite) TestDeployments_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_List"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"

	exampleRes := armappplatform.DeploymentResourceCollection{
		Value: []*armappplatform.DeploymentResource{
			{
				Name: to.Ptr("mydeployment"),
				Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
				Properties: &armappplatform.DeploymentResourceProperties{
					Active:  to.Ptr(false),
					AppName: to.Ptr("myapp"),
					DeploymentSettings: &armappplatform.DeploymentSettings{
						CPU: to.Ptr[int32](1),
						EnvironmentVariables: map[string]*string{
							"env": to.Ptr("test"),
						},
						JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
						MemoryInGB:     to.Ptr[int32](3),
						RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
					},
					Instances: []*armappplatform.DeploymentInstance{
						{
							Name:            to.Ptr("instance1"),
							DiscoveryStatus: to.Ptr("pending"),
							StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
							Status:          to.Ptr("Running"),
						}},
					ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
					Source: &armappplatform.UserSourceInfo{
						Type:             to.Ptr(armappplatform.UserSourceTypeSource),
						ArtifactSelector: to.Ptr("sub-module-1"),
						RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
						Version:          to.Ptr("1.0"),
					},
					Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
				},
				SKU: &armappplatform.SKU{
					Name:     to.Ptr("S0"),
					Capacity: to.Ptr[int32](1),
					Tier:     to.Ptr("Standard"),
				},
			}},
	}

	testsuite.serverFactory.DeploymentsServer.NewListPager = func(resourceGroupName string, serviceName string, appName string, options *armappplatform.DeploymentsClientListOptions) (resp azfake.PagerResponder[armappplatform.DeploymentsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		resp = azfake.PagerResponder[armappplatform.DeploymentsClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.DeploymentsClientListResponse{DeploymentResourceCollection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleServiceName, exampleAppName, &armappplatform.DeploymentsClientListOptions{Version: []string{}})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentResourceCollection))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDeployments_ListForCluster() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_ListForCluster"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"

	exampleRes := armappplatform.DeploymentResourceCollection{
		Value: []*armappplatform.DeploymentResource{
			{
				Name: to.Ptr("mydeployment"),
				Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
				Properties: &armappplatform.DeploymentResourceProperties{
					Active:  to.Ptr(false),
					AppName: to.Ptr("myapp"),
					DeploymentSettings: &armappplatform.DeploymentSettings{
						CPU: to.Ptr[int32](1),
						EnvironmentVariables: map[string]*string{
							"env": to.Ptr("test"),
						},
						JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
						MemoryInGB:     to.Ptr[int32](3),
						RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
					},
					Instances: []*armappplatform.DeploymentInstance{
						{
							Name:            to.Ptr("instance1"),
							DiscoveryStatus: to.Ptr("pending"),
							StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
							Status:          to.Ptr("Running"),
						}},
					ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
					Source: &armappplatform.UserSourceInfo{
						Type:             to.Ptr(armappplatform.UserSourceTypeSource),
						ArtifactSelector: to.Ptr("sub-module-1"),
						RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
						Version:          to.Ptr("1.0"),
					},
					Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
				},
				SKU: &armappplatform.SKU{
					Name:     to.Ptr("S0"),
					Capacity: to.Ptr[int32](1),
					Tier:     to.Ptr("Standard"),
				},
			}},
	}

	testsuite.serverFactory.DeploymentsServer.NewListForClusterPager = func(resourceGroupName string, serviceName string, options *armappplatform.DeploymentsClientListForClusterOptions) (resp azfake.PagerResponder[armappplatform.DeploymentsClientListForClusterResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		resp = azfake.PagerResponder[armappplatform.DeploymentsClientListForClusterResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.DeploymentsClientListForClusterResponse{DeploymentResourceCollection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	pager := client.NewListForClusterPager(exampleResourceGroupName, exampleServiceName, &armappplatform.DeploymentsClientListForClusterOptions{Version: []string{}})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DeploymentResourceCollection))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDeployments_Start() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_Start"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDeploymentName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDeploymentName = "mydeployment"

	testsuite.serverFactory.DeploymentsServer.BeginStart = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, deploymentName string, options *armappplatform.DeploymentsClientBeginStartOptions) (resp azfake.PollerResponder[armappplatform.DeploymentsClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.PollerResponder[armappplatform.DeploymentsClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.DeploymentsClientStartResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	poller, err := client.BeginStart(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json")
}

func (testsuite *FakeTestSuite) TestDeployments_Stop() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_Stop"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDeploymentName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDeploymentName = "mydeployment"

	testsuite.serverFactory.DeploymentsServer.BeginStop = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, deploymentName string, options *armappplatform.DeploymentsClientBeginStopOptions) (resp azfake.PollerResponder[armappplatform.DeploymentsClientStopResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.PollerResponder[armappplatform.DeploymentsClientStopResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.DeploymentsClientStopResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	poller, err := client.BeginStop(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json")
}

func (testsuite *FakeTestSuite) TestDeployments_Restart() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Deployments_Restart"},
	})
	var exampleResourceGroupName string
	var exampleServiceName string
	var exampleAppName string
	var exampleDeploymentName string
	exampleResourceGroupName = "myResourceGroup"
	exampleServiceName = "myservice"
	exampleAppName = "myapp"
	exampleDeploymentName = "mydeployment"

	testsuite.serverFactory.DeploymentsServer.BeginRestart = func(ctx context.Context, resourceGroupName string, serviceName string, appName string, deploymentName string, options *armappplatform.DeploymentsClientBeginRestartOptions) (resp azfake.PollerResponder[armappplatform.DeploymentsClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleServiceName, serviceName)
		testsuite.Require().Equal(exampleAppName, appName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.PollerResponder[armappplatform.DeploymentsClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armappplatform.DeploymentsClientRestartResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDeploymentsClient()
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleServiceName, exampleAppName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json")
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})

	exampleRes := armappplatform.AvailableOperations{
		Value: []*armappplatform.OperationDetail{
			{
				Name: to.Ptr("Microsoft.AppPlatform/Spring/read"),
				Display: &armappplatform.OperationDisplay{
					Description: to.Ptr("Create or Update Managed Applications"),
					Operation:   to.Ptr("Create or Update Managed Applications"),
					Provider:    to.Ptr("Microsoft Azure Distributed Managed Service for Spring"),
					Resource:    to.Ptr("Managed Applications"),
				},
				IsDataAction: to.Ptr(false),
				Origin:       to.Ptr("user,system"),
				Properties:   &armappplatform.OperationProperties{},
			}},
	}

	testsuite.serverFactory.OperationsServer.NewListPager = func(options *armappplatform.OperationsClientListOptions) (resp azfake.PagerResponder[armappplatform.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armappplatform.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.OperationsClientListResponse{AvailableOperations: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOperationsClient()
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AvailableOperations))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestRuntimeVersions_ListRuntimeVersions() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"RuntimeVersions_ListRuntimeVersions"},
	})

	exampleRes := armappplatform.AvailableRuntimeVersions{
		Value: []*armappplatform.SupportedRuntimeVersion{
			{
				Platform: to.Ptr(armappplatform.SupportedRuntimePlatformJava),
				Value:    to.Ptr(armappplatform.SupportedRuntimeValueJava8),
				Version:  to.Ptr("8"),
			},
			{
				Platform: to.Ptr(armappplatform.SupportedRuntimePlatformJava),
				Value:    to.Ptr(armappplatform.SupportedRuntimeValueJava11),
				Version:  to.Ptr("11"),
			},
			{
				Platform: to.Ptr(armappplatform.SupportedRuntimePlatformNETCore),
				Value:    to.Ptr(armappplatform.SupportedRuntimeValueNetCore31),
				Version:  to.Ptr("3.1"),
			}},
	}

	testsuite.serverFactory.RuntimeVersionsServer.ListRuntimeVersions = func(ctx context.Context, options *armappplatform.RuntimeVersionsClientListRuntimeVersionsOptions) (resp azfake.Responder[armappplatform.RuntimeVersionsClientListRuntimeVersionsResponse], errResp azfake.ErrorResponder) {
		resp = azfake.Responder[armappplatform.RuntimeVersionsClientListRuntimeVersionsResponse]{}
		resp.SetResponse(http.StatusOK, armappplatform.RuntimeVersionsClientListRuntimeVersionsResponse{AvailableRuntimeVersions: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewRuntimeVersionsClient()
	res, err := client.ListRuntimeVersions(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AvailableRuntimeVersions))
}

func (testsuite *FakeTestSuite) TestSKUs_List() {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Skus_List"},
	})

	exampleRes := armappplatform.ResourceSKUCollection{
		Value: []*armappplatform.ResourceSKU{
			{
				Name: to.Ptr("B0"),
				Capacity: &armappplatform.SKUCapacity{
					Default:   to.Ptr[int32](1),
					Maximum:   to.Ptr[int32](20),
					Minimum:   to.Ptr[int32](1),
					ScaleType: to.Ptr(armappplatform.SKUScaleTypeAutomatic),
				},
				LocationInfo: []*armappplatform.ResourceSKULocationInfo{
					{
						Location:    to.Ptr("eastus"),
						ZoneDetails: []*armappplatform.ResourceSKUZoneDetails{},
						Zones:       []*string{},
					}},
				Locations: []*string{
					to.Ptr("eastus")},
				ResourceType: to.Ptr("Spring"),
				Restrictions: []*armappplatform.ResourceSKURestrictions{},
				Tier:         to.Ptr("Basic"),
			}},
	}

	testsuite.serverFactory.SKUsServer.NewListPager = func(options *armappplatform.SKUsClientListOptions) (resp azfake.PagerResponder[armappplatform.SKUsClientListResponse]) {
		resp = azfake.PagerResponder[armappplatform.SKUsClientListResponse]{}
		resp.AddPage(http.StatusOK, armappplatform.SKUsClientListResponse{ResourceSKUCollection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewSKUsClient()
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceSKUCollection))
		if err == nil {
			break
		}
	}
}
