//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/compute/armcompute"
	"github.com/Azure/azure-sdk-for-go/sdk/compute/armcompute/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/v2/testutil"
	"github.com/stretchr/testify/suite"
)

type FakeTestSuite struct {
	suite.Suite

	cred           azcore.TokenCredential
	subscriptionId string
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.cred = &testutil.FakeCredential{}
	testsuite.subscriptionId = "00000000-0000-0000-0000-000000000000"
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewAvailabilitySetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an availability set."},
	})
	var exampleResourceGroupName string
	var exampleAvailabilitySetName string
	var exampleParameters armcompute.AvailabilitySet
	exampleResourceGroupName = "myResourceGroup"
	exampleAvailabilitySetName = "myAvailabilitySet"
	exampleParameters = armcompute.AvailabilitySet{
		Location: to.Ptr("westus"),
		AdditionalProperties: map[string]*string{
			"anyProperty": to.Ptr("fakeValue"),
		},
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
		},
	}

	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("Classic"),
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, availabilitySetName string, parameters armcompute.AvailabilitySet, options *armcompute.AvailabilitySetsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.AvailabilitySetsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientCreateOrUpdateResponse{AvailabilitySet: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleAvailabilitySetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AvailabilitySet))
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewAvailabilitySetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List availability sets in a subscription."},
	})

	exampleRes := armcompute.AvailabilitySetListResult{
		Value: []*armcompute.AvailabilitySet{
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("australiasoutheast"),
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines: []*armcompute.SubResource{
						{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
						}},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("australiasoutheast"),
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines: []*armcompute.SubResource{
						{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
						}},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("westcentralus"),
				Tags: map[string]*string{
					"{tagName}": to.Ptr("{tagValue}"),
				},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines:           []*armcompute.SubResource{},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("westcentralus"),
				Tags: map[string]*string{
					"{tagName}": to.Ptr("{tagValue}"),
				},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines:           []*armcompute.SubResource{},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.AvailabilitySetsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.AvailabilitySetsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.AvailabilitySetsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.AvailabilitySetsClientListBySubscriptionResponse{AvailabilitySetListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(&armcompute.AvailabilitySetsClientListBySubscriptionOptions{Expand: to.Ptr("Faked for test: +ge+2020, %3E2012")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AvailabilitySetListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_ListAvailableSizes() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewProximityPlacementGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a proximity placement group."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	var exampleParameters armcompute.ProximityPlacementGroup
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "$(resourceName)"
	exampleParameters = armcompute.ProximityPlacementGroup{
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}

	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, parameters armcompute.ProximityPlacementGroup, options *armcompute.ProximityPlacementGroupsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientCreateOrUpdateResponse{ProximityPlacementGroup: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup))
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_Update() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewProximityPlacementGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	var exampleParameters armcompute.ProximityPlacementGroupUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "myProximityPlacementGroup"
	exampleParameters = armcompute.ProximityPlacementGroupUpdate{
		Tags: map[string]*string{
			"additionalProp1": to.Ptr("string"),
		},
	}

	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, parameters armcompute.ProximityPlacementGroupUpdate, options *armcompute.ProximityPlacementGroupsClientUpdateOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientUpdateResponse{ProximityPlacementGroup: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup))
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_Delete() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewProximityPlacementGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "$(resourceName)"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, options *armcompute.ProximityPlacementGroupsClientDeleteOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteAProximityPlacementGroup.json")
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_Get() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewProximityPlacementGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "myProximityPlacementGroup"

	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
			VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, options *armcompute.ProximityPlacementGroupsClientGetOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientGetResponse{ProximityPlacementGroup: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, &armcompute.ProximityPlacementGroupsClientGetOptions{IncludeColocationStatus: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup))
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewProximityPlacementGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})

	exampleRes := armcompute.ProximityPlacementGroupListResult{
		Value: []*armcompute.ProximityPlacementGroup{
			{
				Name:     to.Ptr("myProximityPlacementGroup"),
				Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.ProximityPlacementGroupProperties{
					AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
					VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
				},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.ProximityPlacementGroupsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ProximityPlacementGroupsClientListBySubscriptionResponse{ProximityPlacementGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ProximityPlacementGroupListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewProximityPlacementGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.ProximityPlacementGroupListResult{
		Value: []*armcompute.ProximityPlacementGroup{
			{
				Name:     to.Ptr("myProximityPlacementGroup"),
				Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.ProximityPlacementGroupProperties{
					AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
					VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.ProximityPlacementGroupsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ProximityPlacementGroupsClientListByResourceGroupResponse{ProximityPlacementGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ProximityPlacementGroupListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDedicatedHostGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host group."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleParameters armcompute.DedicatedHostGroup
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleParameters = armcompute.DedicatedHostGroup{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
			"owner":      to.Ptr("myCompany"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, parameters armcompute.DedicatedHostGroup, options *armcompute.DedicatedHostGroupsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_Get() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDedicatedHostGroupsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a dedicated host group."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"

	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			Hosts: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost1"),
				},
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost2"),
				}},
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost1"),
					},
					{
						AssetID: to.Ptr("f293d4ac-5eea-4be2-b0c0-0fcaa09aebf8"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost2"),
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("3")},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostGroupsClientGetOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientGetResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleHostGroupName, &armcompute.DedicatedHostGroupsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_ListByResourceGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_ListBySubscription() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDedicatedHostsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host ."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	var exampleParameters armcompute.DedicatedHost
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleHostName = "myDedicatedHost"
	exampleParameters = armcompute.DedicatedHost{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			PlatformFaultDomain: to.Ptr[int32](1),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}

	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myDedicatedHost"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(false),
			HostID:               to.Ptr("{GUID}"),
			LicenseType:          to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain:  to.Ptr[int32](1),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, parameters armcompute.DedicatedHost, options *armcompute.DedicatedHostsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientCreateOrUpdateResponse{DedicatedHost: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHost))
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_Get() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDedicatedHostsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dedicated host."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleHostName = "myHost"

	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			HostID:               to.Ptr("{GUID}"),
			InstanceView: &armcompute.DedicatedHostInstanceView{
				AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
				AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
					AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
						{
							Count:  to.Ptr[float64](10),
							VMSize: to.Ptr("Standard_A1"),
						}},
				},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					{
						Code:          to.Ptr("HealthState/available"),
						DisplayStatus: to.Ptr("Host available"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-27T01:02:38.313Z"); return t }()),
			VirtualMachines: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/vm1"),
				}},
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientGetOptions) (resp azfake.Responder[armcompute.DedicatedHostsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		resp = azfake.Responder[armcompute.DedicatedHostsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostsClientGetResponse{DedicatedHost: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, &armcompute.DedicatedHostsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHost))
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_ListByHostGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_ListBySubscription() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_ListByResourceGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Create() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSSHPublicKeysClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new SSH public key resource."},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	var exampleParameters armcompute.SSHPublicKeyResource
	exampleResourceGroupName = "myResourceGroup"
	exampleSshPublicKeyName = "mySshPublicKeyName"
	exampleParameters = armcompute.SSHPublicKeyResource{
		Location: to.Ptr("westus"),
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	fakeServer.Create = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters armcompute.SSHPublicKeyResource, options *armcompute.SSHPublicKeysClientCreateOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.SSHPublicKeysClientCreateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientCreateResponse{SSHPublicKeyResource: exampleRes}, nil)
		return
	}
	res, err := client.Create(ctx, exampleResourceGroupName, exampleSshPublicKeyName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource))
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Get() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSSHPublicKeysClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ssh public key."},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSshPublicKeyName = "mySshPublicKeyName"

	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, options *armcompute.SSHPublicKeysClientGetOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		resp = azfake.Responder[armcompute.SSHPublicKeysClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientGetResponse{SSHPublicKeyResource: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleSshPublicKeyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource))
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_GenerateKeyPair() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSSHPublicKeysClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate an SSH key pair."},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSshPublicKeyName = "mySshPublicKeyName"

	exampleRes := armcompute.SSHPublicKeyGenerateKeyPairResult{
		ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		PrivateKey: to.Ptr("{ssh private key}"),
		PublicKey:  to.Ptr("{ssh-rsa public key}"),
	}

	fakeServer.GenerateKeyPair = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, options *armcompute.SSHPublicKeysClientGenerateKeyPairOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientGenerateKeyPairResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		resp = azfake.Responder[armcompute.SSHPublicKeysClientGenerateKeyPairResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientGenerateKeyPairResponse{SSHPublicKeyGenerateKeyPairResult: exampleRes}, nil)
		return
	}
	res, err := client.GenerateKeyPair(ctx, exampleResourceGroupName, exampleSshPublicKeyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyGenerateKeyPairResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensionImages_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensionImages_ListTypes() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensionImages_ListVersions() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_CreateOrUpdate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_ListOffers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_ListPublishers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_ListOffers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_ListPublishers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestUsage_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ListByLocation() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the virtual machines under the specified subscription for the specified location."},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armcompute.VirtualMachineListResult{
		Value: []*armcompute.VirtualMachine{
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"RG":      to.Ptr("rg"),
					"testTag": to.Ptr("1"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
					},
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						Secrets:                  []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							EnableAutomaticUpdates: to.Ptr(true),
							ProvisionVMAgent:       to.Ptr(true),
						},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2012-R2-Datacenter"),
							Version:   to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](127),
							OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
						},
					},
					VMID: to.Ptr("{vmId}"),
				},
			},
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"RG":      to.Ptr("rg"),
					"testTag": to.Ptr("1"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
					},
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						Secrets:                  []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							EnableAutomaticUpdates: to.Ptr(true),
							ProvisionVMAgent:       to.Ptr(true),
						},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2012-R2-Datacenter"),
							Version:   to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](127),
							OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
						},
					},
					VMID: to.Ptr("{vmId}"),
				},
			}},
	}

	fakeServer.NewListByLocationPager = func(location string, options *armcompute.VirtualMachinesClientListByLocationOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListByLocationResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListByLocationResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListByLocationResponse{VirtualMachineListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByLocationPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Capture() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting assessmentMode of ImageDefault."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleParameters armcompute.VirtualMachine
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting patchMode of ImageDefault."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with Uefi Settings of secureBoot and vTPM."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr("TrustedLaunch"),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windowsserver-gen2preview-preview"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows10-tvm"),
					Version:   to.Ptr("18363.592.2001092016"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr("TrustedLaunch"),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windowsserver-gen2preview-preview"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows10-tvm"),
					Version:   to.Ptr("18363.592.2001092016"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with UserData"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "{vm-name}"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("{vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/{vm-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with network interface configuration"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
					{
						Name: to.Ptr("{nic-config-name}"),
						Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
								{
									Name: to.Ptr("{ip-config-name}"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
										Primary: to.Ptr(true),
										PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
											Name: to.Ptr("{publicIP-config-name}"),
											Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
												DeleteOption:             to.Ptr(armcompute.DeleteOptionsDetach),
												PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodStatic),
											},
											SKU: &armcompute.PublicIPAddressSKU{
												PublicIPAddressSKUName: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												PublicIPAddressSKUTier: to.Ptr(armcompute.PublicIPAddressSKUTierGlobal),
											},
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/toBeCreatedNetworkInterface"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting assessmentMode of ImageDefault."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByOS."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and enableHotpatching set to true."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of Manual."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image vm from an unmanaged generalized os image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "{vm-name}"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("926cd555-a07c-4ff5-b214-4aa4dd09d79b"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image vm with unmanaged os and data disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "{vm-name}"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd"),
						},
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd"),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("dataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk0.vhd"),
						},
					},
					{
						Name:         to.Ptr("dataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk1.vhd"),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("5230a749-2f68-4830-900b-702182d32e63"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a custom image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a generalized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a specialized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in a Virtual Machine Scale Set with customer assigned platformFaultDomain."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
			VirtualMachineScaleSet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}"),
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VirtualMachineScaleSet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myExistingFlexVmss"),
			},
			VMID: to.Ptr("7cce54f2-ecd3-4ddd-a8d9-50984faa3918"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in an availability set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}"),
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/NSGEXISTINGAS"),
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with DiskEncryptionSet resource id in the os disk and data disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskencryptionset-name}"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Host Encryption using encryptionAtHost property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("$(fakeStepVar)"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("$(fakeScenarioVar)"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Scheduled Events Profile"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
				TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT10M"),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
				TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT10M"),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with a marketplace image plan."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with an extensions time budget."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT30M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT30M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with empty data disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Cache disk using placement property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Resource disk using placement property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with managed boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with password authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b248db33-62ba-4d2d-b791-811e075ee0f5"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with premium storage."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ssh authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("{image_offer}"),
					Publisher: to.Ptr("{image_publisher}"),
					SKU:       to.Ptr("{image_sku}"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("e0de9b84-a506-4b95-9623-00a425d05c90"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by detaching data disk"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleParameters armcompute.VirtualMachineUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachineUpdate{
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ToBeDetached: to.Ptr(true),
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineUpdate, options *armcompute.VirtualMachinesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by force-detaching data disk"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachineUpdate{
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ToBeDetached: to.Ptr(true),
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineUpdate, options *armcompute.VirtualMachinesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force delete a VM"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{myStorageAccount}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT50M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS3V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/my-ppg01"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("myDataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](30),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
					{
						Name:         to.Ptr("myDataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](100),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]any{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGetResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine placed on a dedicated host group through automatic placement"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGetResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_InstanceView() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Virtual Machine Instance View."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes := armcompute.VirtualMachineInstanceView{
		BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
			ConsoleScreenshotBlobURI: to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.screenshot.bmp"),
			SerialConsoleLogBlobURI:  to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.serialconsole.log"),
		},
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.477Z"); return t }()),
					}},
			},
			{
				Name: to.Ptr("myDataDisk0"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.461Z"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		PatchStatus: &armcompute.VirtualMachinePatchStatus{
			AvailablePatchSummary: &armcompute.AvailablePatchSummary{
				AssessmentActivityID:          to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				CriticalAndSecurityPatchCount: to.Ptr[int32](1),
				LastModifiedTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				OtherPatchCount:               to.Ptr[int32](2),
				RebootPending:                 to.Ptr(true),
				StartTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
			ConfigurationStatuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("PatchModeConfigurationState/Ready"),
					DisplayStatus: to.Ptr("Status_PatchModeConfigurationState_Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				},
				{
					Code:          to.Ptr("PatchModeConfigurationState/Pending"),
					DisplayStatus: to.Ptr("Status_PatchModeConfigurationState_Pending"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				},
				{
					Code:          to.Ptr("AssessmentModeConfigurationState/Pending"),
					DisplayStatus: to.Ptr("Status_AssessmentModeConfigurationState_Pending"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				}},
			LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
				ExcludedPatchCount:        to.Ptr[int32](1),
				FailedPatchCount:          to.Ptr[int32](1),
				InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9981-33cc88631968"),
				InstalledPatchCount:       to.Ptr[int32](1),
				LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				MaintenanceWindowExceeded: to.Ptr(false),
				NotSelectedPatchCount:     to.Ptr[int32](1),
				PendingPatchCount:         to.Ptr[int32](1),
				StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				Status:                    to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
		},
		PlatformFaultDomain:  to.Ptr[int32](1),
		PlatformUpdateDomain: to.Ptr[int32](1),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:30:12.805Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
				{
					Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Ready"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					TypeHandlerVersion: to.Ptr("1.5.5.9"),
				}},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T23:11:22.000Z"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
		Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
			{
				Name: to.Ptr("IaaSAntiMalware-ext0"),
				Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("Microsoft Antimalware enabled"),
					}},
				TypeHandlerVersion: to.Ptr("1.5.5.9"),
			}},
	}

	fakeServer.InstanceView = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientInstanceViewResponse{VirtualMachineInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.InstanceView(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine placed on a dedicated host group through automatic placement."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes = armcompute.VirtualMachineInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T21:29:47.477Z"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T21:30:12.805Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T23:11:22.000Z"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
	}

	fakeServer.InstanceView = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientInstanceViewResponse{VirtualMachineInstanceView: exampleRes}, nil)
		return
	}
	res, err = client.InstanceView(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ConvertToManagedDisks() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Deallocate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Generalize() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GeneralizeVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generalize a Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVMName"

	fakeServer.Generalize = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGeneralizeOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGeneralizeResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGeneralizeResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGeneralizeResponse{}, nil)
		return
	}
	_, err = client.Generalize(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GeneralizeVirtualMachine.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ListAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ListAvailableSizes() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available virtual machine sizes to which the specified virtual machine can be resized"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVmName"

	exampleRes := armcompute.VirtualMachineSizeListResult{
		Value: []*armcompute.VirtualMachineSize{
			{
				Name:                 to.Ptr("Standard_A1_V2"),
				MaxDataDiskCount:     to.Ptr[int32](2),
				MemoryInMB:           to.Ptr[int32](2048),
				NumberOfCores:        to.Ptr[int32](1),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](10240),
			},
			{
				Name:                 to.Ptr("Standard_A2_V2"),
				MaxDataDiskCount:     to.Ptr[int32](4),
				MemoryInMB:           to.Ptr[int32](4096),
				NumberOfCores:        to.Ptr[int32](2),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](20480),
			}},
	}

	fakeServer.NewListAvailableSizesPager = func(resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientListAvailableSizesOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListAvailableSizesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListAvailableSizesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListAvailableSizesResponse{VirtualMachineSizeListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAvailableSizesPager(exampleResourceGroupName, exampleVmName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineSizeListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachines_PowerOff() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Reapply() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reapply the state of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmName = "VMName"

	fakeServer.BeginReapply = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginReapplyOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientReapplyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientReapplyResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientReapplyResponse{}, nil)
		return
	}
	poller, err := client.BeginReapply(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Restart() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Start() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Redeploy() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Reimage() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage a Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVMName"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginReimageOptions{Parameters: &armcompute.VirtualMachineReimageParameters{
		TempDisk: to.Ptr(true),
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_RetrieveBootDiagnosticsData() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmName = "VMName"

	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/vm.screenshot.bmp?{sasKey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/vm.serialconsole.log?{sasKey}"),
	}

	fakeServer.RetrieveBootDiagnosticsData = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataResponse{RetrieveBootDiagnosticsDataResult: exampleRes}, nil)
		return
	}
	res, err := client.RetrieveBootDiagnosticsData(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_PerformMaintenance() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_SimulateEviction() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmName = "VMName"

	fakeServer.SimulateEviction = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientSimulateEvictionOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientSimulateEvictionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientSimulateEvictionResponse]{}
		resp.SetResponse(http.StatusNoContent, armcompute.VirtualMachinesClientSimulateEvictionResponse{}, nil)
		return
	}
	_, err = client.SimulateEviction(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVM.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_AssessPatches() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assess patch state of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroupName"
	exampleVmName = "myVMName"

	exampleRes := armcompute.VirtualMachineAssessPatchesResult{
		AssessmentActivityID: to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		AvailablePatches: []*armcompute.VirtualMachineSoftwarePatchProperties{
			{
				Name:            to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				KbID:                 to.Ptr("2267602"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.283Z"); return t }()),
				PatchID:              to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00.000Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorNeverReboots),
				Version:              to.Ptr(""),
			},
			{
				Name:            to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				KbID:                 to.Ptr("890830"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.283Z"); return t }()),
				PatchID:              to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00.000Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorCanRequestReboot),
				Version:              to.Ptr(""),
			}},
		CriticalAndSecurityPatchCount: to.Ptr[int32](1),
		OtherPatchCount:               to.Ptr[int32](2),
		RebootPending:                 to.Ptr(true),
		StartDateTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
		Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}

	fakeServer.BeginAssessPatches = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginAssessPatchesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientAssessPatchesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientAssessPatchesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientAssessPatchesResponse{VirtualMachineAssessPatchesResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginAssessPatches(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineAssessPatchesResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_InstallPatches() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Install patch state of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleInstallPatchesInput armcompute.VirtualMachineInstallPatchesParameters
	exampleResourceGroupName = "myResourceGroupName"
	exampleVmName = "myVMName"
	exampleInstallPatchesInput = armcompute.VirtualMachineInstallPatchesParameters{
		MaximumDuration: to.Ptr("PT4H"),
		RebootSetting:   to.Ptr(armcompute.VMGuestPatchRebootSettingIfRequired),
		WindowsParameters: &armcompute.WindowsParameters{
			ClassificationsToInclude: []*armcompute.VMGuestPatchClassificationWindows{
				to.Ptr(armcompute.VMGuestPatchClassificationWindowsCritical),
				to.Ptr(armcompute.VMGuestPatchClassificationWindowsSecurity)},
			MaxPatchPublishDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T02:36:43.053Z"); return t }()),
		},
	}

	exampleRes := armcompute.VirtualMachineInstallPatchesResult{
		ExcludedPatchCount:        to.Ptr[int32](0),
		FailedPatchCount:          to.Ptr[int32](0),
		InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		InstalledPatchCount:       to.Ptr[int32](3),
		MaintenanceWindowExceeded: to.Ptr(false),
		NotSelectedPatchCount:     to.Ptr[int32](0),
		Patches: []*armcompute.PatchInstallationDetail{
			{
				Name: to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStateInstalled),
				KbID:              to.Ptr("2267602"),
				PatchID:           to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				Version:           to.Ptr(""),
			},
			{
				Name: to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStatePending),
				KbID:              to.Ptr("890830"),
				PatchID:           to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				Version:           to.Ptr(""),
			}},
		PendingPatchCount: to.Ptr[int32](2),
		RebootStatus:      to.Ptr(armcompute.VMGuestPatchRebootStatusCompleted),
		StartDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
		Status:            to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}

	fakeServer.BeginInstallPatches = func(ctx context.Context, resourceGroupName string, vmName string, installPatchesInput armcompute.VirtualMachineInstallPatchesParameters, options *armcompute.VirtualMachinesClientBeginInstallPatchesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientInstallPatchesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleInstallPatchesInput, installPatchesInput))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientInstallPatchesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientInstallPatchesResponse{VirtualMachineInstallPatchesResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginInstallPatches(ctx, exampleResourceGroupName, exampleVmName, exampleInstallPatchesInput, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineInstallPatchesResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_RunCommand() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachinesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommand"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleParameters armcompute.RunCommandInput
	exampleResourceGroupName = "crptestar98131"
	exampleVmName = "vm3036"
	exampleParameters = armcompute.RunCommandInput{
		CommandID: to.Ptr("RunPowerShellScript"),
	}

	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("This is a sample script with parameters value1 value2"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}

	fakeServer.BeginRunCommand = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.RunCommandInput, options *armcompute.VirtualMachinesClientBeginRunCommandOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRunCommandResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientRunCommandResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientRunCommandResponse{RunCommandResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginRunCommand(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ListByLocation() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the VM scale sets under the specified subscription for the specified location."},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armcompute.VirtualMachineScaleSetListResult{
		Value: []*armcompute.VirtualMachineScaleSet{
			{
				Name:     to.Ptr("{virtualMachineScaleSetName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.VirtualMachineScaleSetProperties{
					DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
					Overprovision:                          to.Ptr(false),
					PlatformFaultDomainCount:               to.Ptr[int32](1),
					ProvisioningState:                      to.Ptr("Succeeded"),
					SinglePlacementGroup:                   to.Ptr(false),
					UpgradePolicy: &armcompute.UpgradePolicy{
						AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
							EnableAutomaticOSUpgrade: to.Ptr(false),
						},
						Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
					},
					VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
						NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									Name: to.Ptr("myNic"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												Name: to.Ptr("myIPConfig"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													Primary: to.Ptr(true),
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
							AdminUsername:      to.Ptr("admin"),
							ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(false),
							},
						},
						StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
							DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("databricks"),
								Publisher: to.Ptr("azuredatabricks"),
								SKU:       to.Ptr("databricksworker"),
								Version:   to.Ptr("3.15.2"),
							},
							OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](30),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
								},
							},
						},
					},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_D2s_v3"),
					Capacity: to.Ptr[int64](4),
					Tier:     to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("{virtualMachineScaleSetName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}1"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue2"),
				},
				Properties: &armcompute.VirtualMachineScaleSetProperties{
					DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
					Overprovision:                          to.Ptr(false),
					PlatformFaultDomainCount:               to.Ptr[int32](1),
					ProvisioningState:                      to.Ptr("Succeeded"),
					SinglePlacementGroup:                   to.Ptr(false),
					UpgradePolicy: &armcompute.UpgradePolicy{
						AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
							EnableAutomaticOSUpgrade: to.Ptr(false),
						},
						Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
					},
					VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
						NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									Name: to.Ptr("myNic1"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												Name: to.Ptr("myIPConfig"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													Primary: to.Ptr(true),
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
							AdminUsername:      to.Ptr("admin"),
							ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(false),
							},
						},
						StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
							DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("databricks"),
								Publisher: to.Ptr("azuredatabricks"),
								SKU:       to.Ptr("databricksworker"),
								Version:   to.Ptr("3.15.2"),
							},
							OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](30),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
								},
							},
						},
					},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_D2s_v3"),
					Capacity: to.Ptr[int64](4),
					Tier:     to.Ptr("Standard"),
				},
			}},
	}

	fakeServer.NewListByLocationPager = func(location string, options *armcompute.VirtualMachineScaleSetsClientListByLocationOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListByLocationResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListByLocationResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientListByLocationResponse{VirtualMachineScaleSetListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByLocationPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image scale set from an unmanaged generalized os image."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleParameters armcompute.VirtualMachineScaleSet
	exampleResourceGroupName = "<resource-group-name>"
	exampleVmScaleSetName = "<vm-scale-set-name>"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
						},
					},
				},
			},
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d6e9ab29-f8c9-4792-978c-ae2c07b98f17"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image scale set with unmanaged os disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						VhdContainers: []*string{
							to.Ptr("http://{existing-storage-account-name-0}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-1}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-2}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-3}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-4}.blob.core.windows.net/vhdContainer")},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("77b7df9a-32fe-45e3-8911-60ac9c9b9c64"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						VhdContainers: []*string{
							to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds")},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a custom image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a generalized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a specialized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with DiskEncryptionSet resource in os disk and data disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Fpga Network Interfaces."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{fpgaNic-Name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(false),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{fpgaNic-Name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{fpgaNic-Name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableFpga:                  to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{fpgaNic-Name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Host Encryption using encryptionAtHost property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Uefi Settings of secureBoot and vTPM."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr("TrustedLaunch"),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr("TrustedLaunch"),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with a marketplace image plan."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure application gateway."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/{existing-application-gateway-name}/backendAddressPools/{existing-backend-address-pool-name}"),
												}},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("a0134477-b9d9-484b-b0e3-205c1c089ffa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/nsgExistingAppGw/backendAddressPools/appGatewayBackendPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure load balancer."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/backendAddressPools/{existing-backend-address-pool-name}"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/inboundNatPools/{existing-nat-pool-name}"),
												}},
											PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
												Name: to.Ptr("{vmss-name}"),
												Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
													PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												},
											},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ec0b21ca-51ec-414b-9323-f236ffc21479"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/backendAddressPools/lbBackendPool"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/inboundNatPools/lbNatPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with automatic repairs enabled"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT30M"),
			},
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT30M"),
			},
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with empty data disks on each vm."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks using placement property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with extension time budget."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]any{},
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]any{},
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with managed boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with password authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ffb27c5c-39a5-4d4e-b307-b32598689813"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with premium storage."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("19fd38a2-f50a-42c6-9dc7-3f9cf3791225"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ssh authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("fb73af19-0090-467c-9ced-b00bceab1c45"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with terminate scheduled events enabled."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT5M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT5M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with userData."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with virtual machines in different zones."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("centralus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("3")},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("centralus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(false),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
			ZoneBalance: to.Ptr(false),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("3")},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a VM scale set."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set placed on a dedicated host group through automatic placement."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"

	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set with UserData"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Deallocate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_DeleteInstances() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_GetInstanceView() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ListAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_GetOSUpgradeHistory() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_PowerOff() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Restart() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Start() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Redeploy() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_PerformMaintenance() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_UpdateInstances() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Reimage() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ReimageAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ConvertToSinglePlacementGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_SetOrchestrationServiceState() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineSizes_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestImages_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob with DiskEncryptionSet resource."},
	})
	var exampleResourceGroupName string
	var exampleImageName string
	var exampleParameters armcompute.Image
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk with DiskEncryptionSet resource."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot with DiskEncryptionSet resource."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from an existing virtual machine."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myVM_OsDisk_1_6dc293b7d811433196903acf92665022"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a blob."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						Lun:     to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						Lun:     to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a managed disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))
}

func (testsuite *FakeTestSuite) TestImages_Update() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates tags of an Image."},
	})
	var exampleResourceGroupName string
	var exampleImageName string
	var exampleParameters armcompute.ImageUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.ImageUpdate{
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.ImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
		},
	}

	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.ImageUpdate, options *armcompute.ImagesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))
}

func (testsuite *FakeTestSuite) TestImages_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestImages_Get() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a virtual machine image."},
	})
	var exampleResourceGroupName string
	var exampleImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"

	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, imageName string, options *armcompute.ImagesClientGetOptions) (resp azfake.Responder[armcompute.ImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		resp = azfake.Responder[armcompute.ImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ImagesClientGetResponse{Image: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleImageName, &armcompute.ImagesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))
}

func (testsuite *FakeTestSuite) TestImages_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.ImageListResult{
		Value: []*armcompute.Image{
			{
				Name:     to.Ptr("myImage"),
				Type:     to.Ptr("Microsoft.Compute/images"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.ImageProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.ImageStorageProfile{
						DataDisks: []*armcompute.ImageDataDisk{
							{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								Lun:                to.Ptr[int32](1),
							}},
						OSDisk: &armcompute.ImageOSDisk{
							BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
							ManagedDisk: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
							},
							Snapshot: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
							OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
						},
					},
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.ImagesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.ImagesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.ImagesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ImagesClientListByResourceGroupResponse{ImageListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ImageListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestImages_List() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a subscription."},
	})

	exampleRes := armcompute.ImageListResult{
		Value: []*armcompute.Image{
			{
				Name:     to.Ptr("myImage"),
				Type:     to.Ptr("Microsoft.Compute/images"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.ImageProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.ImageStorageProfile{
						DataDisks: []*armcompute.ImageDataDisk{
							{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								Lun:                to.Ptr[int32](1),
							}},
						OSDisk: &armcompute.ImageOSDisk{
							BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
							ManagedDisk: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
							},
							Snapshot: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
							OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
						},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.ImagesClientListOptions) (resp azfake.PagerResponder[armcompute.ImagesClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.ImagesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ImagesClientListResponse{ImageListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ImageListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewRestorePointCollectionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a restore point collection."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleParameters armcompute.RestorePointCollection
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "myRpc"
	exampleParameters = armcompute.RestorePointCollection{
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
		},
	}

	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, parameters armcompute.RestorePointCollection, options *armcompute.RestorePointCollectionsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientCreateOrUpdateResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_Get() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewRestorePointCollectionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection (but not the restore points contained in the restore point collection)"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "myRpc"

	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, options *armcompute.RestorePointCollectionsClientGetOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientGetResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, &armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection, including the restore points contained in the restore point collection"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"

	exampleRes = armcompute.RestorePointCollection{
		Name:     to.Ptr("rpcName"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			RestorePoints: []*armcompute.RestorePoint{
				{
					Name:            to.Ptr("restorePointName"),
					ID:              to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName"),
					ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
					ExcludeDisks: []*armcompute.APIEntityReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
						}},
					ProvisioningDetails: &armcompute.RestorePointProvisioningDetails{
						CreationTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.840Z"); return t }()),
						StatusCode:           to.Ptr[int32](0),
						StatusMessage:        to.Ptr("{\"jobMessage\":\"\",\"messageStr\":\"1/27/2021 8:35:56 PM , snapshotCreator=guestExtension, hostStatusCodePreSnapshot=200, Plugin enable Succeeded (command: Snapshot) Snapshot command completed \",\"snapshotConsistency\":2}"),
						TotalUsedSizeInBytes: to.Ptr[int64](10835349504),
					},
					ProvisioningState: to.Ptr("Succeeded"),
					SourceMetadata: &armcompute.RestorePointSourceMetadata{
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled: to.Ptr(true),
							},
						},
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
						},
						OSProfile: &armcompute.OSProfile{
							AdminUsername:               to.Ptr("admin"),
							AllowExtensionOperations:    to.Ptr(true),
							ComputerName:                to.Ptr("computerName"),
							RequireGuestProvisionSignal: to.Ptr(true),
							Secrets:                     []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								EnableAutomaticUpdates: to.Ptr(true),
								ProvisionVMAgent:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
							DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
								{
									Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
									Caching: to.Ptr(armcompute.CachingTypesNone),
									DiskRestorePoint: &armcompute.APIEntityReference{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
									},
									Lun: to.Ptr[int32](1),
									ManagedDisk: &armcompute.ManagedDiskParameters{
										ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
								}},
							OSDisk: &armcompute.RestorePointSourceVMOSDisk{
								Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
								Caching: to.Ptr(armcompute.CachingTypesReadWrite),
								DiskRestorePoint: &armcompute.APIEntityReference{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
								},
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
							},
						},
						VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
					},
				}},
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, options *armcompute.RestorePointCollectionsClientGetOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientGetResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, &armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_List() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewRestorePointCollectionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.RestorePointCollectionListResult{
		Value: []*armcompute.RestorePointCollection{
			{
				Name:     to.Ptr("restorePointCollection1"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
						Location: to.Ptr("West US"),
					},
				},
			},
			{
				Name:     to.Ptr("restorePointCollection2"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
						Location: to.Ptr("West US"),
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.RestorePointCollectionsClientListOptions) (resp azfake.PagerResponder[armcompute.RestorePointCollectionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.RestorePointCollectionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.RestorePointCollectionsClientListResponse{RestorePointCollectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RestorePointCollectionListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_ListAll() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewRestorePointCollectionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a subscription"},
	})

	exampleRes := armcompute.RestorePointCollectionListResult{
		Value: []*armcompute.RestorePointCollection{
			{
				Name:     to.Ptr("restorePointCollection1"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup1/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Test"),
						Location: to.Ptr("West US"),
					},
				},
			},
			{
				Name:     to.Ptr("restorePointCollection2"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup2/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Prod"),
						Location: to.Ptr("West US"),
					},
				},
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.RestorePointCollectionsClientListAllOptions) (resp azfake.PagerResponder[armcompute.RestorePointCollectionsClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.RestorePointCollectionsClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.RestorePointCollectionsClientListAllResponse{RestorePointCollectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RestorePointCollectionListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestRestorePoints_Create() {
	ctx := context.Background()
	fakeServer := fake.RestorePointsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewRestorePointsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a restore point"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleRestorePointName string
	var exampleParameters armcompute.RestorePoint
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"
	exampleRestorePointName = "rpName"
	exampleParameters = armcompute.RestorePoint{
		ExcludeDisks: []*armcompute.APIEntityReference{
			{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
			}},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, parameters armcompute.RestorePoint, options *armcompute.RestorePointsClientBeginCreateOptions) (resp azfake.PollerResponder[armcompute.RestorePointsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.RestorePointsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, armcompute.RestorePointsClientCreateResponse{}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json")
}

func (testsuite *FakeTestSuite) TestRestorePoints_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestRestorePoints_Get() {
	ctx := context.Background()
	fakeServer := fake.RestorePointsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewRestorePointsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleRestorePointName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"
	exampleRestorePointName = "rpName"

	exampleRes := armcompute.RestorePoint{
		Name:            to.Ptr("rpName"),
		ID:              to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName"),
		ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
		ExcludeDisks: []*armcompute.APIEntityReference{
			{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
			}},
		ProvisioningDetails: &armcompute.RestorePointProvisioningDetails{
			CreationTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.840Z"); return t }()),
			StatusCode:           to.Ptr[int32](0),
			StatusMessage:        to.Ptr("{\"jobMessage\":\"\",\"messageStr\":\"1/27/2021 8:35:56 PM , snapshotCreator=guestExtension, hostStatusCodePreSnapshot=200, Plugin enable Succeeded (command: Snapshot) Snapshot command completed \",\"snapshotConsistency\":2}"),
			TotalUsedSizeInBytes: to.Ptr[int64](10835349504),
		},
		ProvisioningState: to.Ptr("Succeeded"),
		SourceMetadata: &armcompute.RestorePointSourceMetadata{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("admin"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("computerName"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
				DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
					{
						Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
						Caching: to.Ptr(armcompute.CachingTypesNone),
						DiskRestorePoint: &armcompute.APIEntityReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
						},
						Lun: to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				OSDisk: &armcompute.RestorePointSourceVMOSDisk{
					Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskRestorePoint: &armcompute.APIEntityReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
				},
			},
			VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, options *armcompute.RestorePointsClientGetOptions) (resp azfake.Responder[armcompute.RestorePointsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		resp = azfake.Responder[armcompute.RestorePointsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointsClientGetResponse{RestorePoint: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePoint))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_CreateOrUpdate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_Cancel() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_StartOSUpgrade() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_StartExtensionUpgrade() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetRollingUpgradesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetRollingUpgradesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetRollingUpgradesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start an extension rolling upgrade."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"

	fakeServer.BeginStartExtensionUpgrade = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginStartExtensionUpgradeOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartExtensionUpgradeResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartExtensionUpgradeResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientStartExtensionUpgradeResponse{}, nil)
		return
	}
	poller, err := client.BeginStartExtensionUpgrade(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_GetLatest() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMExtensionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineScaleSetVMExtension
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetVMExtension{
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
				"items": []any{
					map[string]any{
						"name": "text - 2",
						"type": float64(1),
						"content": map[string]any{
							"json": "## New workbook\n---\n\nWelcome to your new workbook.  This area will display text formatted as markdown.\n\n\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.",
						},
					},
					map[string]any{
						"name": "query - 2",
						"type": float64(3),
						"content": map[string]any{
							"exportToExcelOptions": "visible",
							"query":                "union withsource=TableName *\n| summarize Count=count() by TableName\n| render barchart",
							"queryType":            float64(0),
							"resourceType":         "microsoft.operationalinsights/workspaces",
							"size":                 float64(1),
							"version":              "KqlItem/1.0",
						},
					},
				},
				"styleSettings": map[string]any{},
				"test":          float64(1),
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetVMExtension, options *armcompute.VirtualMachineScaleSetVMExtensionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientCreateOrUpdateResponse{VirtualMachineScaleSetVMExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMExtensionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineScaleSetVMExtensionUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetVMExtensionUpdate{
		Properties: &armcompute.VirtualMachineExtensionUpdateProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetVMExtensionUpdate, options *armcompute.VirtualMachineScaleSetVMExtensionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientUpdateResponse{VirtualMachineScaleSetVMExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMExtensionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, options *armcompute.VirtualMachineScaleSetVMExtensionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMExtensionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"

	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, options *armcompute.VirtualMachineScaleSetVMExtensionsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientGetResponse{VirtualMachineScaleSetVMExtension: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, &armcompute.VirtualMachineScaleSetVMExtensionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMExtensionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List extensions in Vmss instance."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineScaleSetVMExtensionsListResult{
		Value: []*armcompute.VirtualMachineScaleSetVMExtension{
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
				Name: to.Ptr("myVMExtension"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher"),
					Settings: map[string]any{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.2"),
				},
			},
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension1"),
				Name: to.Ptr("myVMExtension1"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType1"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher1"),
					Settings: map[string]any{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.0"),
				},
			}},
	}

	fakeServer.List = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMExtensionsClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientListResponse{VirtualMachineScaleSetVMExtensionsListResult: exampleRes}, nil)
		return
	}
	res, err := client.List(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMExtensionsClientListOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtensionsListResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Reimage() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_ReimageAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Deallocate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a virtual machine from a VM scale set."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with UserData"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineScaleSetVM{
		Name:     to.Ptr("{vmss-vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile:        &armcompute.HardwareProfile{},
			LatestModelApplied:     to.Ptr(true),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(false),
							EnableIPForwarding:          to.Ptr(false),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("Foo12"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("test000000"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](128),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					ExactVersion: to.Ptr("4.127.20180315"),
					Offer:        to.Ptr("WindowsServer"),
					Publisher:    to.Ptr("MicrosoftWindowsServer"),
					SKU:          to.Ptr("2012-R2-Datacenter"),
					Version:      to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](127),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]any{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientGetResponse{VirtualMachineScaleSetVM: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_GetInstanceView() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine from a VM scale set placed on a dedicated host group through automatic placement."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineScaleSetVMInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOSDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T04:58:58.088Z"); return t }()),
					}},
			}},
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T04:59:58.185Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/Unavailable"),
					DisplayStatus: to.Ptr("Not Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesWarning),
					Message:       to.Ptr("VM status blob is found but not yet populated."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T05:00:32.000Z"); return t }()),
				}},
			VMAgentVersion: to.Ptr("Unknown"),
		},
	}

	fakeServer.GetInstanceView = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewResponse{VirtualMachineScaleSetVMInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.GetInstanceView(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMInstanceView))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_PowerOff() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Restart() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Start() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Redeploy() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_RetrieveBootDiagnosticsData() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/myvmScaleSetinstance.screenshot.bmp?{saskey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/myvmScaleSetinstance.serialconsole.log?{saskey}"),
	}

	fakeServer.RetrieveBootDiagnosticsData = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse{RetrieveBootDiagnosticsDataResult: exampleRes}, nil)
		return
	}
	res, err := client.RetrieveBootDiagnosticsData(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_PerformMaintenance() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_SimulateEviction() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVmssVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmScaleSetName = "VmScaleSetName"
	exampleInstanceID = "InstanceId"

	fakeServer.SimulateEviction = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionResponse]{}
		resp.SetResponse(http.StatusNoContent, armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionResponse{}, nil)
		return
	}
	_, err = client.SimulateEviction(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVmssVM.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_RunCommand() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_RunCommand"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleParameters armcompute.RunCommandInput
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"
	exampleInstanceID = "0"
	exampleParameters = armcompute.RunCommandInput{
		CommandID: to.Ptr("RunPowerShellScript"),
		Script: []*string{
			to.Ptr("# Test multi-line string\r\nWrite-Host Hello World!")},
	}

	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("Hello World!"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}

	fakeServer.BeginRunCommand = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, parameters armcompute.RunCommandInput, options *armcompute.VirtualMachineScaleSetVMsClientBeginRunCommandOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse{RunCommandResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginRunCommand(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandResult))
}

func (testsuite *FakeTestSuite) TestLogAnalytics_ExportRequestRateByInterval() {
	ctx := context.Background()
	fakeServer := fake.LogAnalyticsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewLogAnalyticsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewLogAnalyticsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all Api requests made to Compute Resource Provider within the given time period broken down by intervals."},
	})
	var exampleLocation string
	var exampleParameters armcompute.RequestRateByIntervalInput
	exampleLocation = "westus"
	exampleParameters = armcompute.RequestRateByIntervalInput{
		BlobContainerSasURI: to.Ptr("https://somesasuri"),
		FromTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862Z"); return t }()),
		GroupByResourceName: to.Ptr(true),
		ToTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862Z"); return t }()),
		IntervalLength:      to.Ptr(armcompute.IntervalInMinsFiveMins),
	}

	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/RequestRateByInterval_20180121-0154_20180123-0154.csv"),
		},
	}

	fakeServer.BeginExportRequestRateByInterval = func(ctx context.Context, location string, parameters armcompute.RequestRateByIntervalInput, options *armcompute.LogAnalyticsClientBeginExportRequestRateByIntervalOptions) (resp azfake.PollerResponder[armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse{LogAnalyticsOperationResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginExportRequestRateByInterval(ctx, exampleLocation, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult))
}

func (testsuite *FakeTestSuite) TestLogAnalytics_ExportThrottledRequests() {
	ctx := context.Background()
	fakeServer := fake.LogAnalyticsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewLogAnalyticsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewLogAnalyticsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all throttled Api requests made to Compute Resource Provider within the given time period."},
	})
	var exampleLocation string
	var exampleParameters armcompute.ThrottledRequestsInput
	exampleLocation = "westus"
	exampleParameters = armcompute.ThrottledRequestsInput{
		BlobContainerSasURI:        to.Ptr("https://somesasuri"),
		FromTime:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862Z"); return t }()),
		GroupByClientApplicationID: to.Ptr(false),
		GroupByOperationName:       to.Ptr(true),
		GroupByResourceName:        to.Ptr(false),
		GroupByUserAgent:           to.Ptr(false),
		ToTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862Z"); return t }()),
	}

	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/ThrottledRequests_20180121-0154_20180123-0154.csv"),
		},
	}

	fakeServer.BeginExportThrottledRequests = func(ctx context.Context, location string, parameters armcompute.ThrottledRequestsInput, options *armcompute.LogAnalyticsClientBeginExportThrottledRequestsOptions) (resp azfake.PollerResponder[armcompute.LogAnalyticsClientExportThrottledRequestsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.LogAnalyticsClientExportThrottledRequestsResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.LogAnalyticsClientExportThrottledRequestsResponse{LogAnalyticsOperationResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginExportThrottledRequests(ctx, exampleLocation, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandList"},
	})
	var exampleLocation string
	exampleLocation = "SoutheastAsia"

	exampleRes := armcompute.RunCommandListResult{
		Value: []*armcompute.RunCommandDocumentBase{
			{
				Description: to.Ptr("Configure the machine to enable remote PowerShell."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("EnableRemotePS"),
				Label:       to.Ptr("Enable remote PowerShell"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Shows detailed information for the IP address, subnet mask and default gateway for each adapter bound to TCP/IP."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("IPConfig"),
				Label:       to.Ptr("List IP configuration"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("RunPowerShellScript"),
				Label:       to.Ptr("Executes a PowerShell script"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Custom multiline shell script should be defined in script property. Optional parameters can be set in parameters property."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("RunShellScript"),
				Label:       to.Ptr("Executes a Linux shell script"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
			},
			{
				Description: to.Ptr("Get the configuration of all network interfaces."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("ifconfig"),
				Label:       to.Ptr("List network configuration"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
			},
			{
				Description: to.Ptr("Checks if the local Administrator account is disabled, and if so enables it."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("EnableAdminAccount"),
				Label:       to.Ptr("Enable administrator account"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Reset built-in Administrator account password."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("ResetAccountPassword"),
				Label:       to.Ptr("Reset built-in Administrator account password"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Checks registry settings and domain policy settings. Suggests policy actions if machine is part of a domain or modifies the settings to default values."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("RDPSettings"),
				Label:       to.Ptr("Verify RDP Listener Settings"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Sets the default or user specified port number for Remote Desktop connections. Enables firewall rule for inbound access to the port."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("SetRDPPort"),
				Label:       to.Ptr("Set Remote Desktop port"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Removes the SSL certificate tied to the RDP listener and restores the RDP listerner security to default. Use this script if you see any issues with the certificate."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("ResetRDPCert"),
				Label:       to.Ptr("Restore RDP Authentication mode to defaults"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			}},
	}

	fakeServer.NewListPager = func(location string, options *armcompute.VirtualMachineRunCommandsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineRunCommandsClientListResponse{RunCommandListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RunCommandListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandGet"},
	})
	var exampleLocation string
	var exampleCommandID string
	exampleLocation = "SoutheastAsia"
	exampleCommandID = "RunPowerShellScript"

	exampleRes := armcompute.RunCommandDocument{
		Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
		Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
		ID:          to.Ptr("RunPowerShellScript"),
		Label:       to.Ptr("Executes a PowerShell script"),
		OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
		Parameters: []*armcompute.RunCommandParameterDefinition{
			{
				Name:         to.Ptr("arg1"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value1"),
			},
			{
				Name:         to.Ptr("arg2"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value2"),
			}},
		Script: []*string{
			to.Ptr("param("),
			to.Ptr("    [string]$arg1,"),
			to.Ptr("    [string]$arg2"),
			to.Ptr(")"),
			to.Ptr("Write-Host This is a sample script with parameters $arg1 $arg2")},
	}

	fakeServer.Get = func(ctx context.Context, location string, commandID string, options *armcompute.VirtualMachineRunCommandsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleCommandID, commandID)
		resp = azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientGetResponse{RunCommandDocument: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleCommandID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandDocument))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommand
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommand{
		Location: to.Ptr("West US"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			RunAsPassword: to.Ptr("<runAsPassword>"),
			RunAsUser:     to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, runCommand armcompute.VirtualMachineRunCommand, options *armcompute.VirtualMachineRunCommandsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientCreateOrUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommandUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommandUpdate{
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, runCommand armcompute.VirtualMachineRunCommandUpdate, options *armcompute.VirtualMachineRunCommandsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, options *armcompute.VirtualMachineRunCommandsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_GetByVirtualMachine() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	fakeServer.GetByVirtualMachine = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, options *armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineOptions) (resp azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	res, err := client.GetByVirtualMachine(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, &armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_ListByVirtualMachine() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in a Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes := armcompute.VirtualMachineRunCommandsListResult{
		Value: []*armcompute.VirtualMachineRunCommand{
			{
				Name:     to.Ptr("myRunCommand"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"tag1": to.Ptr("value1"),
					"tag2": to.Ptr("value2"),
				},
				Properties: &armcompute.VirtualMachineRunCommandProperties{
					AsyncExecution: to.Ptr(false),
					Parameters: []*armcompute.RunCommandInputParameter{
						{
							Name:  to.Ptr("param1"),
							Value: to.Ptr("value1"),
						},
						{
							Name:  to.Ptr("param2"),
							Value: to.Ptr("value2"),
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					RunAsUser:         to.Ptr("user1"),
					Source: &armcompute.VirtualMachineRunCommandScriptSource{
						Script: to.Ptr("Write-Host Hello World!"),
					},
					TimeoutInSeconds: to.Ptr[int32](0),
				},
			}},
	}

	fakeServer.NewListByVirtualMachinePager = func(resourceGroupName string, vmName string, options *armcompute.VirtualMachineRunCommandsClientListByVirtualMachineOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListByVirtualMachineResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListByVirtualMachineResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineRunCommandsClientListByVirtualMachineResponse{VirtualMachineRunCommandsListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByVirtualMachinePager(exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachineRunCommandsClientListByVirtualMachineOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineRunCommandsListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM run command."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommand
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommand{
		Location: to.Ptr("West US"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			RunAsPassword: to.Ptr("<runAsPassword>"),
			RunAsUser:     to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, runCommand armcompute.VirtualMachineRunCommand, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientCreateOrUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM run command."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommandUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommandUpdate{
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, runCommand armcompute.VirtualMachineRunCommandUpdate, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM run command."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM run commands."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMRunCommandsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMRunCommandsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientGetResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, &armcompute.VirtualMachineScaleSetVMRunCommandsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewVirtualMachineScaleSetVMRunCommandsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in Vmss instance."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineRunCommandsListResult{
		Value: []*armcompute.VirtualMachineRunCommand{
			{
				Name:     to.Ptr("myRunCommand"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.VirtualMachineRunCommandProperties{
					AsyncExecution: to.Ptr(false),
					Parameters: []*armcompute.RunCommandInputParameter{
						{
							Name:  to.Ptr("param1"),
							Value: to.Ptr("value1"),
						},
						{
							Name:  to.Ptr("param2"),
							Value: to.Ptr("value2"),
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					RunAsUser:         to.Ptr("user1"),
					Source: &armcompute.VirtualMachineRunCommandScriptSource{
						Script: to.Ptr("Write-Host Hello World!"),
					},
					TimeoutInSeconds: to.Ptr[int32](0),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientListResponse{VirtualMachineRunCommandsListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMRunCommandsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineRunCommandsListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestResourceSKUs_List() {
	ctx := context.Background()
	fakeServer := fake.ResourceSKUsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewResourceSKUsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewResourceSKUsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs"},
	})

	exampleRes := armcompute.ResourceSKUsResult{
		Value: []*armcompute.ResourceSKU{
			{
				Name: to.Ptr("Standard_A0"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("20480"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("0.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("50"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
							{
								Name: []*string{
									to.Ptr("2")},
								Capabilities: []*armcompute.ResourceSKUCapabilities{
									{
										Name:  to.Ptr("UltraSSDAvailable"),
										Value: to.Ptr("True"),
									}},
							}},
						Zones: []*string{
							to.Ptr("2"),
							to.Ptr("1")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A0"),
				Tier:         to.Ptr("Standard"),
			},
			{
				Name: to.Ptr("Standard_A1"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("71680"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("1.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("2"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("True"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("100"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						Zones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A1"),
				Tier:         to.Ptr("Standard"),
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.ResourceSKUsClientListOptions) (resp azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ResourceSKUsClientListResponse{ResourceSKUsResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceSKUsResult))
		if err == nil {
			break
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs for the specified region"},
	})

	exampleRes = armcompute.ResourceSKUsResult{
		Value: []*armcompute.ResourceSKU{
			{
				Name: to.Ptr("Standard_A0"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("20480"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("0.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("50"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
							{
								Name: []*string{
									to.Ptr("2")},
								Capabilities: []*armcompute.ResourceSKUCapabilities{
									{
										Name:  to.Ptr("UltraSSDAvailable"),
										Value: to.Ptr("True"),
									}},
							}},
						Zones: []*string{
							to.Ptr("2"),
							to.Ptr("1")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A0"),
				Tier:         to.Ptr("Standard"),
			},
			{
				Name: to.Ptr("Standard_A1"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("71680"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("1.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("2"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("True"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("100"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						Zones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A1"),
				Tier:         to.Ptr("Standard"),
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.ResourceSKUsClientListOptions) (resp azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ResourceSKUsClientListResponse{ResourceSKUsResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: to.Ptr("location eq 'westus'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceSKUsResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDisks_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDisksClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	var exampleDisk armcompute.Disk
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
		},
	}

	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
			ProvisioningState:   to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk encryption set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by copying a snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from a different subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from the same subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from a platform image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("{sku}"),
				Product:   to.Ptr("{offer}"),
				Publisher: to.Ptr("{publisher}"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an existing managed disk in the same or different subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk2"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with security profile"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("North Central US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("North Central US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
				},
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with ssd zrs account type."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
			Tier: to.Ptr("Premium"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed upload disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk in extended location."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("{edge-zone-id}"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("{edge-zone-id}"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ultra managed disk with logicalSectorSize 512E"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
				LogicalSectorSize: to.Ptr[int32](512),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
				LogicalSectorSize: to.Ptr[int32](512),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
			Tier: to.Ptr("Ultra"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))
}

func (testsuite *FakeTestSuite) TestDisks_Update() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDisksClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a bursting enabled managed disk."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	var exampleDisk armcompute.DiskUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			BurstingEnabled: to.Ptr(true),
			DiskSizeGB:      to.Ptr[int32](1024),
		},
	}

	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			BurstingEnabled: to.Ptr(true),
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](1024),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add purchase plan."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:          to.Ptr("myPurchasePlanName"),
				Product:       to.Ptr("myPurchasePlanProduct"),
				PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
				Publisher:     to.Ptr("myPurchasePlanPublisher"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:          to.Ptr("myPurchasePlanName"),
				Product:       to.Ptr("myPurchasePlanProduct"),
				PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
				Publisher:     to.Ptr("myPurchasePlanPublisher"),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add supportsHibernation."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			SupportsHibernation: to.Ptr(true),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			DiskSizeGB:          to.Ptr[int32](127),
			HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState:   to.Ptr("Succeeded"),
			SupportsHibernation: to.Ptr(true),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to change tier."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			Tier: to.Ptr("P30"),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			Tier:              to.Ptr("P30"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to disable bursting."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			BurstingEnabled: to.Ptr(false),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed disk to remove disk access resource association."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			ProvisioningState:   to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))
}

func (testsuite *FakeTestSuite) TestDisks_Get() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDisksClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a managed disk."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myManagedDisk"

	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myManagedDisk"),
		Type:     to.Ptr("Microsoft.Compute/disks"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("ManagedDisks"),
		},
		ManagedBy: to.Ptr("/subscriptions/123caaa-123v-v211-a49f-f88ccac5bf88/resourceGroups/ResourceGroupName/providers/Microsoft.Compute/virtualMachines/TestVM414689371c88843d65ec"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB: to.Ptr[int32](10),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079Z"); return t }()),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskName string, options *armcompute.DisksClientGetOptions) (resp azfake.Responder[armcompute.DisksClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		resp = azfake.Responder[armcompute.DisksClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DisksClientGetResponse{Disk: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleDiskName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))
}

func (testsuite *FakeTestSuite) TestDisks_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDisks_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDisksClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.DiskList{
		Value: []*armcompute.Disk{
			{
				Name:     to.Ptr("myManagedDisk1"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.927Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk2"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
					},
					DiskSizeGB: to.Ptr[int32](10),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk3"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
						ImageReference: &armcompute.ImageDiskReference{
							ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
						},
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.397Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DisksClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DisksClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DisksClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DisksClientListByResourceGroupResponse{DiskList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDisks_List() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDisksClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a subscription."},
	})

	exampleRes := armcompute.DiskList{
		Value: []*armcompute.Disk{
			{
				Name:     to.Ptr("myManagedDisk1"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.927Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk2"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
					},
					DiskSizeGB: to.Ptr[int32](10),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk3"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk3"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
						ImageReference: &armcompute.ImageDiskReference{
							ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
						},
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.397Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.DisksClientListOptions) (resp azfake.PagerResponder[armcompute.DisksClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.DisksClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DisksClientListResponse{DiskList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDisks_GrantAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDisks_RevokeAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSnapshots_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSnapshotsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from a different subscription."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	var exampleSnapshot armcompute.Snapshot
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot1"
	exampleSnapshot = armcompute.Snapshot{
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
		},
	}

	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.Snapshot, options *armcompute.SnapshotsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from the same subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot1"
	exampleSnapshot = armcompute.Snapshot{
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
		},
	}

	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.Snapshot, options *armcompute.SnapshotsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot from an existing snapshot in the same or a different subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot2"
	exampleSnapshot = armcompute.Snapshot{
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
		},
	}

	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.Snapshot, options *armcompute.SnapshotsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSnapshots_Get() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSnapshotsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a snapshot."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot"

	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Type:     to.Ptr("Microsoft.Compute/snapshots"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Snapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
				SourceUniqueID:   to.Ptr("d633885d-d102-4481-901e-5b2413d1a7be"),
			},
			DiskSizeGB: to.Ptr[int32](100),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, snapshotName string, options *armcompute.SnapshotsClientGetOptions) (resp azfake.Responder[armcompute.SnapshotsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		resp = azfake.Responder[armcompute.SnapshotsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SnapshotsClientGetResponse{Snapshot: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleSnapshotName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSnapshots_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSnapshotsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.SnapshotList{
		Value: []*armcompute.Snapshot{
			{
				Name:     to.Ptr("mySnapshot"),
				Type:     to.Ptr("Microsoft.Compute/snapshots"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Snapshots"),
				},
				Properties: &armcompute.SnapshotProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.927Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.SnapshotsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.SnapshotsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.SnapshotsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SnapshotsClientListByResourceGroupResponse{SnapshotList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SnapshotList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSnapshots_List() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSnapshotsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a subscription."},
	})

	exampleRes := armcompute.SnapshotList{
		Value: []*armcompute.Snapshot{
			{
				Name:     to.Ptr("mySnapshot1"),
				Type:     to.Ptr("Microsoft.Compute/snapshots"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Snapshots"),
				},
				Properties: &armcompute.SnapshotProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.663Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("mySnapshot2"),
				Type:     to.Ptr("Microsoft.Compute/snapshots"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Snapshots"),
				},
				Properties: &armcompute.SnapshotProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
						SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.324Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.SnapshotsClientListOptions) (resp azfake.PagerResponder[armcompute.SnapshotsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.SnapshotsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SnapshotsClientListResponse{SnapshotList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SnapshotList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSnapshots_GrantAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestSnapshots_RevokeAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskEncryptionSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set with key vault from a different subscription."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	var exampleDiskEncryptionSet armcompute.DiskEncryptionSet
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSet{
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
		},
	}

	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSet, options *armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSet{
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
		},
	}

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSet, options *armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_Update() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskEncryptionSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Succeeded"},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	var exampleDiskEncryptionSet armcompute.DiskEncryptionSetUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSetUpdate{
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.DiskEncryptionSetUpdateProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/KeyVersion2"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079Z"); return t }()),
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSetUpdate, options *armcompute.DiskEncryptionSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Updating"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSetUpdate{
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.DiskEncryptionSetUpdateProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion2"),
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079Z"); return t }()),
			PreviousKeys: []*armcompute.KeyForDiskEncryptionSet{
				{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				}},
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSetUpdate, options *armcompute.DiskEncryptionSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSetUpdate{
		Properties: &armcompute.DiskEncryptionSetUpdateProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
		},
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
	}

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079Z"); return t }()),
			PreviousKeys:             []*armcompute.KeyForDiskEncryptionSet{},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSetUpdate, options *armcompute.DiskEncryptionSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_Get() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskEncryptionSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk encryption set."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"

	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientGetOptions) (resp azfake.Responder[armcompute.DiskEncryptionSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		resp = azfake.Responder[armcompute.DiskEncryptionSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientGetResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_Delete() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskEncryptionSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk encryption set."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json")
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskEncryptionSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.DiskEncryptionSetList{
		Value: []*armcompute.DiskEncryptionSet{
			{
				Name:     to.Ptr("myDiskEncryptionSet"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			},
			{
				Name:     to.Ptr("myDiskEncryptionSet2"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DiskEncryptionSetsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskEncryptionSetsClientListByResourceGroupResponse{DiskEncryptionSetList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskEncryptionSetList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_List() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskEncryptionSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a subscription."},
	})

	exampleRes := armcompute.DiskEncryptionSetList{
		Value: []*armcompute.DiskEncryptionSet{
			{
				Name:     to.Ptr("myDiskEncryptionSet"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			},
			{
				Name:     to.Ptr("myDiskEncryptionSet2"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.DiskEncryptionSetsClientListOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskEncryptionSetsClientListResponse{DiskEncryptionSetList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskEncryptionSetList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_ListAssociatedResources() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskEncryptionSetsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all resources that are encrypted with this disk encryption set."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"

	exampleRes := armcompute.ResourceURIList{
		Value: []*string{
			to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
			to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")},
	}

	fakeServer.NewListAssociatedResourcesPager = func(resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientListAssociatedResourcesOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		resp = azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse{ResourceURIList: exampleRes}, nil)
		return
	}
	pager := client.NewListAssociatedResourcesPager(exampleResourceGroupName, exampleDiskEncryptionSetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceURIList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiskAccesses_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var exampleDiskAccess armcompute.DiskAccess
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	exampleDiskAccess = armcompute.DiskAccess{
		Location: to.Ptr("West US"),
	}

	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskAccessName string, diskAccess armcompute.DiskAccess, options *armcompute.DiskAccessesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskAccess, diskAccess))
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientCreateOrUpdateResponse{DiskAccess: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskAccessName, exampleDiskAccess, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_Update() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var exampleDiskAccess armcompute.DiskAccessUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	exampleDiskAccess = armcompute.DiskAccessUpdate{
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
	}

	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskAccessName string, diskAccess armcompute.DiskAccessUpdate, options *armcompute.DiskAccessesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskAccess, diskAccess))
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientUpdateResponse{DiskAccess: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskAccessName, exampleDiskAccess, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_Get() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource with private endpoints."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
				{
					Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Properties: &armcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcompute.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetResponse{DiskAccess: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes = armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetResponse{DiskAccess: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_Delete() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json")
}

func (testsuite *FakeTestSuite) TestDiskAccesses_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.DiskAccessList{
		Value: []*armcompute.DiskAccess{
			{
				Name:     to.Ptr("myDiskAccess"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myDiskAccess2"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
						{
							Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
							ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Properties: &armcompute.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armcompute.PrivateEndpoint{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
								},
								PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
									Description:     to.Ptr("Auto-Approved"),
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
								},
								ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
							},
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DiskAccessesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DiskAccessesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskAccessesClientListByResourceGroupResponse{DiskAccessList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskAccessList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiskAccesses_List() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a subscription."},
	})

	exampleRes := armcompute.DiskAccessList{
		Value: []*armcompute.DiskAccess{
			{
				Name:     to.Ptr("myDiskAccess"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myDiskAccess2"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
						{
							Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
							ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Properties: &armcompute.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armcompute.PrivateEndpoint{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
								},
								PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
									Description:     to.Ptr("Auto-Approved"),
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
								},
								ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
							},
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.DiskAccessesClientListOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.DiskAccessesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskAccessesClientListResponse{DiskAccessList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskAccessList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiskAccesses_GetPrivateLinkResources() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all possible private link resources under disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes := armcompute.PrivateLinkResourceListResult{
		Value: []*armcompute.PrivateLinkResource{
			{
				Name: to.Ptr("disks"),
				Type: to.Ptr("Microsoft.Compute/diskAccesses/privateLinkResources"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateLinkResources/disks"),
				Properties: &armcompute.PrivateLinkResourceProperties{
					GroupID: to.Ptr("disks"),
					RequiredMembers: []*string{
						to.Ptr("diskAccess_1")},
					RequiredZoneNames: []*string{
						to.Ptr("privatelink.blob.core.windows.net")},
				},
			}},
	}

	fakeServer.GetPrivateLinkResources = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetPrivateLinkResourcesOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetPrivateLinkResourcesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetPrivateLinkResourcesResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetPrivateLinkResourcesResponse{PrivateLinkResourceListResult: exampleRes}, nil)
		return
	}
	res, err := client.GetPrivateLinkResources(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_UpdateAPrivateEndpointConnection() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve a Private Endpoint Connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var examplePrivateEndpointConnectionName string
	var examplePrivateEndpointConnection armcompute.PrivateEndpointConnection
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	examplePrivateEndpointConnectionName = "myPrivateEndpointConnection"
	examplePrivateEndpointConnection = armcompute.PrivateEndpointConnection{
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Approving myPrivateEndpointConnection"),
				Status:      to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
		},
	}

	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnectionName"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approving myPrivateEndpointConnection"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdateAPrivateEndpointConnection = func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, privateEndpointConnection armcompute.PrivateEndpointConnection, options *armcompute.DiskAccessesClientBeginUpdateAPrivateEndpointConnectionOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().True(reflect.DeepEqual(examplePrivateEndpointConnection, privateEndpointConnection))
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdateAPrivateEndpointConnection(ctx, exampleResourceGroupName, exampleDiskAccessName, examplePrivateEndpointConnectionName, examplePrivateEndpointConnection, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_GetAPrivateEndpointConnection() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	examplePrivateEndpointConnectionName = "myPrivateEndpointConnection"

	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnection"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.GetAPrivateEndpointConnection = func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, options *armcompute.DiskAccessesClientGetAPrivateEndpointConnectionOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetAPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetAPrivateEndpointConnectionResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetAPrivateEndpointConnectionResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.GetAPrivateEndpointConnection(ctx, exampleResourceGroupName, exampleDiskAccessName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_DeleteAPrivateEndpointConnection() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	examplePrivateEndpointConnectionName = "myPrivateEndpointConnection"

	fakeServer.BeginDeleteAPrivateEndpointConnection = func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, options *armcompute.DiskAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse{}, nil)
		return
	}
	poller, err := client.BeginDeleteAPrivateEndpointConnection(ctx, exampleResourceGroupName, exampleDiskAccessName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json")
}

func (testsuite *FakeTestSuite) TestDiskAccesses_ListPrivateEndpointConnections() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskAccessesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes := armcompute.PrivateEndpointConnectionListResult{
		Value: []*armcompute.PrivateEndpointConnection{
			{
				Name: to.Ptr("myPrivateEndpointConnection"),
				Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
				Properties: &armcompute.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armcompute.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
					},
					PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Auto-Approved"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListPrivateEndpointConnectionsPager = func(resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientListPrivateEndpointConnectionsOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.PagerResponder[armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse{PrivateEndpointConnectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPrivateEndpointConnectionsPager(exampleResourceGroupName, exampleDiskAccessName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateEndpointConnectionListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDiskRestorePoint_Get() {
	ctx := context.Background()
	fakeServer := fake.DiskRestorePointServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskRestorePointServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskRestorePointClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleVmRestorePointName string
	var exampleDiskRestorePointName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpc"
	exampleVmRestorePointName = "vmrp"
	exampleDiskRestorePointName = "TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"

	exampleRes := armcompute.DiskRestorePoint{
		Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		Properties: &armcompute.DiskRestorePointProperties{
			FamilyID:         to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			OSType:           to.Ptr(armcompute.OperatingSystemTypesWindows),
			SourceResourceID: to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
			SourceUniqueID:   to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
			TimeCreated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, vmRestorePointName string, diskRestorePointName string, options *armcompute.DiskRestorePointClientGetOptions) (resp azfake.Responder[armcompute.DiskRestorePointClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleVmRestorePointName, vmRestorePointName)
		testsuite.Require().Equal(exampleDiskRestorePointName, diskRestorePointName)
		resp = azfake.Responder[armcompute.DiskRestorePointClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskRestorePointClientGetResponse{DiskRestorePoint: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleVmRestorePointName, exampleDiskRestorePointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskRestorePoint))
}

func (testsuite *FakeTestSuite) TestDiskRestorePoint_ListByRestorePoint() {
	ctx := context.Background()
	fakeServer := fake.DiskRestorePointServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskRestorePointServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewDiskRestorePointClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleVmRestorePointName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpc"
	exampleVmRestorePointName = "vmrp"

	exampleRes := armcompute.DiskRestorePointList{
		Value: []*armcompute.DiskRestorePoint{
			{
				Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
				Properties: &armcompute.DiskRestorePointProperties{
					FamilyID:         to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
					HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
					OSType:           to.Ptr(armcompute.OperatingSystemTypesWindows),
					SourceResourceID: to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
					SourceUniqueID:   to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
					TimeCreated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByRestorePointPager = func(resourceGroupName string, restorePointCollectionName string, vmRestorePointName string, options *armcompute.DiskRestorePointClientListByRestorePointOptions) (resp azfake.PagerResponder[armcompute.DiskRestorePointClientListByRestorePointResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleVmRestorePointName, vmRestorePointName)
		resp = azfake.PagerResponder[armcompute.DiskRestorePointClientListByRestorePointResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskRestorePointClientListByRestorePointResponse{DiskRestorePointList: exampleRes}, nil)
		return
	}
	pager := client.NewListByRestorePointPager(exampleResourceGroupName, exampleRestorePointCollectionName, exampleVmRestorePointName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskRestorePointList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGalleries_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery with sharing profile."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGallery armcompute.Gallery
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.Gallery{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			SharingProfile: &armcompute.SharingProfile{
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}

	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.Gallery, options *armcompute.GalleriesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientCreateOrUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.Gallery{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
		},
	}

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.Gallery, options *armcompute.GalleriesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientCreateOrUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))
}

func (testsuite *FakeTestSuite) TestGalleries_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGallery armcompute.GalleryUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.GalleryUpdate{
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
		},
	}

	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.GalleryUpdate, options *armcompute.GalleriesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))
}

func (testsuite *FakeTestSuite) TestGalleries_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery with select permissions."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			SharingProfile: &armcompute.SharingProfile{
				Groups: []*armcompute.SharingProfileGroup{
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
						IDs: []*string{
							to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
							to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
					},
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
						IDs: []*string{
							to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
					}},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientGetOptions) (resp azfake.Responder[armcompute.GalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.Responder[armcompute.GalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleriesClientGetResponse{Gallery: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, &armcompute.GalleriesClientGetOptions{Select: to.Ptr(armcompute.SelectPermissionsPermissions)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientGetOptions) (resp azfake.Responder[armcompute.GalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.Responder[armcompute.GalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleriesClientGetResponse{Gallery: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, &armcompute.GalleriesClientGetOptions{Select: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))
}

func (testsuite *FakeTestSuite) TestGalleries_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.PollerResponder[armcompute.GalleriesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json")
}

func (testsuite *FakeTestSuite) TestGalleries_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.GalleryList{
		Value: []*armcompute.Gallery{
			{
				Name:     to.Ptr("myGalleryName"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryProperties{
					Description: to.Ptr("This is the gallery description."),
					Identifier: &armcompute.GalleryIdentifier{
						UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
					},
					ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.GalleriesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.GalleriesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.GalleriesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleriesClientListByResourceGroupResponse{GalleryList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGalleries_List() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a subscription."},
	})

	exampleRes := armcompute.GalleryList{
		Value: []*armcompute.Gallery{
			{
				Name:     to.Ptr("myGalleryName"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryProperties{
					Description: to.Ptr("This is the gallery description."),
					Identifier: &armcompute.GalleryIdentifier{
						UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
					},
					ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.GalleriesClientListOptions) (resp azfake.PagerResponder[armcompute.GalleriesClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.GalleriesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleriesClientListResponse{GalleryList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGalleryImages_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImage armcompute.GalleryImage
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImage = armcompute.GalleryImage{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImage armcompute.GalleryImage, options *armcompute.GalleryImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImage, galleryImage))
		resp = azfake.PollerResponder[armcompute.GalleryImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImagesClientCreateOrUpdateResponse{GalleryImage: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImage, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImage))
}

func (testsuite *FakeTestSuite) TestGalleryImages_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImage armcompute.GalleryImageUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImage = armcompute.GalleryImageUpdate{
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImage armcompute.GalleryImageUpdate, options *armcompute.GalleryImagesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImagesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImage, galleryImage))
		resp = azfake.PollerResponder[armcompute.GalleryImagesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImagesClientUpdateResponse{GalleryImage: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImage, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImage))
}

func (testsuite *FakeTestSuite) TestGalleryImages_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, options *armcompute.GalleryImagesClientGetOptions) (resp azfake.Responder[armcompute.GalleryImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.Responder[armcompute.GalleryImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImagesClientGetResponse{GalleryImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImage))
}

func (testsuite *FakeTestSuite) TestGalleryImages_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, options *armcompute.GalleryImagesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryImagesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.PollerResponder[armcompute.GalleryImagesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImagesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json")
}

func (testsuite *FakeTestSuite) TestGalleryImages_ListByGallery() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery images in a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes := armcompute.GalleryImageList{
		Value: []*armcompute.GalleryImage{
			{
				Name:     to.Ptr("myGalleryImageName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryImageProperties{
					HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
					Identifier: &armcompute.GalleryImageIdentifier{
						Offer:     to.Ptr("myOfferName"),
						Publisher: to.Ptr("myPublisherName"),
						SKU:       to.Ptr("mySkuName"),
					},
					OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListByGalleryPager = func(resourceGroupName string, galleryName string, options *armcompute.GalleryImagesClientListByGalleryOptions) (resp azfake.PagerResponder[armcompute.GalleryImagesClientListByGalleryResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.PagerResponder[armcompute.GalleryImagesClientListByGalleryResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryImagesClientListByGalleryResponse{GalleryImageList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryPager(exampleResourceGroupName, exampleGalleryName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryImageList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImageVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using VM as source."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	var exampleGalleryImageVersion armcompute.GalleryImageVersion
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				},
			},
		},
	}

	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using managed image as source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using mix of disks and snapshots as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using shared image as source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using snapshots as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using vhd as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImageVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version (Managed Image as source)."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	var exampleGalleryImageVersion armcompute.GalleryImageVersionUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersionUpdate{
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersionUpdate, options *armcompute.GalleryImageVersionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version without source id."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersionUpdate{
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersionUpdate, options *armcompute.GalleryImageVersionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImageVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with replication status."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					},
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("East US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with snapshots as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source:      &armcompute.GalleryArtifactVersionSource{},
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source:      &armcompute.GalleryArtifactVersionSource{},
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with vhd as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImageVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json")
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_ListByGalleryImage() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryImageVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery image versions in a gallery image definition."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.GalleryImageVersionList{
		Value: []*armcompute.GalleryImageVersion{
			{
				Name:     to.Ptr("1.0.0"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryImageVersionProperties{
					ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
					PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
						PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
						ReplicaCount:       to.Ptr[int32](1),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						TargetRegions: []*armcompute.TargetRegion{
							{
								Name: to.Ptr("West US"),
								Encryption: &armcompute.EncryptionImages{
									DataDiskImages: []*armcompute.DataDiskImageEncryption{
										{
											DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
											Lun:                 to.Ptr[int32](0),
										},
										{
											DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
											Lun:                 to.Ptr[int32](1),
										}},
									OSDiskImage: &armcompute.OSDiskImageEncryption{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									},
								},
								RegionalReplicaCount: to.Ptr[int32](1),
								StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							},
							{
								Name:                 to.Ptr("East US"),
								RegionalReplicaCount: to.Ptr[int32](2),
								StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							}},
					},
					StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
						DataDiskImages: []*armcompute.GalleryDataDiskImage{
							{
								HostCaching: to.Ptr(armcompute.HostCachingNone),
								SizeInGB:    to.Ptr[int32](10),
								Lun:         to.Ptr[int32](1),
							}},
						OSDiskImage: &armcompute.GalleryOSDiskImage{
							HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
							SizeInGB:    to.Ptr[int32](10),
						},
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
						},
					},
				},
			}},
	}

	fakeServer.NewListByGalleryImagePager = func(resourceGroupName string, galleryName string, galleryImageName string, options *armcompute.GalleryImageVersionsClientListByGalleryImageOptions) (resp azfake.PagerResponder[armcompute.GalleryImageVersionsClientListByGalleryImageResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.PagerResponder[armcompute.GalleryImageVersionsClientListByGalleryImageResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryImageVersionsClientListByGalleryImageResponse{GalleryImageVersionList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryImagePager(exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryImageVersionList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGalleryApplications_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplication armcompute.GalleryApplication
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplication = armcompute.GalleryApplication{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplication armcompute.GalleryApplication, options *armcompute.GalleryApplicationsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplication, galleryApplication))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationsClientCreateOrUpdateResponse{GalleryApplication: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplication, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplication))
}

func (testsuite *FakeTestSuite) TestGalleryApplications_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplication armcompute.GalleryApplicationUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplication = armcompute.GalleryApplicationUpdate{
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplication armcompute.GalleryApplicationUpdate, options *armcompute.GalleryApplicationsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplication, galleryApplication))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationsClientUpdateResponse{GalleryApplication: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplication, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplication))
}

func (testsuite *FakeTestSuite) TestGalleryApplications_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"

	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, options *armcompute.GalleryApplicationsClientGetOptions) (resp azfake.Responder[armcompute.GalleryApplicationsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		resp = azfake.Responder[armcompute.GalleryApplicationsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryApplicationsClientGetResponse{GalleryApplication: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplication))
}

func (testsuite *FakeTestSuite) TestGalleryApplications_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, options *armcompute.GalleryApplicationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		resp = azfake.PollerResponder[armcompute.GalleryApplicationsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json")
}

func (testsuite *FakeTestSuite) TestGalleryApplications_ListByGallery() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Applications in a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes := armcompute.GalleryApplicationList{
		Value: []*armcompute.GalleryApplication{
			{
				Name:     to.Ptr("myGalleryApplicationName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryApplicationProperties{
					Description:         to.Ptr("This is the gallery application description."),
					Eula:                to.Ptr("This is the gallery application EULA."),
					PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
					ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
					SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			}},
	}

	fakeServer.NewListByGalleryPager = func(resourceGroupName string, galleryName string, options *armcompute.GalleryApplicationsClientListByGalleryOptions) (resp azfake.PagerResponder[armcompute.GalleryApplicationsClientListByGalleryResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.PagerResponder[armcompute.GalleryApplicationsClientListByGalleryResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryApplicationsClientListByGalleryResponse{GalleryApplicationList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryPager(exampleResourceGroupName, exampleGalleryName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryApplicationList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application Version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	var exampleGalleryApplicationVersion armcompute.GalleryApplicationVersion
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"
	exampleGalleryApplicationVersion = armcompute.GalleryApplicationVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}

	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, galleryApplicationVersion armcompute.GalleryApplicationVersion, options *armcompute.GalleryApplicationVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplicationVersion, galleryApplicationVersion))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, exampleGalleryApplicationVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application Version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	var exampleGalleryApplicationVersion armcompute.GalleryApplicationVersionUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"
	exampleGalleryApplicationVersion = armcompute.GalleryApplicationVersionUpdate{
		Properties: &armcompute.GalleryApplicationVersionProperties{
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}

	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, galleryApplicationVersion armcompute.GalleryApplicationVersionUpdate, options *armcompute.GalleryApplicationVersionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplicationVersion, galleryApplicationVersion))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientUpdateResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, exampleGalleryApplicationVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version with replication status."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"

	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		resp = azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientGetResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, &armcompute.GalleryApplicationVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"

	exampleRes = armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		resp = azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientGetResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, &armcompute.GalleryApplicationVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application Version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		resp = azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json")
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_ListByGalleryApplication() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGalleryApplicationVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Application Versions in a gallery Application Definition."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"

	exampleRes := armcompute.GalleryApplicationVersionList{
		Value: []*armcompute.GalleryApplicationVersion{
			{
				Name:     to.Ptr("1.0.0"),
				Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
				ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryApplicationVersionProperties{
					ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
					PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
						EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
						ExcludeFromLatest:  to.Ptr(false),
						PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
						ReplicaCount:       to.Ptr[int32](1),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						TargetRegions: []*armcompute.TargetRegion{
							{
								Name:                 to.Ptr("West US"),
								RegionalReplicaCount: to.Ptr[int32](1),
								StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							}},
						EnableHealthCheck: to.Ptr(false),
						ManageActions: &armcompute.UserArtifactManage{
							Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
							Remove:  to.Ptr("del C:\\package "),
						},
						Source: &armcompute.UserArtifactSource{
							MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
						},
					},
				},
			}},
	}

	fakeServer.NewListByGalleryApplicationPager = func(resourceGroupName string, galleryName string, galleryApplicationName string, options *armcompute.GalleryApplicationVersionsClientListByGalleryApplicationOptions) (resp azfake.PagerResponder[armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		resp = azfake.PagerResponder[armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse{GalleryApplicationVersionList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryApplicationPager(exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryApplicationVersionList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestGallerySharingProfile_Update() {
	ctx := context.Background()
	fakeServer := fake.GallerySharingProfileServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGallerySharingProfileServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewGallerySharingProfileClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add sharing id to the sharing profile of a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleSharingUpdate armcompute.SharingUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleSharingUpdate = armcompute.SharingUpdate{
		Groups: []*armcompute.SharingProfileGroup{
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
				IDs: []*string{
					to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
					to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
			},
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
				IDs: []*string{
					to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
			}},
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
	}

	exampleRes := armcompute.SharingUpdate{
		Groups: []*armcompute.SharingProfileGroup{
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
				IDs: []*string{
					to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
					to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
			},
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
				IDs: []*string{
					to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
			}},
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate armcompute.SharingUpdate, options *armcompute.GallerySharingProfileClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleSharingUpdate, sharingUpdate))
		resp = azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GallerySharingProfileClientUpdateResponse{SharingUpdate: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleSharingUpdate, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharingUpdate))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"reset sharing profile of a gallery."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleSharingUpdate = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
	}

	exampleRes = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate armcompute.SharingUpdate, options *armcompute.GallerySharingProfileClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleSharingUpdate, sharingUpdate))
		resp = azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GallerySharingProfileClientUpdateResponse{SharingUpdate: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleSharingUpdate, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharingUpdate))
}

func (testsuite *FakeTestSuite) TestSharedGalleries_List() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	var exampleLocation string
	exampleLocation = "myLocation"

	exampleRes := armcompute.SharedGalleryList{
		Value: []*armcompute.SharedGallery{
			{
				Name:     to.Ptr("galleryUniqueName"),
				Location: to.Ptr("myLocation"),
				Identifier: &armcompute.SharedGalleryIdentifier{
					UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
				},
			}},
	}

	fakeServer.NewListPager = func(location string, options *armcompute.SharedGalleriesClientListOptions) (resp azfake.PagerResponder[armcompute.SharedGalleriesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.SharedGalleriesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SharedGalleriesClientListResponse{SharedGalleryList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, &armcompute.SharedGalleriesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SharedGalleryList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSharedGalleries_Get() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleriesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedGalleriesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"

	exampleRes := armcompute.SharedGallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, galleryUniqueName string, options *armcompute.SharedGalleriesClientGetOptions) (resp azfake.Responder[armcompute.SharedGalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		resp = azfake.Responder[armcompute.SharedGalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SharedGalleriesClientGetResponse{SharedGallery: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleGalleryUniqueName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedGallery))
}

func (testsuite *FakeTestSuite) TestSharedGalleryImages_List() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedGalleryImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"

	exampleRes := armcompute.SharedGalleryImageList{
		Value: []*armcompute.SharedGalleryImage{
			{
				Name:     to.Ptr("myGalleryImageName"),
				Location: to.Ptr("myLocation"),
				Identifier: &armcompute.SharedGalleryIdentifier{
					UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
				},
				Properties: &armcompute.SharedGalleryImageProperties{
					HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
					Identifier: &armcompute.GalleryImageIdentifier{
						Offer:     to.Ptr("myOfferName"),
						Publisher: to.Ptr("myPublisherName"),
						SKU:       to.Ptr("mySkuName"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			}},
	}

	fakeServer.NewListPager = func(location string, galleryUniqueName string, options *armcompute.SharedGalleryImagesClientListOptions) (resp azfake.PagerResponder[armcompute.SharedGalleryImagesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		resp = azfake.PagerResponder[armcompute.SharedGalleryImagesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SharedGalleryImagesClientListResponse{SharedGalleryImageList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, exampleGalleryUniqueName, &armcompute.SharedGalleryImagesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SharedGalleryImageList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSharedGalleryImages_Get() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImagesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedGalleryImagesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	var exampleGalleryImageName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.SharedGalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
		},
		Properties: &armcompute.SharedGalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, galleryUniqueName string, galleryImageName string, options *armcompute.SharedGalleryImagesClientGetOptions) (resp azfake.Responder[armcompute.SharedGalleryImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.Responder[armcompute.SharedGalleryImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SharedGalleryImagesClientGetResponse{SharedGalleryImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleGalleryUniqueName, exampleGalleryImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedGalleryImage))
}

func (testsuite *FakeTestSuite) TestSharedGalleryImageVersions_List() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImageVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedGalleryImageVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	var exampleGalleryImageName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.SharedGalleryImageVersionList{
		Value: []*armcompute.SharedGalleryImageVersion{
			{
				Name:     to.Ptr("myGalleryImageVersionName"),
				Location: to.Ptr("myLocation"),
				Identifier: &armcompute.SharedGalleryIdentifier{
					UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
				},
				Properties: &armcompute.SharedGalleryImageVersionProperties{
					EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28.000Z"); return t }()),
					PublishedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28.000Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListPager = func(location string, galleryUniqueName string, galleryImageName string, options *armcompute.SharedGalleryImageVersionsClientListOptions) (resp azfake.PagerResponder[armcompute.SharedGalleryImageVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.PagerResponder[armcompute.SharedGalleryImageVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SharedGalleryImageVersionsClientListResponse{SharedGalleryImageVersionList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, exampleGalleryUniqueName, exampleGalleryImageName, &armcompute.SharedGalleryImageVersionsClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SharedGalleryImageVersionList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSharedGalleryImageVersions_Get() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImageVersionsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedGalleryImageVersionsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "myGalleryImageVersionName"

	exampleRes := armcompute.SharedGalleryImageVersion{
		Name:     to.Ptr("myGalleryImageVersionName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
		},
		Properties: &armcompute.SharedGalleryImageVersionProperties{
			EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28.000Z"); return t }()),
			PublishedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28.000Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, galleryUniqueName string, galleryImageName string, galleryImageVersionName string, options *armcompute.SharedGalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.SharedGalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.SharedGalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SharedGalleryImageVersionsClientGetResponse{SharedGalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleGalleryUniqueName, exampleGalleryImageName, exampleGalleryImageVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedGalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Delete() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRoleInstancesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginDelete = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Get() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRoleInstancesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.RoleInstance{
		Name:     to.Ptr("{roleInstance-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.RoleInstanceProperties{
			NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
				NetworkInterfaces: []*armcompute.SubResource{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}/networkInterfaces/nic1"),
					}},
			},
		},
		SKU: &armcompute.InstanceSKU{
			Name: to.Ptr("Standard_D1_v2"),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientGetResponse{RoleInstance: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServiceRoleInstancesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RoleInstance))
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_GetInstanceView() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRoleInstancesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Instance View of Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.RoleInstanceView{
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		PrivateID:            to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("RoleState/RoleStateStarted"),
				DisplayStatus: to.Ptr("RoleStateStarted"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}

	fakeServer.GetInstanceView = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientGetInstanceViewResponse{RoleInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.GetInstanceView(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RoleInstanceView))
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_List() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRoleInstancesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Role Instances in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.RoleInstanceListResult{
		Value: []*armcompute.RoleInstance{
			{
				Name:     to.Ptr("ContosoFrontend_IN_0"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoFrontend_IN_1"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoBackend_IN_0"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoBackend_IN_1"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientListOptions) (resp azfake.PagerResponder[armcompute.CloudServiceRoleInstancesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PagerResponder[armcompute.CloudServiceRoleInstancesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceRoleInstancesClientListResponse{RoleInstanceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServiceRoleInstancesClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RoleInstanceListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Restart() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRoleInstancesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRestart = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Reimage() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRoleInstancesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginReimage = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Rebuild() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRoleInstancesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRebuild = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginRebuildOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRebuildResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRebuildResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientRebuildResponse{}, nil)
		return
	}
	poller, err := client.BeginRebuild(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_GetRemoteDesktopFile() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoles_Get() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRolesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRolesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRolesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role"},
	})
	var exampleRoleName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleName = "{role-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudServiceRole{
		Name:     to.Ptr("{role-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/{role-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceRoleProperties{
			UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:{role-name}"),
		},
		SKU: &armcompute.CloudServiceRoleSKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, roleName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRolesClientGetOptions) (resp azfake.Responder[armcompute.CloudServiceRolesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleName, roleName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServiceRolesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceRolesClientGetResponse{CloudServiceRole: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleRoleName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudServiceRole))
}

func (testsuite *FakeTestSuite) TestCloudServiceRoles_List() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRolesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRolesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceRolesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Roles in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudServiceRoleListResult{
		Value: []*armcompute.CloudServiceRole{
			{
				Name:     to.Ptr("ContosoFrontend"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoFrontend"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceRoleProperties{
					UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoFrontend"),
				},
				SKU: &armcompute.CloudServiceRoleSKU{
					Name:     to.Ptr("Standard_D1_v2"),
					Capacity: to.Ptr[int64](2),
					Tier:     to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoBackend"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoBackend"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceRoleProperties{
					UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoBackend"),
				},
				SKU: &armcompute.CloudServiceRoleSKU{
					Name:     to.Ptr("Standard_D1_v2"),
					Capacity: to.Ptr[int64](2),
					Tier:     to.Ptr("Standard"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRolesClientListOptions) (resp azfake.PagerResponder[armcompute.CloudServiceRolesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PagerResponder[armcompute.CloudServiceRolesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceRolesClientListResponse{CloudServiceRoleListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleCloudServiceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CloudServiceRoleListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCloudServices_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Multiple Roles"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleParameters armcompute.CloudService
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("7f3edf91-cb34-4a3e-971a-177dc3dd43cb"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role"},
	})
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("myLoadBalancer"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("myfe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
										},
									},
								}},
						},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/5393f919-a68a-43d0-9063-4b2bda6bffdf/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("myLoadBalancer"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("myfe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("14d10b45-ced7-42ef-a406-50a3df2cea7d"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and Certificate from Key Vault"},
	})
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{
					{
						SourceVault: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
						},
						VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
							{
								CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
							}},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{
					{
						SourceVault: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
						},
						VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
							{
								CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
							}},
					}},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("60b6cd59-600b-4e02-b717-521b07aa94bf"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and RDP Extension"},
	})
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProtectedSettings:       to.Ptr("<PrivateConfig><Password>{password}</Password></PrivateConfig>"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							Settings:                to.Ptr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
							TypeHandlerVersion:      to.Ptr("1.2.1"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           to.Ptr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
							TypeHandlerVersion: to.Ptr("1.2.1"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("c948cccb-bbfa-4516-a250-c28abc4d0c15"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))
}

func (testsuite *FakeTestSuite) TestCloudServices_Update() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update existing Cloud Service to add tags"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleParameters armcompute.CloudServiceUpdate
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudServiceUpdate{
		Tags: map[string]*string{
			"Documentation": to.Ptr("RestAPI"),
		},
	}

	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		Tags: map[string]*string{
			"Documentation": to.Ptr("RestAPI"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudServiceUpdate, options *armcompute.CloudServicesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))
}

func (testsuite *FakeTestSuite) TestCloudServices_Delete() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Get() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service with Multiple Roles and RDP Extension"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
							TypeHandlerVersion: to.Ptr("1.2.1"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientGetOptions) (resp azfake.Responder[armcompute.CloudServicesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServicesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServicesClientGetResponse{CloudService: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))
}

func (testsuite *FakeTestSuite) TestCloudServices_GetInstanceView() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Instance View with Multiple Roles"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudServiceInstanceView{
		PrivateIDs: []*string{
			to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e")},
		RoleInstance: &armcompute.InstanceViewStatusesSummary{
			StatusesSummary: []*armcompute.StatusCodeCount{
				{
					Code:  to.Ptr("ProvisioningState/succeeded"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("PowerState/started"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("RoleState/RoleStateStarted"),
					Count: to.Ptr[int32](4),
				}},
		},
		SdkVersion: to.Ptr("2.9.6496.3"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T11:20:07.095Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/started"),
				DisplayStatus: to.Ptr("Started"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T11:20:07.095Z"); return t }()),
			},
			{
				Code:          to.Ptr("CurrentUpgradeDomain/-1"),
				DisplayStatus: to.Ptr("Current Upgrade Domain of cloud service is -1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			},
			{
				Code:          to.Ptr("MaxUpgradeDomain/1"),
				DisplayStatus: to.Ptr("Max Upgrade Domain of cloud service is 1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
	}

	fakeServer.GetInstanceView = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.CloudServicesClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServicesClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServicesClientGetInstanceViewResponse{CloudServiceInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.GetInstanceView(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudServiceInstanceView))
}

func (testsuite *FakeTestSuite) TestCloudServices_ListAll() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Subscription"},
	})

	exampleRes := armcompute.CloudServiceListResult{
		Value: []*armcompute.CloudService{
			{
				Name:     to.Ptr("{cs-name}"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceProperties{
					Configuration: to.Ptr("{ServiceConfiguration}"),
					ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
						Extensions: []*armcompute.Extension{
							{
								Name: to.Ptr("RDPExtension"),
								Properties: &armcompute.CloudServiceExtensionProperties{
									Type:                    to.Ptr("RDP"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									ProvisioningState:       to.Ptr("Succeeded"),
									Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
									RolesAppliedTo: []*string{
										to.Ptr("*")},
									Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
									TypeHandlerVersion: to.Ptr("1.2.1"),
								},
							}},
					},
					NetworkProfile: &armcompute.CloudServiceNetworkProfile{
						LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
							{
								Name: to.Ptr("contosolb"),
								Properties: &armcompute.LoadBalancerConfigurationProperties{
									FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
										{
											Name: to.Ptr("contosofe"),
											Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
												PublicIPAddress: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
												},
											},
										}},
								},
							}},
					},
					OSProfile: &armcompute.CloudServiceOsProfile{
						Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					RoleProfile: &armcompute.CloudServiceRoleProfile{
						Roles: []*armcompute.CloudServiceRoleProfileProperties{
							{
								Name: to.Ptr("ContosoFrontend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							},
							{
								Name: to.Ptr("ContosoBackend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							}},
					},
					UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
					UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
				},
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.CloudServicesClientListAllOptions) (resp azfake.PagerResponder[armcompute.CloudServicesClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.CloudServicesClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServicesClientListAllResponse{CloudServiceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CloudServiceListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCloudServices_List() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Resource Group"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "ConstosoRG"

	exampleRes := armcompute.CloudServiceListResult{
		Value: []*armcompute.CloudService{
			{
				Name:     to.Ptr("{cs-name}"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceProperties{
					Configuration: to.Ptr("{ServiceConfiguration}"),
					ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
						Extensions: []*armcompute.Extension{
							{
								Name: to.Ptr("RDPExtension"),
								Properties: &armcompute.CloudServiceExtensionProperties{
									Type:                    to.Ptr("RDP"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									ProvisioningState:       to.Ptr("Succeeded"),
									Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
									RolesAppliedTo: []*string{
										to.Ptr("*")},
									Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
									TypeHandlerVersion: to.Ptr("1.2.1"),
								},
							}},
					},
					NetworkProfile: &armcompute.CloudServiceNetworkProfile{
						LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
							{
								Name: to.Ptr("contosolb"),
								Properties: &armcompute.LoadBalancerConfigurationProperties{
									FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
										{
											Name: to.Ptr("contosofe"),
											Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
												PublicIPAddress: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
												},
											},
										}},
								},
							}},
					},
					OSProfile: &armcompute.CloudServiceOsProfile{
						Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					RoleProfile: &armcompute.CloudServiceRoleProfile{
						Roles: []*armcompute.CloudServiceRoleProfileProperties{
							{
								Name: to.Ptr("ContosoFrontend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							},
							{
								Name: to.Ptr("ContosoBackend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							}},
					},
					UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
					UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.CloudServicesClientListOptions) (resp azfake.PagerResponder[armcompute.CloudServicesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.CloudServicesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServicesClientListResponse{CloudServiceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CloudServiceListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCloudServices_Start() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientStartResponse{}, nil)
		return
	}
	poller, err := client.BeginStart(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_PowerOff() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop or PowerOff Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientPowerOffResponse{}, nil)
		return
	}
	poller, err := client.BeginPowerOff(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Restart() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instances"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginRestartOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Reimage() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instances"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginReimageOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Rebuild() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instances"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRebuild = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginRebuildOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientRebuildResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientRebuildResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientRebuildResponse{}, nil)
		return
	}
	poller, err := client.BeginRebuild(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginRebuildOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_DeleteInstances() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instances"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginDeleteInstances = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginDeleteInstancesOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientDeleteInstancesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientDeleteInstancesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientDeleteInstancesResponse{}, nil)
		return
	}
	poller, err := client.BeginDeleteInstances(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginDeleteInstancesOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json")
}

func (testsuite *FakeTestSuite) TestCloudServicesUpdateDomain_WalkUpdateDomain() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesUpdateDomainServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesUpdateDomainServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesUpdateDomainClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Cloud Service to specified Domain"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleUpdateDomain int32
	var exampleParameters armcompute.UpdateDomain
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleUpdateDomain = 1
	exampleParameters = armcompute.UpdateDomain{}

	fakeServer.BeginWalkUpdateDomain = func(ctx context.Context, resourceGroupName string, cloudServiceName string, updateDomain int32, parameters armcompute.UpdateDomain, options *armcompute.CloudServicesUpdateDomainClientBeginWalkUpdateDomainOptions) (resp azfake.PollerResponder[armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().Equal(exampleUpdateDomain, updateDomain)
		resp = azfake.PollerResponder[armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse{}, nil)
		return
	}
	poller, err := client.BeginWalkUpdateDomain(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleUpdateDomain, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json")
}

func (testsuite *FakeTestSuite) TestCloudServicesUpdateDomain_GetUpdateDomain() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesUpdateDomainServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesUpdateDomainServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesUpdateDomainClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Update Domain"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleUpdateDomain int32
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleUpdateDomain = 1

	exampleRes := armcompute.UpdateDomain{
		Name: to.Ptr("1"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
	}

	fakeServer.GetUpdateDomain = func(ctx context.Context, resourceGroupName string, cloudServiceName string, updateDomain int32, options *armcompute.CloudServicesUpdateDomainClientGetUpdateDomainOptions) (resp azfake.Responder[armcompute.CloudServicesUpdateDomainClientGetUpdateDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().Equal(exampleUpdateDomain, updateDomain)
		resp = azfake.Responder[armcompute.CloudServicesUpdateDomainClientGetUpdateDomainResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServicesUpdateDomainClientGetUpdateDomainResponse{UpdateDomain: exampleRes}, nil)
		return
	}
	res, err := client.GetUpdateDomain(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleUpdateDomain, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.UpdateDomain))
}

func (testsuite *FakeTestSuite) TestCloudServicesUpdateDomain_ListUpdateDomains() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesUpdateDomainServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesUpdateDomainServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServicesUpdateDomainClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Update Domains in Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.UpdateDomainListResult{
		Value: []*armcompute.UpdateDomain{
			{
				Name: to.Ptr("0"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/0"),
			},
			{
				Name: to.Ptr("1"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
			}},
	}

	fakeServer.NewListUpdateDomainsPager = func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesUpdateDomainClientListUpdateDomainsOptions) (resp azfake.PagerResponder[armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PagerResponder[armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse{UpdateDomainListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListUpdateDomainsPager(exampleResourceGroupName, exampleCloudServiceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.UpdateDomainListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_GetOSVersion() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceOperatingSystemsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Version"},
	})
	var exampleLocation string
	var exampleOsVersionName string
	exampleLocation = "westus2"
	exampleOsVersionName = "WA-GUEST-OS-3.90_202010-02"

	exampleRes := armcompute.OSVersion{
		Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSVersionProperties{
			Family:      to.Ptr("3"),
			FamilyLabel: to.Ptr("Windows Server 2012"),
			IsActive:    to.Ptr(true),
			IsDefault:   to.Ptr(true),
			Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
			Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		},
	}

	fakeServer.GetOSVersion = func(ctx context.Context, location string, osVersionName string, options *armcompute.CloudServiceOperatingSystemsClientGetOSVersionOptions) (resp azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSVersionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleOsVersionName, osVersionName)
		resp = azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSVersionResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientGetOSVersionResponse{OSVersion: exampleRes}, nil)
		return
	}
	res, err := client.GetOSVersion(ctx, exampleLocation, exampleOsVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OSVersion))
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_ListOSVersions() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceOperatingSystemsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Versions in a subscription"},
	})
	var exampleLocation string
	exampleLocation = "westus2"

	exampleRes := armcompute.OSVersionListResult{
		Value: []*armcompute.OSVersion{
			{
				Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSVersionProperties{
					Family:      to.Ptr("3"),
					FamilyLabel: to.Ptr("Windows Server 2012"),
					IsActive:    to.Ptr(true),
					IsDefault:   to.Ptr(true),
					Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
					Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				},
			},
			{
				Name:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-4.83_202010-02"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSVersionProperties{
					Family:      to.Ptr("4"),
					FamilyLabel: to.Ptr("Windows Server 2012 R2"),
					IsActive:    to.Ptr(true),
					IsDefault:   to.Ptr(true),
					Label:       to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
					Version:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
				},
			}},
	}

	fakeServer.NewListOSVersionsPager = func(location string, options *armcompute.CloudServiceOperatingSystemsClientListOSVersionsOptions) (resp azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse{OSVersionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListOSVersionsPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OSVersionListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_GetOSFamily() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceOperatingSystemsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Family"},
	})
	var exampleLocation string
	var exampleOsFamilyName string
	exampleLocation = "westus2"
	exampleOsFamilyName = "3"

	exampleRes := armcompute.OSFamily{
		Name:     to.Ptr("3"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSFamilyProperties{
			Name:  to.Ptr("3"),
			Label: to.Ptr("Windows Server 2012"),
			Versions: []*armcompute.OSVersionPropertiesBase{
				{
					IsActive:  to.Ptr(true),
					IsDefault: to.Ptr(true),
					Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
					Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				}},
		},
	}

	fakeServer.GetOSFamily = func(ctx context.Context, location string, osFamilyName string, options *armcompute.CloudServiceOperatingSystemsClientGetOSFamilyOptions) (resp azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSFamilyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleOsFamilyName, osFamilyName)
		resp = azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSFamilyResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientGetOSFamilyResponse{OSFamily: exampleRes}, nil)
		return
	}
	res, err := client.GetOSFamily(ctx, exampleLocation, exampleOsFamilyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OSFamily))
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_ListOSFamilies() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	clientFactory, err := armcompute.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewCloudServiceOperatingSystemsClient()

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Families in a subscription"},
	})
	var exampleLocation string
	exampleLocation = "westus2"

	exampleRes := armcompute.OSFamilyListResult{
		Value: []*armcompute.OSFamily{
			{
				Name:     to.Ptr("3"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSFamilyProperties{
					Name:  to.Ptr("3"),
					Label: to.Ptr("Windows Server 2012"),
					Versions: []*armcompute.OSVersionPropertiesBase{
						{
							IsActive:  to.Ptr(true),
							IsDefault: to.Ptr(true),
							Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
							Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
						}},
				},
			},
			{
				Name:     to.Ptr("4"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/4"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSFamilyProperties{
					Name:  to.Ptr("4"),
					Label: to.Ptr("Windows Server 2012 R2"),
					Versions: []*armcompute.OSVersionPropertiesBase{
						{
							IsActive:  to.Ptr(true),
							IsDefault: to.Ptr(true),
							Label:     to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
							Version:   to.Ptr("WA-GUEST-OS-4.83_202010-02"),
						}},
				},
			}},
	}

	fakeServer.NewListOSFamiliesPager = func(location string, options *armcompute.CloudServiceOperatingSystemsClientListOSFamiliesOptions) (resp azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse{OSFamilyListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListOSFamiliesPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OSFamilyListResult))
		if err == nil {
			break
		}
	}
}
