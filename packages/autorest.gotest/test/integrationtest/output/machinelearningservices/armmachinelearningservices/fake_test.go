//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/v2/testutil"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices/fake"
	"github.com/stretchr/testify/suite"
)

var err error

type FakeTestSuite struct {
	suite.Suite

	ctx            context.Context
	cred           azcore.TokenCredential
	subscriptionId string
	serverFactory  *fake.ServerFactory
	clientFactory  *armmachinelearningservices.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred = &testutil.FakeCredential{}
	testsuite.subscriptionId = "00000000-0000-0000-0000-000000000000"
	testsuite.serverFactory = &fake.ServerFactory{}
	testsuite.clientFactory, err = armmachinelearningservices.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/operationsList.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})

	exampleRes := armmachinelearningservices.AmlOperations{
		AmlOperations: []*armmachinelearningservices.AmlOperation{
			{
				Name: to.Ptr("Microsoft.MachineLearningServices/workspaces/write"),
				Display: &armmachinelearningservices.AmlOperationDisplay{
					Operation: to.Ptr("Create/Update Machine Learning workspaces"),
					Provider:  to.Ptr("Microsoft MachineLearningServices"),
					Resource:  to.Ptr("workspaces"),
				},
			},
			{
				Name: to.Ptr("Microsoft.MachineLearningServices/workspaces/delete"),
				Display: &armmachinelearningservices.AmlOperationDisplay{
					Operation: to.Ptr("Delete Machine Learning workspaces"),
					Provider:  to.Ptr("Microsoft MachineLearningServices"),
					Resource:  to.Ptr("workspaces"),
				},
			},
			{
				Name: to.Ptr("Microsoft.MachineLearningServices/workspaces/listkeys/action"),
				Display: &armmachinelearningservices.AmlOperationDisplay{
					Operation: to.Ptr("List workspace Keys"),
					Provider:  to.Ptr("Microsoft MachineLearningServices"),
					Resource:  to.Ptr("workspaces"),
				},
			}},
	}

	testsuite.serverFactory.OperationsServer.NewListPager = func(options *armmachinelearningservices.OperationsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armmachinelearningservices.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.OperationsClientListResponse{AmlOperations: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOperationsClient()
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/operationsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AmlOperations))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Workspace"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "workspace-1234"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.Workspace{
		Name: to.Ptr("testworkspace"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Location: to.Ptr("eastus2euap"),
		Properties: &armmachinelearningservices.WorkspaceProperties{
			Description:                     to.Ptr("test description"),
			AllowPublicAccessWhenBehindVnet: to.Ptr(false),
			ApplicationInsights:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
			ContainerRegistry:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
			DiscoveryURL:                    to.Ptr("http://example.com"),
			Encryption: &armmachinelearningservices.EncryptionProperty{
				Identity: &armmachinelearningservices.IdentityForCmk{
					UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
				},
				KeyVaultProperties: &armmachinelearningservices.EncryptionKeyVaultProperties{
					IdentityClientID: to.Ptr(""),
					KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
					KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				},
				Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
			},
			FriendlyName:      to.Ptr("HelloName"),
			HbiWorkspace:      to.Ptr(false),
			ImageBuildCompute: to.Ptr("testcompute"),
			KeyVault:          to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
			PrivateEndpointConnections: []*armmachinelearningservices.PrivateEndpointConnection{
				{
					Name: to.Ptr("testprivatelinkconnection"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/testprivatelinkconnection"),
					Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
			PrivateLinkCount:                to.Ptr[int32](0),
			PublicNetworkAccess:             to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			ServiceProvisionedResourceGroup: to.Ptr("testworkspace_0000111122223333"),
			SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
				{
					Name: to.Ptr("testcosmosdbresource"),
					Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
						GroupID:               to.Ptr("Sql"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testcosmosdbresource/privateLinkResources/Sql"),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
					},
				}},
			StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
		},
	}

	testsuite.serverFactory.WorkspacesServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientGetOptions) (resp azfake.Responder[armmachinelearningservices.WorkspacesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.Responder[armmachinelearningservices.WorkspacesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientGetResponse{Workspace: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Workspace))
}

func (testsuite *FakeTestSuite) TestWorkspaces_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/create.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create Workspace"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleParameters armmachinelearningservices.Workspace
	exampleResourceGroupName = "workspace-1234"
	exampleWorkspaceName = "testworkspace"
	exampleParameters = armmachinelearningservices.Workspace{
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": &armmachinelearningservices.UserAssignedIdentity{},
			},
		},
		Location: to.Ptr("eastus2euap"),
		Properties: &armmachinelearningservices.WorkspaceProperties{
			Description:         to.Ptr("test description"),
			ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
			ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
			Encryption: &armmachinelearningservices.EncryptionProperty{
				Identity: &armmachinelearningservices.IdentityForCmk{
					UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
				},
				KeyVaultProperties: &armmachinelearningservices.EncryptionKeyVaultProperties{
					IdentityClientID: to.Ptr(""),
					KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
					KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				},
				Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
			},
			FriendlyName: to.Ptr("HelloName"),
			HbiWorkspace: to.Ptr(false),
			KeyVault:     to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
			SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
				{
					Name: to.Ptr("testdbresource"),
					Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
						GroupID:               to.Ptr("Sql"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql"),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
					},
				}},
			StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
		},
	}

	exampleRes := armmachinelearningservices.Workspace{
		Name: to.Ptr("testworkspace"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Location: to.Ptr("eastus2euap"),
		Properties: &armmachinelearningservices.WorkspaceProperties{
			Description:                     to.Ptr("test description"),
			AllowPublicAccessWhenBehindVnet: to.Ptr(false),
			ApplicationInsights:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
			ContainerRegistry:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
			DiscoveryURL:                    to.Ptr("http://example.com"),
			Encryption: &armmachinelearningservices.EncryptionProperty{
				Identity: &armmachinelearningservices.IdentityForCmk{
					UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
				},
				KeyVaultProperties: &armmachinelearningservices.EncryptionKeyVaultProperties{
					IdentityClientID: to.Ptr(""),
					KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
					KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				},
				Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
			},
			FriendlyName:        to.Ptr("HelloName"),
			HbiWorkspace:        to.Ptr(false),
			KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
			PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
				{
					Name: to.Ptr("testdbresource"),
					Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
						GroupID:               to.Ptr("Sql"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql"),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
					},
				}},
			StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
		},
	}

	testsuite.serverFactory.WorkspacesServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, parameters armmachinelearningservices.Workspace, options *armmachinelearningservices.WorkspacesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.WorkspacesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.WorkspacesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientCreateOrUpdateResponse{Workspace: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Workspace))
}

func (testsuite *FakeTestSuite) TestWorkspaces_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Workspace"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "workspace-1234"
	exampleWorkspaceName = "testworkspace"

	testsuite.serverFactory.WorkspacesServer.BeginDelete = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearningservices.WorkspacesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PollerResponder[armmachinelearningservices.WorkspacesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/delete.json")
}

func (testsuite *FakeTestSuite) TestWorkspaces_Update() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update Workspace"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleParameters armmachinelearningservices.WorkspaceUpdateParameters
	exampleResourceGroupName = "workspace-1234"
	exampleWorkspaceName = "testworkspace"
	exampleParameters = armmachinelearningservices.WorkspaceUpdateParameters{
		Properties: &armmachinelearningservices.WorkspacePropertiesUpdateParameters{
			Description:         to.Ptr("new description"),
			FriendlyName:        to.Ptr("New friendly name"),
			PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
		},
	}

	exampleRes := armmachinelearningservices.Workspace{
		Name: to.Ptr("testworkspace"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
		},
		Location: to.Ptr("eastus2euap"),
		Properties: &armmachinelearningservices.WorkspaceProperties{
			Description:         to.Ptr("new description"),
			ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
			ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
			DiscoveryURL:        to.Ptr("http://example.com"),
			FriendlyName:        to.Ptr("New friendly name"),
			KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
			PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
		},
	}

	testsuite.serverFactory.WorkspacesServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, parameters armmachinelearningservices.WorkspaceUpdateParameters, options *armmachinelearningservices.WorkspacesClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.WorkspacesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.WorkspacesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientUpdateResponse{Workspace: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Workspace))
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListByResourceGroup() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listByResourceGroup.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Workspaces by Resource Group"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "workspace-1234"

	exampleRes := armmachinelearningservices.WorkspaceListResult{
		Value: []*armmachinelearningservices.Workspace{
			{
				Name:     to.Ptr("testworkspace"),
				Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armmachinelearningservices.WorkspaceProperties{
					Description:         to.Ptr("test description"),
					ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
					ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
					DiscoveryURL:        to.Ptr("http://example.com"),
					FriendlyName:        to.Ptr("HelloName"),
					KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
					StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				},
			},
			{
				Name:     to.Ptr("testworkspace1"),
				Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace1"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armmachinelearningservices.WorkspaceProperties{
					Description:         to.Ptr("test description"),
					ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
					ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistryNew"),
					DiscoveryURL:        to.Ptr("http://example.com"),
					FriendlyName:        to.Ptr("HelloName 1"),
					KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkvNew"),
					StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccountOld"),
				},
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armmachinelearningservices.WorkspacesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armmachinelearningservices.WorkspacesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armmachinelearningservices.WorkspacesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.WorkspacesClientListByResourceGroupResponse{WorkspaceListResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, &armmachinelearningservices.WorkspacesClientListByResourceGroupOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.WorkspaceListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_Diagnose() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/diagnose.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Diagnose Workspace"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "workspace-1234"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.DiagnoseResponseResult{
		Value: &armmachinelearningservices.DiagnoseResponseResultValue{
			ApplicationInsightsResults: []*armmachinelearningservices.DiagnoseResult{},
			ContainerRegistryResults:   []*armmachinelearningservices.DiagnoseResult{},
			DNSResolutionResults: []*armmachinelearningservices.DiagnoseResult{
				{
					Code:    to.Ptr("CustomDNSInUse"),
					Level:   to.Ptr(armmachinelearningservices.DiagnoseResultLevelWarning),
					Message: to.Ptr("We have detected an on-premise dns server is configured. Please make sure conditional forwarding is configured correctly according to doc https://foo"),
				}},
			KeyVaultResults:            []*armmachinelearningservices.DiagnoseResult{},
			NetworkSecurityRuleResults: []*armmachinelearningservices.DiagnoseResult{},
			OtherResults:               []*armmachinelearningservices.DiagnoseResult{},
			ResourceLockResults:        []*armmachinelearningservices.DiagnoseResult{},
			StorageAccountResults:      []*armmachinelearningservices.DiagnoseResult{},
			UserDefinedRouteResults:    []*armmachinelearningservices.DiagnoseResult{},
		},
	}

	testsuite.serverFactory.WorkspacesServer.BeginDiagnose = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientBeginDiagnoseOptions) (resp azfake.PollerResponder[armmachinelearningservices.WorkspacesClientDiagnoseResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PollerResponder[armmachinelearningservices.WorkspacesClientDiagnoseResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientDiagnoseResponse{DiagnoseResponseResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	poller, err := client.BeginDiagnose(ctx, exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.WorkspacesClientBeginDiagnoseOptions{Parameters: &armmachinelearningservices.DiagnoseWorkspaceParameters{
		Value: &armmachinelearningservices.DiagnoseRequestProperties{
			ApplicationInsights: map[string]any{},
			ContainerRegistry:   map[string]any{},
			DNSResolution:       map[string]any{},
			KeyVault:            map[string]any{},
			Nsg:                 map[string]any{},
			Others:              map[string]any{},
			ResourceLock:        map[string]any{},
			StorageAccount:      map[string]any{},
			Udr:                 map[string]any{},
		},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/diagnose.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/diagnose.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiagnoseResponseResult))
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"

	exampleRes := armmachinelearningservices.ListWorkspaceKeysResult{
		ContainerRegistryCredentials: &armmachinelearningservices.RegistryListCredentialsResult{
			Passwords: []*armmachinelearningservices.Password{
				{
					Name:  to.Ptr("password"),
					Value: to.Ptr("<value>"),
				},
				{
					Name:  to.Ptr("password2"),
					Value: to.Ptr("0KARRQoQHSUq1yViPWg7YFernOS=Ic/t"),
				}},
			Username: to.Ptr("testdemoworkjmjmeykp"),
		},
		NotebookAccessKeys:    &armmachinelearningservices.ListNotebookKeysResult{},
		UserStorageResourceID: to.Ptr("/subscriptions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee/resourceGroups/ragargeastus2euap/providers/Microsoft.Storage/storageAccounts/testdemoworkazashomr"),
	}

	testsuite.serverFactory.WorkspacesServer.ListKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientListKeysOptions) (resp azfake.Responder[armmachinelearningservices.WorkspacesClientListKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.Responder[armmachinelearningservices.WorkspacesClientListKeysResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientListKeysResponse{ListWorkspaceKeysResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.ListKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ListWorkspaceKeysResult))
}

func (testsuite *FakeTestSuite) TestWorkspaces_ResyncKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/resyncKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Resync Workspace Keys"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"

	testsuite.serverFactory.WorkspacesServer.BeginResyncKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientBeginResyncKeysOptions) (resp azfake.PollerResponder[armmachinelearningservices.WorkspacesClientResyncKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PollerResponder[armmachinelearningservices.WorkspacesClientResyncKeysResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientResyncKeysResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	poller, err := client.BeginResyncKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/resyncKeys.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/resyncKeys.json")
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListBySubscription() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listBySubscription.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Workspaces by subscription"},
	})

	exampleRes := armmachinelearningservices.WorkspaceListResult{
		Value: []*armmachinelearningservices.Workspace{
			{
				Name:     to.Ptr("testworkspace"),
				Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armmachinelearningservices.WorkspaceProperties{
					Description:         to.Ptr("test description"),
					ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
					ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
					DiscoveryURL:        to.Ptr("http://example.com"),
					FriendlyName:        to.Ptr("HelloName"),
					KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
					StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				},
			},
			{
				Name:     to.Ptr("testworkspace"),
				Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-5678/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armmachinelearningservices.WorkspaceProperties{
					Description:         to.Ptr("test description"),
					ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
					ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistryNew"),
					DiscoveryURL:        to.Ptr("http://example.com"),
					FriendlyName:        to.Ptr("HelloName"),
					KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkvNew"),
					StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccountOld"),
				},
			}},
	}

	testsuite.serverFactory.WorkspacesServer.NewListBySubscriptionPager = func(options *armmachinelearningservices.WorkspacesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armmachinelearningservices.WorkspacesClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armmachinelearningservices.WorkspacesClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.WorkspacesClientListBySubscriptionResponse{WorkspaceListResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	pager := client.NewListBySubscriptionPager(&armmachinelearningservices.WorkspacesClientListBySubscriptionOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.WorkspaceListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListNotebookAccessToken() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listNotebookAccessToken.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "workspace-1234"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.NotebookAccessTokenResult{
		ExpiresIn:          to.Ptr[int32](28800),
		HostName:           to.Ptr("Host product name"),
		NotebookResourceID: to.Ptr("94350843095843059"),
		PublicDNS:          to.Ptr("resource.notebooks.azure.net"),
		Scope:              to.Ptr("aznb_identity"),
		TokenType:          to.Ptr("Bearer"),
	}

	testsuite.serverFactory.WorkspacesServer.ListNotebookAccessToken = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientListNotebookAccessTokenOptions) (resp azfake.Responder[armmachinelearningservices.WorkspacesClientListNotebookAccessTokenResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.Responder[armmachinelearningservices.WorkspacesClientListNotebookAccessTokenResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientListNotebookAccessTokenResponse{NotebookAccessTokenResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.ListNotebookAccessToken(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listNotebookAccessToken.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.NotebookAccessTokenResult))
}

func (testsuite *FakeTestSuite) TestWorkspaces_PrepareNotebook() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/prepare.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Prepare Notebook"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"

	exampleRes := armmachinelearningservices.NotebookResourceInfo{
		Fqdn: to.Ptr("testnotebook.notebooks.azure.com"),
		NotebookPreparationError: &armmachinelearningservices.NotebookPreparationError{
			ErrorMessage: to.Ptr("general error"),
			StatusCode:   to.Ptr[int32](500),
		},
		ResourceID: to.Ptr("aabbccddee112233445566778899"),
	}

	testsuite.serverFactory.WorkspacesServer.BeginPrepareNotebook = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientBeginPrepareNotebookOptions) (resp azfake.PollerResponder[armmachinelearningservices.WorkspacesClientPrepareNotebookResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PollerResponder[armmachinelearningservices.WorkspacesClientPrepareNotebookResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientPrepareNotebookResponse{NotebookResourceInfo: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	poller, err := client.BeginPrepareNotebook(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/prepare.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/prepare.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.NotebookResourceInfo))
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListStorageAccountKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listStorageAccountKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"

	exampleRes := armmachinelearningservices.ListStorageAccountKeysResult{}

	testsuite.serverFactory.WorkspacesServer.ListStorageAccountKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientListStorageAccountKeysOptions) (resp azfake.Responder[armmachinelearningservices.WorkspacesClientListStorageAccountKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.Responder[armmachinelearningservices.WorkspacesClientListStorageAccountKeysResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientListStorageAccountKeysResponse{ListStorageAccountKeysResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.ListStorageAccountKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listStorageAccountKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ListStorageAccountKeysResult))
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListNotebookKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/listKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"

	exampleRes := armmachinelearningservices.ListNotebookKeysResult{}

	testsuite.serverFactory.WorkspacesServer.ListNotebookKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientListNotebookKeysOptions) (resp azfake.Responder[armmachinelearningservices.WorkspacesClientListNotebookKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.Responder[armmachinelearningservices.WorkspacesClientListNotebookKeysResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientListNotebookKeysResponse{ListNotebookKeysResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.ListNotebookKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/listKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ListNotebookKeysResult))
}

func (testsuite *FakeTestSuite) TestWorkspaces_ListOutboundNetworkDependenciesEndpoints() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ExternalFQDN/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ListOutboundNetworkDependenciesEndpoints"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "workspace-1234"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.ExternalFQDNResponse{
		Value: []*armmachinelearningservices.FQDNEndpoints{
			{
				Properties: &armmachinelearningservices.FQDNEndpointsProperties{
					Category: to.Ptr("Azure Active Directory"),
					Endpoints: []*armmachinelearningservices.FQDNEndpoint{
						{
							DomainName: to.Ptr("login.microsoftonline.com"),
							EndpointDetails: []*armmachinelearningservices.FQDNEndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
			},
			{
				Properties: &armmachinelearningservices.FQDNEndpointsProperties{
					Category: to.Ptr("Azure portal"),
					Endpoints: []*armmachinelearningservices.FQDNEndpoint{
						{
							DomainName: to.Ptr("management.azure.com"),
							EndpointDetails: []*armmachinelearningservices.FQDNEndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
			}},
	}

	testsuite.serverFactory.WorkspacesServer.ListOutboundNetworkDependenciesEndpoints = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspacesClientListOutboundNetworkDependenciesEndpointsOptions) (resp azfake.Responder[armmachinelearningservices.WorkspacesClientListOutboundNetworkDependenciesEndpointsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.Responder[armmachinelearningservices.WorkspacesClientListOutboundNetworkDependenciesEndpointsResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspacesClientListOutboundNetworkDependenciesEndpointsResponse{ExternalFQDNResponse: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspacesClient()
	res, err := client.ListOutboundNetworkDependenciesEndpoints(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ExternalFQDN/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ExternalFQDNResponse))
}

func (testsuite *FakeTestSuite) TestUsages_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Usage/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Usages"},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armmachinelearningservices.ListUsagesResult{
		Value: []*armmachinelearningservices.Usage{
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Clusters"),
					Value:          to.Ptr("Clusters"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/totalCores/usages"),
				CurrentValue: to.Ptr[int64](7),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
				Limit:        to.Ptr[int64](100),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Total Cluster Dedicated Regional vCPUs"),
					Value:          to.Ptr("Total Cluster Dedicated Regional vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/dedicatedCores/usages"),
				CurrentValue: to.Ptr[int64](14),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_D_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](48),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](2),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/usages"),
				CurrentValue: to.Ptr[int64](2),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
				CurrentValue: to.Ptr[int64](2),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_dsv2/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster2_dsv2/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](12),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_nc/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluser1_nc/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](0),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](0),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](0),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](0),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
				Limit:        to.Ptr[int64](24),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Total Cluster LowPriority Regional vCPUs"),
					Value:          to.Ptr("Total Cluster LowPriority Regional vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/lowPriorityCores/usages"),
				CurrentValue: to.Ptr[int64](18),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
				Limit:        to.Ptr[int64](50),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard D Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard D Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_D_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_DSv2_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard Dv2 Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard Dv2 Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_Dv2_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard FSv2 Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard FSv2 Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_FSv2_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](18),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
				CurrentValue: to.Ptr[int64](12),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluster2_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
				CurrentValue: to.Ptr[int64](6),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluster3_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NCv2 Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NCv2 Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv2_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NCv3 Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NCv3 Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv3_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard ND Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard ND Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_ND_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NDv2 Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NDv2 Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NDv2_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			},
			{
				Name: &armmachinelearningservices.UsageName{
					LocalizedValue: to.Ptr("Standard NV Family Cluster LowPriority vCPUs"),
					Value:          to.Ptr("Standard NV Family Cluster LowPriority vCPUs"),
				},
				Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NV_Family_Cluster_LowPriority_vCPUs"),
				Limit:        to.Ptr[int64](-1),
				Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
			}},
	}

	testsuite.serverFactory.UsagesServer.NewListPager = func(location string, options *armmachinelearningservices.UsagesClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.UsagesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armmachinelearningservices.UsagesClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.UsagesClientListResponse{ListUsagesResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewUsagesClient()
	pager := client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Usage/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListUsagesResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineSizes_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/VirtualMachineSize/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List VM Sizes"},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armmachinelearningservices.VirtualMachineSizeListResult{
		Value: []*armmachinelearningservices.VirtualMachineSize{
			{
				Name: to.Ptr("Standard_DS1_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.13),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.01),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.07),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.05),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](7168),
				MemoryGB:            to.Ptr[float64](3.5),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](1),
			},
			{
				Name: to.Ptr("Standard_DS2_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.03),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.15),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.1),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.25),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](14336),
				MemoryGB:            to.Ptr[float64](7),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](2),
			},
			{
				Name: to.Ptr("Standard_DS3_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.2),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.06),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.5),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.29),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](28672),
				MemoryGB:            to.Ptr[float64](14),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](4),
			},
			{
				Name: to.Ptr("Standard_DS4_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.12),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.4),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](1.01),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.58),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](57344),
				MemoryGB:            to.Ptr[float64](28),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](8),
			},
			{
				Name: to.Ptr("Standard_DS5_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](1.17),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.81),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](2.02),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.23),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](114688),
				MemoryGB:            to.Ptr[float64](56),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](16),
			},
			{
				Name: to.Ptr("Standard_DS11_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.26),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.18),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.11),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.04),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](28672),
				MemoryGB:            to.Ptr[float64](14),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](2),
			},
			{
				Name: to.Ptr("Standard_DS12_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.37),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.53),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.21),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.07),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](57344),
				MemoryGB:            to.Ptr[float64](28),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](4),
			},
			{
				Name: to.Ptr("Standard_DS13_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.15),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.42),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.74),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](1.06),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](114688),
				MemoryGB:            to.Ptr[float64](56),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](8),
			},
			{
				Name: to.Ptr("Standard_DS14_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.3),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](1.48),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.84),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](2.11),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](229376),
				MemoryGB:            to.Ptr[float64](112),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](16),
			}},
	}

	testsuite.serverFactory.VirtualMachineSizesServer.List = func(ctx context.Context, location string, options *armmachinelearningservices.VirtualMachineSizesClientListOptions) (resp azfake.Responder[armmachinelearningservices.VirtualMachineSizesClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.Responder[armmachinelearningservices.VirtualMachineSizesClientListResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.VirtualMachineSizesClientListResponse{VirtualMachineSizeListResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewVirtualMachineSizesClient()
	res, err := client.List(ctx, exampleLocation, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/VirtualMachineSize/list.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineSizeListResult))
}

func (testsuite *FakeTestSuite) TestQuotas_Update() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"update quotas"},
	})
	var exampleLocation string
	var exampleParameters armmachinelearningservices.QuotaUpdateParameters
	exampleLocation = "eastus"
	exampleParameters = armmachinelearningservices.QuotaUpdateParameters{
		Value: []*armmachinelearningservices.QuotaBaseProperties{
			{
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](100),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](200),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			}},
	}

	exampleRes := armmachinelearningservices.UpdateWorkspaceQuotasResult{
		Value: []*armmachinelearningservices.UpdateWorkspaceQuotas{
			{
				Type:   to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:  to.Ptr[int64](100),
				Status: to.Ptr(armmachinelearningservices.StatusSuccess),
				Unit:   to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Type:   to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:  to.Ptr[int64](200),
				Status: to.Ptr(armmachinelearningservices.StatusSuccess),
				Unit:   to.Ptr(armmachinelearningservices.QuotaUnitCount),
			}},
	}

	testsuite.serverFactory.QuotasServer.Update = func(ctx context.Context, location string, parameters armmachinelearningservices.QuotaUpdateParameters, options *armmachinelearningservices.QuotasClientUpdateOptions) (resp azfake.Responder[armmachinelearningservices.QuotasClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armmachinelearningservices.QuotasClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.QuotasClientUpdateResponse{UpdateWorkspaceQuotasResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewQuotasClient()
	res, err := client.Update(ctx, exampleLocation, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.UpdateWorkspaceQuotasResult))
}

func (testsuite *FakeTestSuite) TestQuotas_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List workspace quotas by VMFamily"},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armmachinelearningservices.ListWorkspaceQuotas{
		Value: []*armmachinelearningservices.ResourceQuota{
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](48),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](12),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](12),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quota"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](12),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](12),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](12),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](0),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Name: &armmachinelearningservices.ResourceName{
					LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
				},
				Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
				Limit: to.Ptr[int64](24),
				Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
			}},
	}

	testsuite.serverFactory.QuotasServer.NewListPager = func(location string, options *armmachinelearningservices.QuotasClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.QuotasClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armmachinelearningservices.QuotasClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.QuotasClientListResponse{ListWorkspaceQuotas: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewQuotasClient()
	pager := client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListWorkspaceQuotas))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCompute_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Computes"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"

	exampleRes := armmachinelearningservices.PaginatedComputeResourcesList{
		Value: []*armmachinelearningservices.ComputeResource{
			{
				Properties: &armmachinelearningservices.AKS{
					Description:       to.Ptr("some compute"),
					ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
					CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
					ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
					ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
					ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
				},
				Name:     to.Ptr("compute123"),
				Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
				ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
				Location: to.Ptr("eastus"),
			},
			{
				Properties: &armmachinelearningservices.AKS{
					Description:       to.Ptr("some compute"),
					ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
					CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
					ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
					ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
					ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute1234-56826-c9b00420020b2"),
				},
				Name:     to.Ptr("compute1234"),
				Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
				ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute1234"),
				Location: to.Ptr("eastus"),
			}},
	}

	testsuite.serverFactory.ComputeServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.ComputeClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.ComputeClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.ComputeClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.ComputeClientListResponse{PaginatedComputeResourcesList: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.ComputeClientListOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PaginatedComputeResourcesList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCompute_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AKSCompute.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a AKS Compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	exampleRes := armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ComputeClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.Responder[armmachinelearningservices.ComputeClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComputeClientGetResponse{ComputeResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AKSCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AmlCompute.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a AML Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Properties: &armmachinelearningservices.AmlComputeProperties{
				AllocationState:               to.Ptr(armmachinelearningservices.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-27T22:28:08.998Z"); return t }()),
				CurrentNodeCount:              to.Ptr[int32](0),
				EnableNodePublicIP:            to.Ptr(true),
				IsolatedNetwork:               to.Ptr(false),
				NodeStateCounts: &armmachinelearningservices.NodeStateCounts{
					IdleNodeCount:      to.Ptr[int32](0),
					LeavingNodeCount:   to.Ptr[int32](0),
					PreemptedNodeCount: to.Ptr[int32](0),
					PreparingNodeCount: to.Ptr[int32](0),
					RunningNodeCount:   to.Ptr[int32](0),
					UnusableNodeCount:  to.Ptr[int32](0),
				},
				OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
				RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessEnabled),
				ScaleSettings: &armmachinelearningservices.ScaleSettings{
					MaxNodeCount:                to.Ptr[int32](1),
					MinNodeCount:                to.Ptr[int32](0),
					NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
				},
				Subnet: &armmachinelearningservices.ResourceID{
					ID: to.Ptr("test-subnet-resource-id"),
				},
				TargetNodeCount: to.Ptr[int32](1),
				VMPriority:      to.Ptr(armmachinelearningservices.VMPriorityDedicated),
				VMSize:          to.Ptr("STANDARD_NC6"),
			},
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}

	testsuite.serverFactory.ComputeServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ComputeClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.Responder[armmachinelearningservices.ComputeClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComputeClientGetResponse{ComputeResource: exampleRes}, nil)
		return
	}

	res, err = client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AmlCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/KubernetesCompute.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get a Kubernetes Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.Kubernetes{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			IsAttachedCompute: to.Ptr(true),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
			Properties: &armmachinelearningservices.KubernetesProperties{
				DefaultInstanceType:           to.Ptr("defaultInstanceType"),
				ExtensionInstanceReleaseTrain: to.Ptr("stable"),
				InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
					"defaultInstanceType": &armmachinelearningservices.InstanceTypeSchema{
						Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
							Limits: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
							Requests: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
						},
					},
				},
				Namespace: to.Ptr("default"),
			},
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ComputeClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.Responder[armmachinelearningservices.ComputeClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComputeClientGetResponse{ComputeResource: exampleRes}, nil)
		return
	}

	res, err = client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/KubernetesCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/ComputeInstance.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get an ComputeInstance"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			Properties: &armmachinelearningservices.ComputeInstanceProperties{
				ApplicationSharingPolicy: to.Ptr(armmachinelearningservices.ApplicationSharingPolicyShared),
				Applications: []*armmachinelearningservices.ComputeInstanceApplication{
					{
						DisplayName: to.Ptr("Jupyter"),
						EndpointURI: to.Ptr("https://compute123.eastus2.azureml.net/jupyter"),
					}},
				ComputeInstanceAuthorizationType: to.Ptr(armmachinelearningservices.ComputeInstanceAuthorizationTypePersonal),
				ConnectivityEndpoints: &armmachinelearningservices.ComputeInstanceConnectivityEndpoints{
					PrivateIPAddress: to.Ptr("10.0.0.1"),
					PublicIPAddress:  to.Ptr("10.0.0.1"),
				},
				CreatedBy: &armmachinelearningservices.ComputeInstanceCreatedBy{
					UserID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					UserName:  to.Ptr("foobar@microsoft.com"),
					UserOrgID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				},
				PersonalComputeInstanceSettings: &armmachinelearningservices.PersonalComputeInstanceSettings{
					AssignedUser: &armmachinelearningservices.AssignedUser{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				SSHSettings: &armmachinelearningservices.ComputeInstanceSSHSettings{
					AdminUserName:   to.Ptr("azureuser"),
					SSHPort:         to.Ptr[int32](22),
					SSHPublicAccess: to.Ptr(armmachinelearningservices.SSHPublicAccessEnabled),
				},
				State: to.Ptr(armmachinelearningservices.ComputeInstanceStateRunning),
				Subnet: &armmachinelearningservices.ResourceID{
					ID: to.Ptr("test-subnet-resource-id"),
				},
				VMSize: to.Ptr("STANDARD_NC6"),
			},
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}

	testsuite.serverFactory.ComputeServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ComputeClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.Responder[armmachinelearningservices.ComputeClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComputeClientGetResponse{ComputeResource: exampleRes}, nil)
		return
	}

	res, err = client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/ComputeInstance.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))
}

func (testsuite *FakeTestSuite) TestCompute_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/KubernetesCompute.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Attach a Kubernetes Compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	var exampleParameters armmachinelearningservices.ComputeResource
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.Kubernetes{
			Description: to.Ptr("some compute"),
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
			ResourceID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
			Properties: &armmachinelearningservices.KubernetesProperties{
				DefaultInstanceType: to.Ptr("defaultInstanceType"),
				InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
					"defaultInstanceType": &armmachinelearningservices.InstanceTypeSchema{
						Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
							Limits: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
							Requests: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
						},
					},
				},
				Namespace: to.Ptr("default"),
			},
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes := armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.Kubernetes{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
			Properties: &armmachinelearningservices.KubernetesProperties{
				DefaultInstanceType:           to.Ptr("defaultInstanceType"),
				ExtensionInstanceReleaseTrain: to.Ptr("stable"),
				InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
					"defaultInstanceType": &armmachinelearningservices.InstanceTypeSchema{
						Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
							Limits: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
							Requests: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
						},
					},
				},
				Namespace: to.Ptr("default"),
			},
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/KubernetesCompute.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/KubernetesCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAmlCompute.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a AML Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Properties: &armmachinelearningservices.AmlComputeProperties{
				EnableNodePublicIP:          to.Ptr(true),
				IsolatedNetwork:             to.Ptr(false),
				OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
				RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessNotSpecified),
				ScaleSettings: &armmachinelearningservices.ScaleSettings{
					MaxNodeCount:                to.Ptr[int32](1),
					MinNodeCount:                to.Ptr[int32](0),
					NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
				},
				VirtualMachineImage: &armmachinelearningservices.VirtualMachineImage{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1"),
				},
				VMPriority: to.Ptr(armmachinelearningservices.VMPriorityDedicated),
				VMSize:     to.Ptr("STANDARD_NC6"),
			},
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAmlCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAmlCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create a DataFactory Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.DataFactory{
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeDataFactory),
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.DataFactory{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeDataFactory),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAKSCompute.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an AKS Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAKS),
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAKSCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAKSCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstance.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an ComputeInstance Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			Properties: &armmachinelearningservices.ComputeInstanceProperties{
				ApplicationSharingPolicy:         to.Ptr(armmachinelearningservices.ApplicationSharingPolicyPersonal),
				ComputeInstanceAuthorizationType: to.Ptr(armmachinelearningservices.ComputeInstanceAuthorizationTypePersonal),
				PersonalComputeInstanceSettings: &armmachinelearningservices.PersonalComputeInstanceSettings{
					AssignedUser: &armmachinelearningservices.AssignedUser{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				SSHSettings: &armmachinelearningservices.ComputeInstanceSSHSettings{
					SSHPublicAccess: to.Ptr(armmachinelearningservices.SSHPublicAccessDisabled),
				},
				Subnet: &armmachinelearningservices.ResourceID{
					ID: to.Ptr("test-subnet-resource-id"),
				},
				VMSize: to.Ptr("STANDARD_NC6"),
			},
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstance.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstance.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Create an ComputeInstance Compute with minimal inputs"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			Properties: &armmachinelearningservices.ComputeInstanceProperties{
				VMSize: to.Ptr("STANDARD_NC6"),
			},
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AmlCompute.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a AML Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Properties: &armmachinelearningservices.AmlComputeProperties{
				ScaleSettings: &armmachinelearningservices.ScaleSettings{
					MaxNodeCount:                to.Ptr[int32](4),
					MinNodeCount:                to.Ptr[int32](4),
					NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
				},
			},
			Description: to.Ptr("some compute"),
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Properties: &armmachinelearningservices.AmlComputeProperties{
				AllocationState:               to.Ptr(armmachinelearningservices.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-27T22:28:08.998Z"); return t }()),
				CurrentNodeCount:              to.Ptr[int32](0),
				EnableNodePublicIP:            to.Ptr(true),
				IsolatedNetwork:               to.Ptr(false),
				NodeStateCounts: &armmachinelearningservices.NodeStateCounts{
					IdleNodeCount:      to.Ptr[int32](0),
					LeavingNodeCount:   to.Ptr[int32](0),
					PreemptedNodeCount: to.Ptr[int32](0),
					PreparingNodeCount: to.Ptr[int32](0),
					RunningNodeCount:   to.Ptr[int32](0),
					UnusableNodeCount:  to.Ptr[int32](0),
				},
				OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
				RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessEnabled),
				ScaleSettings: &armmachinelearningservices.ScaleSettings{
					MaxNodeCount:                to.Ptr[int32](1),
					MinNodeCount:                to.Ptr[int32](0),
					NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
				},
				Subnet: &armmachinelearningservices.ResourceID{
					ID: to.Ptr("test-subnet-resource-id"),
				},
				TargetNodeCount: to.Ptr[int32](1),
				VMPriority:      to.Ptr(armmachinelearningservices.VMPriorityDedicated),
				VMSize:          to.Ptr("STANDARD_NC6"),
			},
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.000Z"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AmlCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AmlCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AKSCompute.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update an AKS Compute"},
	})
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			Properties: &armmachinelearningservices.AKSSchemaProperties{
				AgentCount: to.Ptr[int32](4),
			},
			Description: to.Ptr("some compute"),
			ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			ResourceID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
		},
		Location: to.Ptr("eastus"),
	}

	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			Properties: &armmachinelearningservices.AKSSchemaProperties{
				AgentCount: to.Ptr[int32](4),
			},
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}

	testsuite.serverFactory.ComputeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ComputeResource, options *armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientCreateOrUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AKSCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AKSCompute.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))
}

func (testsuite *FakeTestSuite) TestCompute_Update() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/patch.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update a AmlCompute Compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	var exampleParameters armmachinelearningservices.ClusterUpdateParameters
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleParameters = armmachinelearningservices.ClusterUpdateParameters{
		Properties: &armmachinelearningservices.ClusterUpdateProperties{
			Properties: &armmachinelearningservices.ScaleSettingsInformation{
				ScaleSettings: &armmachinelearningservices.ScaleSettings{
					MaxNodeCount:                to.Ptr[int32](4),
					MinNodeCount:                to.Ptr[int32](4),
					NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
				},
			},
		},
	}

	exampleRes := armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}

	testsuite.serverFactory.ComputeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, parameters armmachinelearningservices.ClusterUpdateParameters, options *armmachinelearningservices.ComputeClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientUpdateResponse{ComputeResource: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/patch.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/patch.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComputeResource))
}

func (testsuite *FakeTestSuite) TestCompute_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	var exampleUnderlyingResourceAction armmachinelearningservices.UnderlyingResourceAction
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"
	exampleUnderlyingResourceAction = armmachinelearningservices.UnderlyingResourceActionDelete

	testsuite.serverFactory.ComputeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, underlyingResourceAction armmachinelearningservices.UnderlyingResourceAction, options *armmachinelearningservices.ComputeClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		testsuite.Require().Equal(exampleUnderlyingResourceAction, underlyingResourceAction)
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.ComputeClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, exampleUnderlyingResourceAction, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/delete.json")
}

func (testsuite *FakeTestSuite) TestCompute_ListNodes() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listNodes.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get compute nodes information for a compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	exampleRes := armmachinelearningservices.AmlComputeNodesInformation{
		Nodes: []*armmachinelearningservices.AmlComputeNodeInformation{
			{
				NodeID:           to.Ptr("tvm-3601533753_1-20170719t162906z"),
				NodeState:        to.Ptr(armmachinelearningservices.NodeStateRunning),
				Port:             to.Ptr[int32](50000),
				PrivateIPAddress: to.Ptr("13.84.190.124"),
				PublicIPAddress:  to.Ptr("13.84.190.134"),
				RunID:            to.Ptr("2f378a44-38f2-443a-9f0d-9909d0b47890"),
			},
			{
				NodeID:           to.Ptr("tvm-3601533753_2-20170719t162906z"),
				NodeState:        to.Ptr(armmachinelearningservices.NodeStateIdle),
				Port:             to.Ptr[int32](50001),
				PrivateIPAddress: to.Ptr("13.84.190.124"),
				PublicIPAddress:  to.Ptr("13.84.190.134"),
			}},
	}

	testsuite.serverFactory.ComputeServer.NewListNodesPager = func(resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientListNodesOptions) (resp azfake.PagerResponder[armmachinelearningservices.ComputeClientListNodesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.PagerResponder[armmachinelearningservices.ComputeClientListNodesResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.ComputeClientListNodesResponse{AmlComputeNodesInformation: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	pager := client.NewListNodesPager(exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listNodes.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AmlComputeNodesInformation))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCompute_ListKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List AKS Compute Keys"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	exampleRes := armmachinelearningservices.ComputeClientListKeysResponse{
		ComputeSecretsClassification: &armmachinelearningservices.AksComputeSecrets{
			AdminKubeConfig:     to.Ptr("admin kube config..."),
			ImagePullSecretName: to.Ptr("the image pull secret name"),
			UserKubeConfig:      to.Ptr("user kube config..."),
			ComputeType:         to.Ptr(armmachinelearningservices.ComputeTypeAKS),
		},
	}

	testsuite.serverFactory.ComputeServer.ListKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientListKeysOptions) (resp azfake.Responder[armmachinelearningservices.ComputeClientListKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.Responder[armmachinelearningservices.ComputeClientListKeysResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	res, err := client.ListKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestCompute_Start() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/start.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Start ComputeInstance Compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	testsuite.serverFactory.ComputeServer.BeginStart = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientBeginStartOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armmachinelearningservices.ComputeClientStartResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	poller, err := client.BeginStart(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/start.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/start.json")
}

func (testsuite *FakeTestSuite) TestCompute_Stop() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/stop.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Stop ComputeInstance Compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	testsuite.serverFactory.ComputeServer.BeginStop = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientBeginStopOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientStopResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientStopResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armmachinelearningservices.ComputeClientStopResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	poller, err := client.BeginStop(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/stop.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/stop.json")
}

func (testsuite *FakeTestSuite) TestCompute_Restart() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/restart.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Restart ComputeInstance Compute"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleComputeName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspaces123"
	exampleComputeName = "compute123"

	testsuite.serverFactory.ComputeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, workspaceName string, computeName string, options *armmachinelearningservices.ComputeClientBeginRestartOptions) (resp azfake.PollerResponder[armmachinelearningservices.ComputeClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleComputeName, computeName)
		resp = azfake.PollerResponder[armmachinelearningservices.ComputeClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armmachinelearningservices.ComputeClientRestartResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewComputeClient()
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleComputeName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/restart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/restart.json")
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"StorageAccountListPrivateEndpointConnections"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "rg-1234"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.PrivateEndpointConnectionListResult{
		Value: []*armmachinelearningservices.PrivateEndpointConnection{
			{
				Name: to.Ptr("{privateEndpointConnectionName}"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
				Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
					},
					PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Auto-Approved"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
				},
			},
			{
				Name: to.Ptr("{privateEndpointConnectionName}"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
				Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
					},
					PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Auto-Approved"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
				},
			}},
	}

	testsuite.serverFactory.PrivateEndpointConnectionsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.PrivateEndpointConnectionsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.PrivateEndpointConnectionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.PrivateEndpointConnectionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.PrivateEndpointConnectionsClientListResponse{PrivateEndpointConnectionListResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewPrivateEndpointConnectionsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateEndpointConnectionListResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"WorkspaceGetPrivateEndpointConnection"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "rg-1234"
	exampleWorkspaceName = "testworkspace"
	examplePrivateEndpointConnectionName = "{privateEndpointConnectionName}"

	exampleRes := armmachinelearningservices.PrivateEndpointConnection{
		Name: to.Ptr("{privateEndpointConnectionName}"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
		Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
			},
			PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	testsuite.serverFactory.PrivateEndpointConnectionsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, privateEndpointConnectionName string, options *armmachinelearningservices.PrivateEndpointConnectionsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.PrivateEndpointConnectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.Responder[armmachinelearningservices.PrivateEndpointConnectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.PrivateEndpointConnectionsClientGetResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewPrivateEndpointConnectionsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"WorkspacePutPrivateEndpointConnection"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var examplePrivateEndpointConnectionName string
	var exampleProperties armmachinelearningservices.PrivateEndpointConnection
	exampleResourceGroupName = "rg-1234"
	exampleWorkspaceName = "testworkspace"
	examplePrivateEndpointConnectionName = "{privateEndpointConnectionName}"
	exampleProperties = armmachinelearningservices.PrivateEndpointConnection{
		Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Auto-Approved"),
				Status:      to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
			},
		},
	}

	exampleRes := armmachinelearningservices.PrivateEndpointConnection{
		Name: to.Ptr("{privateEndpointConnectionName}"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
		Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
			},
			PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	testsuite.serverFactory.PrivateEndpointConnectionsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, privateEndpointConnectionName string, properties armmachinelearningservices.PrivateEndpointConnection, options *armmachinelearningservices.PrivateEndpointConnectionsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.PrivateEndpointConnectionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleProperties, properties))
		resp = azfake.Responder[armmachinelearningservices.PrivateEndpointConnectionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.PrivateEndpointConnectionsClientCreateOrUpdateResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewPrivateEndpointConnectionsClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, examplePrivateEndpointConnectionName, exampleProperties, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"WorkspaceDeletePrivateEndpointConnection"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "rg-1234"
	exampleWorkspaceName = "testworkspace"
	examplePrivateEndpointConnectionName = "{privateEndpointConnectionName}"

	testsuite.serverFactory.PrivateEndpointConnectionsServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, privateEndpointConnectionName string, options *armmachinelearningservices.PrivateEndpointConnectionsClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.PrivateEndpointConnectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.Responder[armmachinelearningservices.PrivateEndpointConnectionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.PrivateEndpointConnectionsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewPrivateEndpointConnectionsClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/delete.json")
}

func (testsuite *FakeTestSuite) TestPrivateLinkResources_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateLinkResource/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"WorkspaceListPrivateLinkResources"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "rg-1234"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.PrivateLinkResourceListResult{
		Value: []*armmachinelearningservices.PrivateLinkResource{
			{
				Name: to.Ptr("amlworkspace"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateLinkResources"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateLinkResources/amlworkspace"),
				Properties: &armmachinelearningservices.PrivateLinkResourceProperties{
					GroupID: to.Ptr("amlworkspace"),
					RequiredMembers: []*string{
						to.Ptr("default")},
				},
			}},
	}

	testsuite.serverFactory.PrivateLinkResourcesServer.List = func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearningservices.PrivateLinkResourcesClientListOptions) (resp azfake.Responder[armmachinelearningservices.PrivateLinkResourcesClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.Responder[armmachinelearningservices.PrivateLinkResourcesClientListResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.PrivateLinkResourcesClientListResponse{PrivateLinkResourceListResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewPrivateLinkResourcesClient()
	res, err := client.List(ctx, exampleResourceGroupName, exampleWorkspaceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateLinkResource/list.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult))
}

func (testsuite *FakeTestSuite) TestWorkspaceConnections_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ListWorkspaceConnections"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "resourceGroup-1"
	exampleWorkspaceName = "workspace-1"

	exampleRes := armmachinelearningservices.PaginatedWorkspaceConnectionsList{
		Value: []*armmachinelearningservices.WorkspaceConnection{
			{
				Name: to.Ptr("connection-1"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/linkedWorkspaces/connection-1"),
				Properties: &armmachinelearningservices.WorkspaceConnectionProps{
					AuthType: to.Ptr("PAT"),
					Category: to.Ptr("ACR"),
					Target:   to.Ptr("www.facebook.com"),
					Value:    to.Ptr("secrets"),
				},
			},
			{
				Name: to.Ptr("connection-2"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/linkedWorkspaces/connection-2"),
				Properties: &armmachinelearningservices.WorkspaceConnectionProps{
					AuthType: to.Ptr("PAT"),
					Category: to.Ptr("ACR"),
					Target:   to.Ptr("www.facebook.com"),
					Value:    to.Ptr("secrets"),
				},
			}},
	}

	testsuite.serverFactory.WorkspaceConnectionsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspaceConnectionsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.WorkspaceConnectionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.WorkspaceConnectionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.WorkspaceConnectionsClientListResponse{PaginatedWorkspaceConnectionsList: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspaceConnectionsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.WorkspaceConnectionsClientListOptions{Target: to.Ptr("www.facebook.com"),
		Category: to.Ptr("ACR"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PaginatedWorkspaceConnectionsList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestWorkspaceConnections_Create() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/create.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateWorkspaceConnection"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleConnectionName string
	var exampleParameters armmachinelearningservices.WorkspaceConnection
	exampleResourceGroupName = "resourceGroup-1"
	exampleWorkspaceName = "workspace-1"
	exampleConnectionName = "connection-1"
	exampleParameters = armmachinelearningservices.WorkspaceConnection{
		Properties: &armmachinelearningservices.WorkspaceConnectionProps{
			AuthType: to.Ptr("PAT"),
			Category: to.Ptr("ACR"),
			Target:   to.Ptr("www.facebook.com"),
			Value:    to.Ptr("secrets"),
		},
	}

	exampleRes := armmachinelearningservices.WorkspaceConnection{
		Name: to.Ptr("connection-1"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/connections/connection-1"),
		Properties: &armmachinelearningservices.WorkspaceConnectionProps{
			AuthType: to.Ptr("PAT"),
			Category: to.Ptr("ACR"),
			Target:   to.Ptr("www.facebook.com"),
			Value:    to.Ptr("secrets"),
		},
	}

	testsuite.serverFactory.WorkspaceConnectionsServer.Create = func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, parameters armmachinelearningservices.WorkspaceConnection, options *armmachinelearningservices.WorkspaceConnectionsClientCreateOptions) (resp azfake.Responder[armmachinelearningservices.WorkspaceConnectionsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleConnectionName, connectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armmachinelearningservices.WorkspaceConnectionsClientCreateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspaceConnectionsClientCreateResponse{WorkspaceConnection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspaceConnectionsClient()
	res, err := client.Create(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleConnectionName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WorkspaceConnection))
}

func (testsuite *FakeTestSuite) TestWorkspaceConnections_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"GetWorkspaceConnection"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleConnectionName string
	exampleResourceGroupName = "resourceGroup-1"
	exampleWorkspaceName = "workspace-1"
	exampleConnectionName = "connection-1"

	exampleRes := armmachinelearningservices.WorkspaceConnection{
		Name: to.Ptr("connection-1"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/connections/connection-1"),
		Properties: &armmachinelearningservices.WorkspaceConnectionProps{
			AuthType: to.Ptr("PAT"),
			Category: to.Ptr("ACR"),
			Target:   to.Ptr("www.facebook.com"),
			Value:    to.Ptr("secrets"),
		},
	}

	testsuite.serverFactory.WorkspaceConnectionsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, options *armmachinelearningservices.WorkspaceConnectionsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.WorkspaceConnectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleConnectionName, connectionName)
		resp = azfake.Responder[armmachinelearningservices.WorkspaceConnectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspaceConnectionsClientGetResponse{WorkspaceConnection: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspaceConnectionsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.WorkspaceConnection))
}

func (testsuite *FakeTestSuite) TestWorkspaceConnections_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"DeleteWorkspaceConnection"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleConnectionName string
	exampleResourceGroupName = "resourceGroup-1"
	exampleWorkspaceName = "workspace-1"
	exampleConnectionName = "connection-1"

	testsuite.serverFactory.WorkspaceConnectionsServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, options *armmachinelearningservices.WorkspaceConnectionsClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.WorkspaceConnectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleConnectionName, connectionName)
		resp = azfake.Responder[armmachinelearningservices.WorkspaceConnectionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.WorkspaceConnectionsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspaceConnectionsClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/delete.json")
}

func (testsuite *FakeTestSuite) TestBatchEndpoints_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Batch Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes := armmachinelearningservices.BatchEndpointTrackedResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.BatchEndpointData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Location: to.Ptr("string"),
				Tags:     map[string]*string{},
				Identity: &armmachinelearningservices.ManagedServiceIdentity{
					Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
					TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
						"string": &armmachinelearningservices.UserAssignedIdentity{
							ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
							PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
					},
				},
				Kind: to.Ptr("string"),
				Properties: &armmachinelearningservices.BatchEndpointDetails{
					Description: to.Ptr("string"),
					AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					ScoringURI: to.Ptr("https://www.contoso.com/example"),
					SwaggerURI: to.Ptr("https://www.contoso.com/example"),
					Defaults: &armmachinelearningservices.BatchEndpointDefaults{
						DeploymentName: to.Ptr("string"),
					},
				},
				SKU: &armmachinelearningservices.SKU{
					Name:     to.Ptr("string"),
					Capacity: to.Ptr[int32](1),
					Family:   to.Ptr("string"),
					Size:     to.Ptr("string"),
					Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
				},
			}},
	}

	testsuite.serverFactory.BatchEndpointsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.BatchEndpointsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.BatchEndpointsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.BatchEndpointsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.BatchEndpointsClientListResponse{BatchEndpointTrackedResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchEndpointsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.BatchEndpointsClientListOptions{Count: to.Ptr[int32](1),
		Skip: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.BatchEndpointTrackedResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestBatchEndpoints_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Batch Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "resourceGroup-1234"
	exampleWorkspaceName = "testworkspace"
	exampleEndpointName = "testBatchEndpoint"

	testsuite.serverFactory.BatchEndpointsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.BatchEndpointsClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearningservices.BatchEndpointsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.PollerResponder[armmachinelearningservices.BatchEndpointsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.BatchEndpointsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchEndpointsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/delete.json")
}

func (testsuite *FakeTestSuite) TestBatchEndpoints_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Batch Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	exampleRes := armmachinelearningservices.BatchEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI: to.Ptr("https://www.contoso.com/example"),
			SwaggerURI: to.Ptr("https://www.contoso.com/example"),
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.BatchEndpointsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.BatchEndpointsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.BatchEndpointsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.Responder[armmachinelearningservices.BatchEndpointsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.BatchEndpointsClientGetResponse{BatchEndpointData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchEndpointsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BatchEndpointData))
}

func (testsuite *FakeTestSuite) TestBatchEndpoints_Update() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update Batch Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleBody armmachinelearningservices.PartialBatchEndpointPartialTrackedResource
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleBody = armmachinelearningservices.PartialBatchEndpointPartialTrackedResource{
		Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]any{
				"string": map[string]any{},
			},
		},
		Kind:     to.Ptr("string"),
		Location: to.Ptr("string"),
		Properties: &armmachinelearningservices.PartialBatchEndpoint{
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
		},
		SKU: &armmachinelearningservices.PartialSKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
		Tags: map[string]*string{},
	}

	exampleRes := armmachinelearningservices.BatchEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI: to.Ptr("https://www.contoso.com/example"),
			SwaggerURI: to.Ptr("https://www.contoso.com/example"),
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.BatchEndpointsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, body armmachinelearningservices.PartialBatchEndpointPartialTrackedResource, options *armmachinelearningservices.BatchEndpointsClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.BatchEndpointsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.BatchEndpointsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.BatchEndpointsClientUpdateResponse{BatchEndpointData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchEndpointsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BatchEndpointData))
}

func (testsuite *FakeTestSuite) TestBatchEndpoints_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Batch Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleBody armmachinelearningservices.BatchEndpointData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleBody = armmachinelearningservices.BatchEndpointData{
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	exampleRes := armmachinelearningservices.BatchEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI: to.Ptr("https://www.contoso.com/example"),
			SwaggerURI: to.Ptr("https://www.contoso.com/example"),
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.BatchEndpointsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, body armmachinelearningservices.BatchEndpointData, options *armmachinelearningservices.BatchEndpointsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.BatchEndpointsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.BatchEndpointsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.BatchEndpointsClientCreateOrUpdateResponse{BatchEndpointData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchEndpointsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BatchEndpointData))
}

func (testsuite *FakeTestSuite) TestBatchEndpoints_ListKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/listKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ListKeys Batch Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	exampleRes := armmachinelearningservices.EndpointAuthKeys{
		PrimaryKey:   to.Ptr("string"),
		SecondaryKey: to.Ptr("string"),
	}

	testsuite.serverFactory.BatchEndpointsServer.ListKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.BatchEndpointsClientListKeysOptions) (resp azfake.Responder[armmachinelearningservices.BatchEndpointsClientListKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.Responder[armmachinelearningservices.BatchEndpointsClientListKeysResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.BatchEndpointsClientListKeysResponse{EndpointAuthKeys: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchEndpointsClient()
	res, err := client.ListKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/listKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EndpointAuthKeys))
}

func (testsuite *FakeTestSuite) TestBatchDeployments_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Batch Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	exampleRes := armmachinelearningservices.BatchDeploymentTrackedResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.BatchDeploymentData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Location: to.Ptr("string"),
				Tags:     map[string]*string{},
				Identity: &armmachinelearningservices.ManagedServiceIdentity{
					Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
					TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
						"string": &armmachinelearningservices.UserAssignedIdentity{
							ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
							PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
					},
				},
				Kind: to.Ptr("string"),
				Properties: &armmachinelearningservices.BatchDeploymentDetails{
					Description: to.Ptr("string"),
					CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
						CodeID:        to.Ptr("string"),
						ScoringScript: to.Ptr("string"),
					},
					EnvironmentID: to.Ptr("string"),
					EnvironmentVariables: map[string]*string{
						"string": to.Ptr("string"),
					},
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Compute:                   to.Ptr("string"),
					ErrorThreshold:            to.Ptr[int32](1),
					LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
					MaxConcurrencyPerInstance: to.Ptr[int32](1),
					MiniBatchSize:             to.Ptr[int64](1),
					Model: &armmachinelearningservices.IDAssetReference{
						ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
						AssetID:       to.Ptr("string"),
					},
					OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
					OutputFileName:    to.Ptr("string"),
					ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
					Resources: &armmachinelearningservices.ResourceConfiguration{
						InstanceCount: to.Ptr[int32](1),
						InstanceType:  to.Ptr("string"),
						Properties: map[string]any{
							"string": map[string]any{
								"a3c13e2e-a213-4cac-9f5a-b49966906ad6": nil,
							},
						},
					},
					RetrySettings: &armmachinelearningservices.BatchRetrySettings{
						MaxRetries: to.Ptr[int32](1),
						Timeout:    to.Ptr("PT5M"),
					},
				},
				SKU: &armmachinelearningservices.SKU{
					Name:     to.Ptr("string"),
					Capacity: to.Ptr[int32](1),
					Family:   to.Ptr("string"),
					Size:     to.Ptr("string"),
					Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
				},
			}},
	}

	testsuite.serverFactory.BatchDeploymentsServer.NewListPager = func(resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.BatchDeploymentsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.BatchDeploymentsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.PagerResponder[armmachinelearningservices.BatchDeploymentsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.BatchDeploymentsClientListResponse{BatchDeploymentTrackedResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchDeploymentsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, &armmachinelearningservices.BatchDeploymentsClientListOptions{OrderBy: to.Ptr("string"),
		Top:  to.Ptr[int32](1),
		Skip: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.BatchDeploymentTrackedResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestBatchDeployments_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Batch Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"

	testsuite.serverFactory.BatchDeploymentsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, options *armmachinelearningservices.BatchDeploymentsClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearningservices.BatchDeploymentsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.PollerResponder[armmachinelearningservices.BatchDeploymentsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.BatchDeploymentsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchDeploymentsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/delete.json")
}

func (testsuite *FakeTestSuite) TestBatchDeployments_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Batch Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"

	exampleRes := armmachinelearningservices.BatchDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchDeploymentDetails{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute:                   to.Ptr("string"),
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.IDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"843c2bb4-e5f1-4267-98c8-ba22a99dbb00": nil,
					},
				},
			},
			RetrySettings: &armmachinelearningservices.BatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.BatchDeploymentsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, options *armmachinelearningservices.BatchDeploymentsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.BatchDeploymentsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.Responder[armmachinelearningservices.BatchDeploymentsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.BatchDeploymentsClientGetResponse{BatchDeploymentData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchDeploymentsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BatchDeploymentData))
}

func (testsuite *FakeTestSuite) TestBatchDeployments_Update() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update Batch Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	var exampleBody armmachinelearningservices.PartialBatchDeploymentPartialTrackedResource
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"
	exampleBody = armmachinelearningservices.PartialBatchDeploymentPartialTrackedResource{
		Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]any{
				"string": map[string]any{},
			},
		},
		Kind:     to.Ptr("string"),
		Location: to.Ptr("string"),
		Properties: &armmachinelearningservices.PartialBatchDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.PartialCodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			Compute:       to.Ptr("string"),
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.PartialIDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:   to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			RetrySettings: &armmachinelearningservices.PartialBatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.PartialSKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
		Tags: map[string]*string{},
	}

	exampleRes := armmachinelearningservices.BatchDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchDeploymentDetails{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute:                   to.Ptr("string"),
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.IDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"1e5e1cf9-b0ea-4cf6-9764-e750bf85c10a": nil,
					},
				},
			},
			RetrySettings: &armmachinelearningservices.BatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.BatchDeploymentsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, body armmachinelearningservices.PartialBatchDeploymentPartialTrackedResource, options *armmachinelearningservices.BatchDeploymentsClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.BatchDeploymentsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.BatchDeploymentsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.BatchDeploymentsClientUpdateResponse{BatchDeploymentData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchDeploymentsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BatchDeploymentData))
}

func (testsuite *FakeTestSuite) TestBatchDeployments_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Batch Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	var exampleBody armmachinelearningservices.BatchDeploymentData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"
	exampleBody = armmachinelearningservices.BatchDeploymentData{
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchDeploymentDetails{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute:                   to.Ptr("string"),
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.IDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:   to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName: to.Ptr("string"),
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"cd3c37dc-2876-4ca4-8a54-21bd7619724a": nil,
					},
				},
			},
			RetrySettings: &armmachinelearningservices.BatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	exampleRes := armmachinelearningservices.BatchDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchDeploymentDetails{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute:                   to.Ptr("string"),
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.IDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"4939850d-8eae-4343-8566-0826259a2ad1": nil,
					},
				},
			},
			RetrySettings: &armmachinelearningservices.BatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.BatchDeploymentsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, body armmachinelearningservices.BatchDeploymentData, options *armmachinelearningservices.BatchDeploymentsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.BatchDeploymentsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.BatchDeploymentsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.BatchDeploymentsClientCreateOrUpdateResponse{BatchDeploymentData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewBatchDeploymentsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.BatchDeploymentData))
}

func (testsuite *FakeTestSuite) TestCodeContainers_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Code Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.CodeContainerResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.CodeContainerData{
			{
				Name: to.Ptr("testContainer"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
					CreatedBy:          to.Ptr("John Smith"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("John Smith"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.CodeContainerDetails{
					Description: to.Ptr("string"),
					Tags: map[string]*string{
						"property1": to.Ptr("string"),
						"property2": to.Ptr("string"),
					},
				},
			},
			{
				Name: to.Ptr("testContainer2"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer2"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
					CreatedBy:          to.Ptr("John Smith"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("John Smith"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.CodeContainerDetails{
					Description: to.Ptr("string"),
					Tags: map[string]*string{
						"property1": to.Ptr("string"),
						"property2": to.Ptr("string"),
					},
				},
			}},
	}

	testsuite.serverFactory.CodeContainersServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.CodeContainersClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.CodeContainersClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.CodeContainersClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.CodeContainersClientListResponse{CodeContainerResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeContainersClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.CodeContainersClientListOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CodeContainerResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCodeContainers_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Code Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"
	exampleName = "testContainer"

	testsuite.serverFactory.CodeContainersServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.CodeContainersClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.CodeContainersClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.CodeContainersClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.CodeContainersClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeContainersClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/delete.json")
}

func (testsuite *FakeTestSuite) TestCodeContainers_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Code Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"
	exampleName = "testContainer"

	exampleRes := armmachinelearningservices.CodeContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeContainerDetails{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"property1": to.Ptr("string"),
				"property2": to.Ptr("string"),
			},
		},
	}

	testsuite.serverFactory.CodeContainersServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.CodeContainersClientGetOptions) (resp azfake.Responder[armmachinelearningservices.CodeContainersClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.CodeContainersClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.CodeContainersClientGetResponse{CodeContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeContainersClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CodeContainerData))
}

func (testsuite *FakeTestSuite) TestCodeContainers_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Code Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleBody armmachinelearningservices.CodeContainerData
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"
	exampleName = "testContainer"
	exampleBody = armmachinelearningservices.CodeContainerData{
		Properties: &armmachinelearningservices.CodeContainerDetails{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}

	exampleRes := armmachinelearningservices.CodeContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeContainerDetails{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"property1": to.Ptr("string"),
				"property2": to.Ptr("string"),
			},
		},
	}

	testsuite.serverFactory.CodeContainersServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.CodeContainerData, options *armmachinelearningservices.CodeContainersClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.CodeContainersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.CodeContainersClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.CodeContainersClientCreateOrUpdateResponse{CodeContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeContainersClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CodeContainerData))
}

func (testsuite *FakeTestSuite) TestCodeVersions_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Code Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.CodeVersionResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.CodeVersionData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.CodeVersionDetails{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					IsAnonymous: to.Ptr(false),
					CodeURI:     to.Ptr("https://blobStorage/folderName"),
				},
			}},
	}

	testsuite.serverFactory.CodeVersionsServer.NewListPager = func(resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.CodeVersionsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.CodeVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.PagerResponder[armmachinelearningservices.CodeVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.CodeVersionsClientListResponse{CodeVersionResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeVersionsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, exampleName, &armmachinelearningservices.CodeVersionsClientListOptions{OrderBy: to.Ptr("string"),
		Top:  to.Ptr[int32](1),
		Skip: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CodeVersionResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestCodeVersions_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Code Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	testsuite.serverFactory.CodeVersionsServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.CodeVersionsClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.CodeVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.CodeVersionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.CodeVersionsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeVersionsClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/delete.json")
}

func (testsuite *FakeTestSuite) TestCodeVersions_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Code Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	exampleRes := armmachinelearningservices.CodeVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			CodeURI:     to.Ptr("https://blobStorage/folderName"),
		},
	}

	testsuite.serverFactory.CodeVersionsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.CodeVersionsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.CodeVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.CodeVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.CodeVersionsClientGetResponse{CodeVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeVersionsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CodeVersionData))
}

func (testsuite *FakeTestSuite) TestCodeVersions_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Code Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	var exampleBody armmachinelearningservices.CodeVersionData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"
	exampleBody = armmachinelearningservices.CodeVersionData{
		Properties: &armmachinelearningservices.CodeVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			CodeURI:     to.Ptr("https://blobStorage/folderName"),
		},
	}

	exampleRes := armmachinelearningservices.CodeVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			CodeURI:     to.Ptr("https://blobStorage/folderName"),
		},
	}

	testsuite.serverFactory.CodeVersionsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, body armmachinelearningservices.CodeVersionData, options *armmachinelearningservices.CodeVersionsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.CodeVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.CodeVersionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.CodeVersionsClientCreateOrUpdateResponse{CodeVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewCodeVersionsClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CodeVersionData))
}

func (testsuite *FakeTestSuite) TestComponentContainers_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Component Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes := armmachinelearningservices.ComponentContainerResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.ComponentContainerData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.ComponentContainerDetails{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			}},
	}

	testsuite.serverFactory.ComponentContainersServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.ComponentContainersClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.ComponentContainersClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.ComponentContainersClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.ComponentContainersClientListResponse{ComponentContainerResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentContainersClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.ComponentContainersClientListOptions{Skip: nil,
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ComponentContainerResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestComponentContainers_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Component Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	testsuite.serverFactory.ComponentContainersServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.ComponentContainersClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.ComponentContainersClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.ComponentContainersClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComponentContainersClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentContainersClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/delete.json")
}

func (testsuite *FakeTestSuite) TestComponentContainers_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Component Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.ComponentContainerData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
		},
	}

	testsuite.serverFactory.ComponentContainersServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.ComponentContainersClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ComponentContainersClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.ComponentContainersClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComponentContainersClientGetResponse{ComponentContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentContainersClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComponentContainerData))
}

func (testsuite *FakeTestSuite) TestComponentContainers_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Component Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleBody armmachinelearningservices.ComponentContainerData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleBody = armmachinelearningservices.ComponentContainerData{
		Properties: &armmachinelearningservices.ComponentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
		},
	}

	exampleRes := armmachinelearningservices.ComponentContainerData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
		},
	}

	testsuite.serverFactory.ComponentContainersServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.ComponentContainerData, options *armmachinelearningservices.ComponentContainersClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.ComponentContainersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.ComponentContainersClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComponentContainersClientCreateOrUpdateResponse{ComponentContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentContainersClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComponentContainerData))
}

func (testsuite *FakeTestSuite) TestComponentVersions_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Component Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.ComponentVersionResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.ComponentVersionData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.ComponentVersionDetails{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					IsAnonymous: to.Ptr(false),
					ComponentSpec: map[string]any{
						"50acbce5-cccc-475a-8ac6-c4da402afbd8": nil,
					},
				},
			}},
	}

	testsuite.serverFactory.ComponentVersionsServer.NewListPager = func(resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.ComponentVersionsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.ComponentVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.PagerResponder[armmachinelearningservices.ComponentVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.ComponentVersionsClientListResponse{ComponentVersionResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentVersionsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, exampleName, &armmachinelearningservices.ComponentVersionsClientListOptions{OrderBy: to.Ptr("string"),
		Top:          to.Ptr[int32](1),
		Skip:         nil,
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ComponentVersionResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestComponentVersions_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Component Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	testsuite.serverFactory.ComponentVersionsServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.ComponentVersionsClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.ComponentVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.ComponentVersionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComponentVersionsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentVersionsClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/delete.json")
}

func (testsuite *FakeTestSuite) TestComponentVersions_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Component Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	exampleRes := armmachinelearningservices.ComponentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			ComponentSpec: map[string]any{
				"1a7c40b5-2029-4f5f-a8d6-fd0822038773": nil,
			},
		},
	}

	testsuite.serverFactory.ComponentVersionsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.ComponentVersionsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ComponentVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.ComponentVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComponentVersionsClientGetResponse{ComponentVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentVersionsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComponentVersionData))
}

func (testsuite *FakeTestSuite) TestComponentVersions_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Component Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	var exampleBody armmachinelearningservices.ComponentVersionData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"
	exampleBody = armmachinelearningservices.ComponentVersionData{
		Properties: &armmachinelearningservices.ComponentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			ComponentSpec: map[string]any{
				"8ced901b-d826-477d-bfef-329da9672513": nil,
			},
		},
	}

	exampleRes := armmachinelearningservices.ComponentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			ComponentSpec: map[string]any{
				"2de2e74e-457d-4447-a581-933abc2b9d96": nil,
			},
		},
	}

	testsuite.serverFactory.ComponentVersionsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, body armmachinelearningservices.ComponentVersionData, options *armmachinelearningservices.ComponentVersionsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.ComponentVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.ComponentVersionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ComponentVersionsClientCreateOrUpdateResponse{ComponentVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewComponentVersionsClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ComponentVersionData))
}

func (testsuite *FakeTestSuite) TestDataContainers_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Data Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"

	exampleRes := armmachinelearningservices.DataContainerResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.DataContainerData{
			{
				Name: to.Ptr("datastore123"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer123"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					CreatedBy:          to.Ptr("John Smith"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("John Smith"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.DataContainerDetails{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"properties1": to.Ptr("value1"),
						"properties2": to.Ptr("value2"),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
				},
			},
			{
				Name: to.Ptr("datastore124"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer124"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					CreatedBy:          to.Ptr("John Smith"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("John Smith"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.DataContainerDetails{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"properties1": to.Ptr("value1"),
						"properties2": to.Ptr("value2"),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
				},
			}},
	}

	testsuite.serverFactory.DataContainersServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.DataContainersClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.DataContainersClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.DataContainersClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.DataContainersClientListResponse{DataContainerResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataContainersClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.DataContainersClientListOptions{Skip: nil,
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DataContainerResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDataContainers_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Data Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleName = "datacontainer123"

	testsuite.serverFactory.DataContainersServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.DataContainersClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.DataContainersClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.DataContainersClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DataContainersClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataContainersClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/delete.json")
}

func (testsuite *FakeTestSuite) TestDataContainers_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Data Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleName = "datacontainer123"

	exampleRes := armmachinelearningservices.DataContainerData{
		Name: to.Ptr("datacontainer123"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer123"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.DataContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"properties1": to.Ptr("value1"),
				"properties2": to.Ptr("value2"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
		},
	}

	testsuite.serverFactory.DataContainersServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.DataContainersClientGetOptions) (resp azfake.Responder[armmachinelearningservices.DataContainersClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.DataContainersClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DataContainersClientGetResponse{DataContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataContainersClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DataContainerData))
}

func (testsuite *FakeTestSuite) TestDataContainers_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Data Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleBody armmachinelearningservices.DataContainerData
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleName = "datacontainer123"
	exampleBody = armmachinelearningservices.DataContainerData{
		Properties: &armmachinelearningservices.DataContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"properties1": to.Ptr("value1"),
				"properties2": to.Ptr("value2"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
		},
	}

	exampleRes := armmachinelearningservices.DataContainerData{
		Name: to.Ptr("datacontainer123"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer123"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.DataContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"properties1": to.Ptr("value1"),
				"properties2": to.Ptr("value2"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
		},
	}

	testsuite.serverFactory.DataContainersServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.DataContainerData, options *armmachinelearningservices.DataContainersClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.DataContainersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.DataContainersClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DataContainersClientCreateOrUpdateResponse{DataContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataContainersClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DataContainerData))
}

func (testsuite *FakeTestSuite) TestDataVersions_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Data Version Base."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.DataVersionBaseResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.DataVersionBaseData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.URIFileDataVersion{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					IsAnonymous: to.Ptr(false),
					DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
					DataURI:     to.Ptr("string"),
				},
			}},
	}

	testsuite.serverFactory.DataVersionsServer.NewListPager = func(resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.DataVersionsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.DataVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.PagerResponder[armmachinelearningservices.DataVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.DataVersionsClientListResponse{DataVersionBaseResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataVersionsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, exampleName, &armmachinelearningservices.DataVersionsClientListOptions{OrderBy: to.Ptr("string"),
		Top:          to.Ptr[int32](1),
		Skip:         nil,
		Tags:         to.Ptr("string"),
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DataVersionBaseResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDataVersions_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Data Version Base."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	testsuite.serverFactory.DataVersionsServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.DataVersionsClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.DataVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.DataVersionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DataVersionsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataVersionsClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/delete.json")
}

func (testsuite *FakeTestSuite) TestDataVersions_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Data Version Base."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	exampleRes := armmachinelearningservices.DataVersionBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.URIFileDataVersion{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
			DataURI:     to.Ptr("string"),
		},
	}

	testsuite.serverFactory.DataVersionsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.DataVersionsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.DataVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.DataVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DataVersionsClientGetResponse{DataVersionBaseData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataVersionsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DataVersionBaseData))
}

func (testsuite *FakeTestSuite) TestDataVersions_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Data Version Base."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	var exampleBody armmachinelearningservices.DataVersionBaseData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"
	exampleBody = armmachinelearningservices.DataVersionBaseData{
		Properties: &armmachinelearningservices.URIFileDataVersion{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
			DataURI:     to.Ptr("string"),
		},
	}

	exampleRes := armmachinelearningservices.DataVersionBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.URIFileDataVersion{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
			DataURI:     to.Ptr("string"),
		},
	}

	testsuite.serverFactory.DataVersionsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, body armmachinelearningservices.DataVersionBaseData, options *armmachinelearningservices.DataVersionsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.DataVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.DataVersionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DataVersionsClientCreateOrUpdateResponse{DataVersionBaseData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDataVersionsClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DataVersionBaseData))
}

func (testsuite *FakeTestSuite) TestDatastores_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List datastores."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes := armmachinelearningservices.DatastoreResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.DatastoreData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.AzureBlobDatastore{
					Description: to.Ptr("string"),
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
						CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
					},
					DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
					IsDefault:     to.Ptr(false),
					AccountName:   to.Ptr("string"),
					ContainerName: to.Ptr("string"),
					Endpoint:      to.Ptr("core.windows.net"),
					Protocol:      to.Ptr("https"),
				},
			}},
	}

	testsuite.serverFactory.DatastoresServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.DatastoresClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.DatastoresClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.DatastoresClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.DatastoresClientListResponse{DatastoreResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDatastoresClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.DatastoresClientListOptions{Skip: nil,
		Count:     to.Ptr[int32](1),
		IsDefault: to.Ptr(false),
		Names: []string{
			"string"},
		SearchText: to.Ptr("string"),
		OrderBy:    to.Ptr("string"),
		OrderByAsc: to.Ptr(false),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DatastoreResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestDatastores_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete datastore."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	testsuite.serverFactory.DatastoresServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.DatastoresClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.DatastoresClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.DatastoresClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DatastoresClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewDatastoresClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/delete.json")
}

func (testsuite *FakeTestSuite) TestDatastores_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get datastore."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureBlobDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
			IsDefault:     to.Ptr(false),
			AccountName:   to.Ptr("string"),
			ContainerName: to.Ptr("string"),
			Endpoint:      to.Ptr("core.windows.net"),
			Protocol:      to.Ptr("https"),
		},
	}

	testsuite.serverFactory.DatastoresServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.DatastoresClientGetOptions) (resp azfake.Responder[armmachinelearningservices.DatastoresClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.DatastoresClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DatastoresClientGetResponse{DatastoreData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDatastoresClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DatastoreData))
}

func (testsuite *FakeTestSuite) TestDatastores_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen1WServicePrincipal/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (Azure Data Lake Gen1 w/ ServicePrincipal)."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleBody armmachinelearningservices.DatastoreData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleBody = armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureDataLakeGen1Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				Secrets: &armmachinelearningservices.ServicePrincipalDatastoreSecrets{
					SecretsType:  to.Ptr(armmachinelearningservices.SecretsTypeServicePrincipal),
					ClientSecret: to.Ptr("string"),
				},
				TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen1),
			StoreName:     to.Ptr("string"),
		},
	}

	exampleRes := armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureDataLakeGen1Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				TenantID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen1),
			StoreName:     to.Ptr("string"),
		},
	}

	testsuite.serverFactory.DatastoresServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.DatastoreData, options *armmachinelearningservices.DatastoresClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DatastoresClientCreateOrUpdateResponse{DatastoreData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewDatastoresClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen1WServicePrincipal/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DatastoreData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen2WServicePrincipal/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (Azure Data Lake Gen2 w/ Service Principal)."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleBody = armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureDataLakeGen2Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				Secrets: &armmachinelearningservices.ServicePrincipalDatastoreSecrets{
					SecretsType:  to.Ptr(armmachinelearningservices.SecretsTypeServicePrincipal),
					ClientSecret: to.Ptr("string"),
				},
				TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen2),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			Filesystem:    to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}

	exampleRes = armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureDataLakeGen2Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				TenantID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen2),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			Filesystem:    to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}

	testsuite.serverFactory.DatastoresServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.DatastoreData, options *armmachinelearningservices.DatastoresClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DatastoresClientCreateOrUpdateResponse{DatastoreData: exampleRes}, nil)
		return
	}

	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen2WServicePrincipal/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DatastoreData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureFileWAccountKey/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (Azure File store w/ AccountKey)."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleBody = armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureFileDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
				Secrets: &armmachinelearningservices.AccountKeyDatastoreSecrets{
					SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
					Key:         to.Ptr("string"),
				},
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureFile),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			FileShareName: to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}

	exampleRes = armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureFileDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureFile),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			FileShareName: to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}

	testsuite.serverFactory.DatastoresServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.DatastoreData, options *armmachinelearningservices.DatastoresClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DatastoresClientCreateOrUpdateResponse{DatastoreData: exampleRes}, nil)
		return
	}

	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureFileWAccountKey/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DatastoreData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureBlobWAccountKey/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (AzureBlob w/ AccountKey)."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleBody = armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureBlobDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
				Secrets: &armmachinelearningservices.AccountKeyDatastoreSecrets{
					SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
					Key:         to.Ptr("string"),
				},
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
			AccountName:   to.Ptr("string"),
			ContainerName: to.Ptr("string"),
			Endpoint:      to.Ptr("core.windows.net"),
			Protocol:      to.Ptr("https"),
		},
	}

	exampleRes = armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureBlobDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
			IsDefault:     to.Ptr(false),
			AccountName:   to.Ptr("string"),
			ContainerName: to.Ptr("string"),
			Endpoint:      to.Ptr("core.windows.net"),
			Protocol:      to.Ptr("https"),
		},
	}

	testsuite.serverFactory.DatastoresServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.DatastoreData, options *armmachinelearningservices.DatastoresClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.DatastoresClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.DatastoresClientCreateOrUpdateResponse{DatastoreData: exampleRes}, nil)
		return
	}

	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureBlobWAccountKey/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DatastoreData))
}

func (testsuite *FakeTestSuite) TestDatastores_ListSecrets() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/listSecrets.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get datastore secrets."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.DatastoresClientListSecretsResponse{
		DatastoreSecretsClassification: &armmachinelearningservices.AccountKeyDatastoreSecrets{
			SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
			Key:         to.Ptr("string"),
		},
	}

	testsuite.serverFactory.DatastoresServer.ListSecrets = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.DatastoresClientListSecretsOptions) (resp azfake.Responder[armmachinelearningservices.DatastoresClientListSecretsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.DatastoresClientListSecretsResponse]{}
		resp.SetResponse(http.StatusOK, exampleRes, nil)
		return
	}

	client := testsuite.clientFactory.NewDatastoresClient()
	res, err := client.ListSecrets(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/listSecrets.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res))
}

func (testsuite *FakeTestSuite) TestEnvironmentContainers_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Environment Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.EnvironmentContainerResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.EnvironmentContainerData{
			{
				Name: to.Ptr("testEnvironment"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/environments"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/environments/testEnvironment"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					CreatedBy:          to.Ptr("John Smith"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("John Smith"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.EnvironmentContainerDetails{
					Description: to.Ptr("string"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
				},
			}},
	}

	testsuite.serverFactory.EnvironmentContainersServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.EnvironmentContainersClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.EnvironmentContainersClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.EnvironmentContainersClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.EnvironmentContainersClientListResponse{EnvironmentContainerResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentContainersClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.EnvironmentContainersClientListOptions{Skip: nil,
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.EnvironmentContainerResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestEnvironmentContainers_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Environment Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"
	exampleName = "testContainer"

	testsuite.serverFactory.EnvironmentContainersServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.EnvironmentContainersClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.EnvironmentContainersClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.EnvironmentContainersClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.EnvironmentContainersClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentContainersClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/delete.json")
}

func (testsuite *FakeTestSuite) TestEnvironmentContainers_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Environment Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"
	exampleName = "testEnvironment"

	exampleRes := armmachinelearningservices.EnvironmentContainerData{
		Name: to.Ptr("testEnvironment"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/environments"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/environments/testEnvironment"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentContainerDetails{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}

	testsuite.serverFactory.EnvironmentContainersServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.EnvironmentContainersClientGetOptions) (resp azfake.Responder[armmachinelearningservices.EnvironmentContainersClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.EnvironmentContainersClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.EnvironmentContainersClientGetResponse{EnvironmentContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentContainersClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EnvironmentContainerData))
}

func (testsuite *FakeTestSuite) TestEnvironmentContainers_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Environment Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleBody armmachinelearningservices.EnvironmentContainerData
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "testworkspace"
	exampleName = "testEnvironment"
	exampleBody = armmachinelearningservices.EnvironmentContainerData{
		Properties: &armmachinelearningservices.EnvironmentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
		},
	}

	exampleRes := armmachinelearningservices.EnvironmentContainerData{
		Name: to.Ptr("testEnvironment"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/environments"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/environments/testEnvironment"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-04T03:39:11.300Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-04T03:39:11.300Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
		},
	}

	testsuite.serverFactory.EnvironmentContainersServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.EnvironmentContainerData, options *armmachinelearningservices.EnvironmentContainersClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.EnvironmentContainersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.EnvironmentContainersClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.EnvironmentContainersClientCreateOrUpdateResponse{EnvironmentContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentContainersClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EnvironmentContainerData))
}

func (testsuite *FakeTestSuite) TestEnvironmentVersions_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Environment Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.EnvironmentVersionResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.EnvironmentVersionData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.EnvironmentVersionDetails{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					IsAnonymous: to.Ptr(false),
					Build: &armmachinelearningservices.BuildContext{
						ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
						DockerfilePath: to.Ptr("prod/Dockerfile"),
					},
					CondaFile:       to.Ptr("string"),
					EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
					Image:           to.Ptr("docker.io/tensorflow/serving:latest"),
					InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
						LivenessRoute: &armmachinelearningservices.Route{
							Path: to.Ptr("string"),
							Port: to.Ptr[int32](1),
						},
						ReadinessRoute: &armmachinelearningservices.Route{
							Path: to.Ptr("string"),
							Port: to.Ptr[int32](1),
						},
						ScoringRoute: &armmachinelearningservices.Route{
							Path: to.Ptr("string"),
							Port: to.Ptr[int32](1),
						},
					},
				},
			}},
	}

	testsuite.serverFactory.EnvironmentVersionsServer.NewListPager = func(resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.EnvironmentVersionsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.EnvironmentVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.PagerResponder[armmachinelearningservices.EnvironmentVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.EnvironmentVersionsClientListResponse{EnvironmentVersionResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentVersionsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, exampleName, &armmachinelearningservices.EnvironmentVersionsClientListOptions{OrderBy: to.Ptr("string"),
		Top:          to.Ptr[int32](1),
		Skip:         nil,
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.EnvironmentVersionResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestEnvironmentVersions_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Environment Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	testsuite.serverFactory.EnvironmentVersionsServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.EnvironmentVersionsClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.EnvironmentVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.EnvironmentVersionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.EnvironmentVersionsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentVersionsClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/delete.json")
}

func (testsuite *FakeTestSuite) TestEnvironmentVersions_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Environment Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	exampleRes := armmachinelearningservices.EnvironmentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Build: &armmachinelearningservices.BuildContext{
				ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
				DockerfilePath: to.Ptr("prod/Dockerfile"),
			},
			CondaFile:       to.Ptr("string"),
			EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
			Image:           to.Ptr("docker.io/tensorflow/serving:latest"),
			InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
				LivenessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ReadinessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ScoringRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
			},
		},
	}

	testsuite.serverFactory.EnvironmentVersionsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.EnvironmentVersionsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.EnvironmentVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.EnvironmentVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.EnvironmentVersionsClientGetResponse{EnvironmentVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentVersionsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EnvironmentVersionData))
}

func (testsuite *FakeTestSuite) TestEnvironmentVersions_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Environment Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	var exampleBody armmachinelearningservices.EnvironmentVersionData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"
	exampleBody = armmachinelearningservices.EnvironmentVersionData{
		Properties: &armmachinelearningservices.EnvironmentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Build: &armmachinelearningservices.BuildContext{
				ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
				DockerfilePath: to.Ptr("prod/Dockerfile"),
			},
			CondaFile: to.Ptr("string"),
			Image:     to.Ptr("docker.io/tensorflow/serving:latest"),
			InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
				LivenessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ReadinessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ScoringRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
			},
		},
	}

	exampleRes := armmachinelearningservices.EnvironmentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Build: &armmachinelearningservices.BuildContext{
				ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
				DockerfilePath: to.Ptr("prod/Dockerfile"),
			},
			CondaFile:       to.Ptr("string"),
			EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
			Image:           to.Ptr("docker.io/tensorflow/serving:latest"),
			InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
				LivenessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ReadinessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ScoringRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
			},
		},
	}

	testsuite.serverFactory.EnvironmentVersionsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, body armmachinelearningservices.EnvironmentVersionData, options *armmachinelearningservices.EnvironmentVersionsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.EnvironmentVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.EnvironmentVersionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.EnvironmentVersionsClientCreateOrUpdateResponse{EnvironmentVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewEnvironmentVersionsClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EnvironmentVersionData))
}

func (testsuite *FakeTestSuite) TestJobs_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List AutoML Job."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes := armmachinelearningservices.JobBaseResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.JobBaseData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeManagedIdentity),
				},
				Properties: &armmachinelearningservices.AutoMLJob{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					ComputeID:      to.Ptr("string"),
					DisplayName:    to.Ptr("string"),
					ExperimentName: to.Ptr("string"),
					Identity: &armmachinelearningservices.AmlToken{
						IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
					},
					IsArchived: to.Ptr(false),
					JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
					Schedule: &armmachinelearningservices.CronSchedule{
						EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
						ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
						StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						TimeZone:       to.Ptr("string"),
						Expression:     to.Ptr("string"),
					},
					Services: map[string]*armmachinelearningservices.JobService{
						"string": &armmachinelearningservices.JobService{
							Endpoint:       to.Ptr("string"),
							ErrorMessage:   to.Ptr("string"),
							JobServiceType: to.Ptr("string"),
							Port:           to.Ptr[int32](1),
							Properties: map[string]*string{
								"string": to.Ptr("string"),
							},
							Status: to.Ptr("string"),
						},
					},
					Status:        to.Ptr(armmachinelearningservices.JobStatusScheduled),
					EnvironmentID: to.Ptr("string"),
					EnvironmentVariables: map[string]*string{
						"string": to.Ptr("string"),
					},
					Outputs: map[string]armmachinelearningservices.JobOutputClassification{
						"string": &armmachinelearningservices.URIFileJobOutput{
							Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
							URI:           to.Ptr("string"),
							Description:   to.Ptr("string"),
							JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
						},
					},
					Resources: &armmachinelearningservices.ResourceConfiguration{
						InstanceCount: to.Ptr[int32](1),
						InstanceType:  to.Ptr("string"),
						Properties: map[string]any{
							"string": map[string]any{
								"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
							},
						},
					},
					TaskDetails: &armmachinelearningservices.ImageClassification{
						TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
						DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
							TargetColumnName: to.Ptr("string"),
							TrainingData: &armmachinelearningservices.TrainingDataSettings{
								Data: &armmachinelearningservices.MLTableJobInput{
									URI:          to.Ptr("string"),
									JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
								},
							},
						},
						LimitSettings: &armmachinelearningservices.ImageLimitSettings{
							MaxTrials: to.Ptr[int32](2),
						},
						ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
							ValidationCropSize: to.Ptr[int32](2),
						},
						SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
							{
								ValidationCropSize: to.Ptr("choice(2, 360)"),
							}},
					},
				},
			}},
	}

	testsuite.serverFactory.JobsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.JobsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.JobsClientListResponse{JobBaseResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.JobsClientListOptions{Skip: nil,
		JobType:      nil,
		Tag:          nil,
		ListViewType: nil,
		Scheduled:    nil,
		ScheduleID:   nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.JobBaseResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/list.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Command Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes = armmachinelearningservices.JobBaseResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.JobBaseData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.CommandJob{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					ComputeID:      to.Ptr("string"),
					DisplayName:    to.Ptr("string"),
					ExperimentName: to.Ptr("string"),
					Identity: &armmachinelearningservices.AmlToken{
						IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
					},
					JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
					Services: map[string]*armmachinelearningservices.JobService{
						"string": &armmachinelearningservices.JobService{
							Endpoint:       to.Ptr("string"),
							ErrorMessage:   to.Ptr("string"),
							JobServiceType: to.Ptr("string"),
							Port:           to.Ptr[int32](1),
							Properties: map[string]*string{
								"string": to.Ptr("string"),
							},
							Status: to.Ptr("string"),
						},
					},
					Status:  to.Ptr(armmachinelearningservices.JobStatusNotStarted),
					CodeID:  to.Ptr("string"),
					Command: to.Ptr("string"),
					Distribution: &armmachinelearningservices.TensorFlow{
						DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
						ParameterServerCount: to.Ptr[int32](1),
						WorkerCount:          to.Ptr[int32](1),
					},
					EnvironmentID: to.Ptr("string"),
					EnvironmentVariables: map[string]*string{
						"string": to.Ptr("string"),
					},
					Inputs: map[string]armmachinelearningservices.JobInputClassification{
						"string": &armmachinelearningservices.LiteralJobInput{
							Description:  to.Ptr("string"),
							JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
							Value:        to.Ptr("string"),
						},
					},
					Limits: &armmachinelearningservices.CommandJobLimits{
						JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
						Timeout:       to.Ptr("PT5M"),
					},
					Outputs: map[string]armmachinelearningservices.JobOutputClassification{
						"string": &armmachinelearningservices.URIFileJobOutput{
							Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
							URI:           to.Ptr("string"),
							Description:   to.Ptr("string"),
							JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
						},
					},
					Parameters: map[string]any{
						"string": "string",
					},
					Resources: &armmachinelearningservices.ResourceConfiguration{
						InstanceCount: to.Ptr[int32](1),
						InstanceType:  to.Ptr("string"),
						Properties: map[string]any{
							"string": map[string]any{
								"7aad5998-6c83-4ca9-b50a-b44dfc43f420": nil,
							},
						},
					},
				},
			}},
	}

	testsuite.serverFactory.JobsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.JobsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.JobsClientListResponse{JobBaseResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	pager = client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.JobsClientListOptions{Skip: nil,
		JobType:      to.Ptr("string"),
		Tag:          to.Ptr("string"),
		ListViewType: nil,
		Scheduled:    nil,
		ScheduleID:   nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.JobBaseResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/list.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Pipeline Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes = armmachinelearningservices.JobBaseResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.JobBaseData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.PipelineJob{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					ComputeID:      to.Ptr("string"),
					DisplayName:    to.Ptr("string"),
					ExperimentName: to.Ptr("string"),
					JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
					Services: map[string]*armmachinelearningservices.JobService{
						"string": &armmachinelearningservices.JobService{
							Endpoint:       to.Ptr("string"),
							ErrorMessage:   to.Ptr("string"),
							JobServiceType: to.Ptr("string"),
							Port:           to.Ptr[int32](1),
							Properties: map[string]*string{
								"string": to.Ptr("string"),
							},
							Status: to.Ptr("string"),
						},
					},
					Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
					Inputs: map[string]armmachinelearningservices.JobInputClassification{
						"string": &armmachinelearningservices.LiteralJobInput{
							Description:  to.Ptr("string"),
							JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
							Value:        to.Ptr("string"),
						},
					},
					Outputs: map[string]armmachinelearningservices.JobOutputClassification{
						"string": &armmachinelearningservices.URIFileJobOutput{
							Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
							URI:           to.Ptr("string"),
							Description:   to.Ptr("string"),
							JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
						},
					},
					Settings: map[string]any{},
				},
			}},
	}

	testsuite.serverFactory.JobsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.JobsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.JobsClientListResponse{JobBaseResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	pager = client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.JobsClientListOptions{Skip: nil,
		JobType:      to.Ptr("string"),
		Tag:          to.Ptr("string"),
		ListViewType: nil,
		Scheduled:    nil,
		ScheduleID:   nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.JobBaseResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/list.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Sweep Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes = armmachinelearningservices.JobBaseResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.JobBaseData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.SweepJob{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					ComputeID:      to.Ptr("string"),
					DisplayName:    to.Ptr("string"),
					ExperimentName: to.Ptr("string"),
					JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
					Services: map[string]*armmachinelearningservices.JobService{
						"string": &armmachinelearningservices.JobService{
							Endpoint:       to.Ptr("string"),
							ErrorMessage:   to.Ptr("string"),
							JobServiceType: to.Ptr("string"),
							Port:           to.Ptr[int32](1),
							Properties: map[string]*string{
								"string": to.Ptr("string"),
							},
							Status: to.Ptr("string"),
						},
					},
					Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
					EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
						DelayEvaluation:    to.Ptr[int32](1),
						EvaluationInterval: to.Ptr[int32](1),
						PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
					},
					Limits: &armmachinelearningservices.SweepJobLimits{
						JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
						MaxConcurrentTrials: to.Ptr[int32](1),
						MaxTotalTrials:      to.Ptr[int32](1),
						TrialTimeout:        to.Ptr("PT1S"),
					},
					Objective: &armmachinelearningservices.Objective{
						Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
						PrimaryMetric: to.Ptr("string"),
					},
					SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
						SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
					},
					SearchSpace: map[string]any{
						"string": map[string]any{},
					},
					Trial: &armmachinelearningservices.TrialComponent{
						CodeID:  to.Ptr("string"),
						Command: to.Ptr("string"),
						Distribution: &armmachinelearningservices.Mpi{
							DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
							ProcessCountPerInstance: to.Ptr[int32](1),
						},
						EnvironmentID: to.Ptr("string"),
						EnvironmentVariables: map[string]*string{
							"string": to.Ptr("string"),
						},
						Resources: &armmachinelearningservices.ResourceConfiguration{
							InstanceCount: to.Ptr[int32](1),
							InstanceType:  to.Ptr("string"),
							Properties: map[string]any{
								"string": map[string]any{
									"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
								},
							},
						},
					},
				},
			}},
	}

	testsuite.serverFactory.JobsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.JobsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.JobsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.JobsClientListResponse{JobBaseResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	pager = client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.JobsClientListOptions{Skip: nil,
		JobType:      to.Ptr("string"),
		Tag:          to.Ptr("string"),
		ListViewType: nil,
		Scheduled:    nil,
		ScheduleID:   nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.JobBaseResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestJobs_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Job."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleId string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"

	testsuite.serverFactory.JobsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, options *armmachinelearningservices.JobsClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearningservices.JobsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		resp = azfake.PollerResponder[armmachinelearningservices.JobsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.JobsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/delete.json")
}

func (testsuite *FakeTestSuite) TestJobs_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get AutoML Job."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleId string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"

	exampleRes := armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeManagedIdentity),
		},
		Properties: &armmachinelearningservices.AutoMLJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			IsArchived: to.Ptr(false),
			JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
			Schedule: &armmachinelearningservices.CronSchedule{
				EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
				ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
				StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				TimeZone:       to.Ptr("string"),
				Expression:     to.Ptr("string"),
			},
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:        to.Ptr(armmachinelearningservices.JobStatusScheduled),
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
					},
				},
			},
			TaskDetails: &armmachinelearningservices.ImageClassification{
				TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
				DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
					TargetColumnName: to.Ptr("string"),
					TrainingData: &armmachinelearningservices.TrainingDataSettings{
						Data: &armmachinelearningservices.MLTableJobInput{
							URI:          to.Ptr("string"),
							JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
						},
					},
				},
				LimitSettings: &armmachinelearningservices.ImageLimitSettings{
					MaxTrials: to.Ptr[int32](2),
				},
				ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
					ValidationCropSize: to.Ptr[int32](2),
				},
				SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
					{
						ValidationCropSize: to.Ptr("choice(2, 360)"),
					}},
			},
		},
	}

	testsuite.serverFactory.JobsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, options *armmachinelearningservices.JobsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		resp = azfake.Responder[armmachinelearningservices.JobsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientGetResponse{JobBaseData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/get.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Command Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"

	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CommandJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:  to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			CodeID:  to.Ptr("string"),
			Command: to.Ptr("string"),
			Distribution: &armmachinelearningservices.TensorFlow{
				DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
				ParameterServerCount: to.Ptr[int32](1),
				WorkerCount:          to.Ptr[int32](1),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Limits: &armmachinelearningservices.CommandJobLimits{
				JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
				Timeout:       to.Ptr("PT5M"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Parameters: map[string]any{
				"string": "string",
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"8385cf05-78c0-41ef-b31d-36796a678e19": nil,
					},
				},
			},
		},
	}

	testsuite.serverFactory.JobsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, options *armmachinelearningservices.JobsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		resp = azfake.Responder[armmachinelearningservices.JobsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientGetResponse{JobBaseData: exampleRes}, nil)
		return
	}

	res, err = client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/get.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Pipeline Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"

	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.PipelineJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Settings: map[string]any{},
		},
	}

	testsuite.serverFactory.JobsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, options *armmachinelearningservices.JobsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		resp = azfake.Responder[armmachinelearningservices.JobsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientGetResponse{JobBaseData: exampleRes}, nil)
		return
	}

	res, err = client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/get.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Sweep Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"

	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.SweepJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
				DelayEvaluation:    to.Ptr[int32](1),
				EvaluationInterval: to.Ptr[int32](1),
				PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
			},
			Limits: &armmachinelearningservices.SweepJobLimits{
				JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
				MaxConcurrentTrials: to.Ptr[int32](1),
				MaxTotalTrials:      to.Ptr[int32](1),
				TrialTimeout:        to.Ptr("PT1S"),
			},
			Objective: &armmachinelearningservices.Objective{
				Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
				PrimaryMetric: to.Ptr("string"),
			},
			SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
				SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
			},
			SearchSpace: map[string]any{
				"string": map[string]any{},
			},
			Trial: &armmachinelearningservices.TrialComponent{
				CodeID:  to.Ptr("string"),
				Command: to.Ptr("string"),
				Distribution: &armmachinelearningservices.Mpi{
					DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
					ProcessCountPerInstance: to.Ptr[int32](1),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]any{
						"string": map[string]any{
							"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
						},
					},
				},
			},
		},
	}

	testsuite.serverFactory.JobsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, options *armmachinelearningservices.JobsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		resp = azfake.Responder[armmachinelearningservices.JobsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientGetResponse{JobBaseData: exampleRes}, nil)
		return
	}

	res, err = client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))
}

func (testsuite *FakeTestSuite) TestJobs_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate AutoML Job."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleId string
	var exampleBody armmachinelearningservices.JobBaseData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"
	exampleBody = armmachinelearningservices.JobBaseData{
		Properties: &armmachinelearningservices.AutoMLJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			IsArchived: to.Ptr(false),
			JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
			Schedule: &armmachinelearningservices.CronSchedule{
				EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
				ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
				StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				TimeZone:       to.Ptr("string"),
				Expression:     to.Ptr("string"),
			},
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
					},
				},
			},
			TaskDetails: &armmachinelearningservices.ImageClassification{
				TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
				DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
					TargetColumnName: to.Ptr("string"),
					TrainingData: &armmachinelearningservices.TrainingDataSettings{
						Data: &armmachinelearningservices.MLTableJobInput{
							URI:          to.Ptr("string"),
							JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
						},
					},
				},
				LimitSettings: &armmachinelearningservices.ImageLimitSettings{
					MaxTrials: to.Ptr[int32](2),
				},
				ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
					ValidationCropSize: to.Ptr[int32](2),
				},
				SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
					{
						ValidationCropSize: to.Ptr("choice(2, 360)"),
					}},
			},
		},
	}

	exampleRes := armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeManagedIdentity),
		},
		Properties: &armmachinelearningservices.AutoMLJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			IsArchived: to.Ptr(false),
			JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
			Schedule: &armmachinelearningservices.CronSchedule{
				EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
				ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
				StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				TimeZone:       to.Ptr("string"),
				Expression:     to.Ptr("string"),
			},
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:        to.Ptr(armmachinelearningservices.JobStatusScheduled),
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
					},
				},
			},
			TaskDetails: &armmachinelearningservices.ImageClassification{
				TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
				DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
					TargetColumnName: to.Ptr("string"),
					TrainingData: &armmachinelearningservices.TrainingDataSettings{
						Data: &armmachinelearningservices.MLTableJobInput{
							URI:          to.Ptr("string"),
							JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
						},
					},
				},
				LimitSettings: &armmachinelearningservices.ImageLimitSettings{
					MaxTrials: to.Ptr[int32](2),
				},
				ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
					ValidationCropSize: to.Ptr[int32](2),
				},
				SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
					{
						ValidationCropSize: to.Ptr("choice(2, 360)"),
					}},
			},
		},
	}

	testsuite.serverFactory.JobsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, body armmachinelearningservices.JobBaseData, options *armmachinelearningservices.JobsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientCreateOrUpdateResponse{JobBaseData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobsClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Command Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"
	exampleBody = armmachinelearningservices.JobBaseData{
		Properties: &armmachinelearningservices.CommandJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			CodeID:  to.Ptr("string"),
			Command: to.Ptr("string"),
			Distribution: &armmachinelearningservices.TensorFlow{
				DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
				ParameterServerCount: to.Ptr[int32](1),
				WorkerCount:          to.Ptr[int32](1),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Limits: &armmachinelearningservices.CommandJobLimits{
				JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
				Timeout:       to.Ptr("PT5M"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
					},
				},
			},
		},
	}

	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CommandJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:  to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			CodeID:  to.Ptr("string"),
			Command: to.Ptr("string"),
			Distribution: &armmachinelearningservices.TensorFlow{
				DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
				ParameterServerCount: to.Ptr[int32](1),
				WorkerCount:          to.Ptr[int32](1),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Limits: &armmachinelearningservices.CommandJobLimits{
				JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
				Timeout:       to.Ptr("PT5M"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Parameters: map[string]any{
				"string": "string",
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]any{
					"string": map[string]any{
						"a0847709-f5aa-4561-8ba5-d915d403fdcf": nil,
					},
				},
			},
		},
	}

	testsuite.serverFactory.JobsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, body armmachinelearningservices.JobBaseData, options *armmachinelearningservices.JobsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientCreateOrUpdateResponse{JobBaseData: exampleRes}, nil)
		return
	}

	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Pipeline Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"
	exampleBody = armmachinelearningservices.JobBaseData{
		Properties: &armmachinelearningservices.PipelineJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Settings: map[string]any{},
		},
	}

	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.PipelineJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Settings: map[string]any{},
		},
	}

	testsuite.serverFactory.JobsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, body armmachinelearningservices.JobBaseData, options *armmachinelearningservices.JobsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientCreateOrUpdateResponse{JobBaseData: exampleRes}, nil)
		return
	}

	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Sweep Job."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"
	exampleBody = armmachinelearningservices.JobBaseData{
		Properties: &armmachinelearningservices.SweepJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
				DelayEvaluation:    to.Ptr[int32](1),
				EvaluationInterval: to.Ptr[int32](1),
				PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
			},
			Limits: &armmachinelearningservices.SweepJobLimits{
				JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
				MaxConcurrentTrials: to.Ptr[int32](1),
				MaxTotalTrials:      to.Ptr[int32](1),
				TrialTimeout:        to.Ptr("PT1S"),
			},
			Objective: &armmachinelearningservices.Objective{
				Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
				PrimaryMetric: to.Ptr("string"),
			},
			SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
				SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
			},
			SearchSpace: map[string]any{
				"string": map[string]any{},
			},
			Trial: &armmachinelearningservices.TrialComponent{
				CodeID:  to.Ptr("string"),
				Command: to.Ptr("string"),
				Distribution: &armmachinelearningservices.Mpi{
					DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
					ProcessCountPerInstance: to.Ptr[int32](1),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]any{
						"string": map[string]any{
							"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
						},
					},
				},
			},
		},
	}

	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.SweepJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
				DelayEvaluation:    to.Ptr[int32](1),
				EvaluationInterval: to.Ptr[int32](1),
				PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
			},
			Limits: &armmachinelearningservices.SweepJobLimits{
				JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
				MaxConcurrentTrials: to.Ptr[int32](1),
				MaxTotalTrials:      to.Ptr[int32](1),
				TrialTimeout:        to.Ptr("PT1S"),
			},
			Objective: &armmachinelearningservices.Objective{
				Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
				PrimaryMetric: to.Ptr("string"),
			},
			SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
				SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
			},
			SearchSpace: map[string]any{
				"string": map[string]any{},
			},
			Trial: &armmachinelearningservices.TrialComponent{
				CodeID:  to.Ptr("string"),
				Command: to.Ptr("string"),
				Distribution: &armmachinelearningservices.Mpi{
					DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
					ProcessCountPerInstance: to.Ptr[int32](1),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]any{
						"string": map[string]any{
							"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
						},
					},
				},
			},
		},
	}

	testsuite.serverFactory.JobsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, body armmachinelearningservices.JobBaseData, options *armmachinelearningservices.JobsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.JobsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientCreateOrUpdateResponse{JobBaseData: exampleRes}, nil)
		return
	}

	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.JobBaseData))
}

func (testsuite *FakeTestSuite) TestJobs_Cancel() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/cancel.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Cancel Job."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleId string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleId = "string"

	testsuite.serverFactory.JobsServer.Cancel = func(ctx context.Context, resourceGroupName string, workspaceName string, id string, options *armmachinelearningservices.JobsClientCancelOptions) (resp azfake.Responder[armmachinelearningservices.JobsClientCancelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleId, id)
		resp = azfake.Responder[armmachinelearningservices.JobsClientCancelResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.JobsClientCancelResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewJobsClient()
	_, err = client.Cancel(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleId, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/cancel.json")
}

func (testsuite *FakeTestSuite) TestModelContainers_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Model Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"

	exampleRes := armmachinelearningservices.ModelContainerResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.ModelContainerData{
			{
				Name: to.Ptr("testContainer"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/models"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/models/testContainer"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					CreatedBy:          to.Ptr("John Smith"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("John Smith"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.ModelContainerDetails{
					Description: to.Ptr("Model container description"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
				},
			}},
	}

	testsuite.serverFactory.ModelContainersServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.ModelContainersClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.ModelContainersClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.ModelContainersClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.ModelContainersClientListResponse{ModelContainerResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelContainersClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.ModelContainersClientListOptions{Skip: nil,
		Count:        nil,
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ModelContainerResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestModelContainers_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Model Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleName = "testContainer"

	testsuite.serverFactory.ModelContainersServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.ModelContainersClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.ModelContainersClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.ModelContainersClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ModelContainersClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelContainersClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/delete.json")
}

func (testsuite *FakeTestSuite) TestModelContainers_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Model Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleName = "testContainer"

	exampleRes := armmachinelearningservices.ModelContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/models"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/models/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelContainerDetails{
			Description: to.Ptr("Model container description"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}

	testsuite.serverFactory.ModelContainersServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.ModelContainersClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ModelContainersClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.Responder[armmachinelearningservices.ModelContainersClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ModelContainersClientGetResponse{ModelContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelContainersClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ModelContainerData))
}

func (testsuite *FakeTestSuite) TestModelContainers_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Model Container."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleBody armmachinelearningservices.ModelContainerData
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleName = "testContainer"
	exampleBody = armmachinelearningservices.ModelContainerData{
		Properties: &armmachinelearningservices.ModelContainerDetails{
			Description: to.Ptr("Model container description"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}

	exampleRes := armmachinelearningservices.ModelContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/models"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/models/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelContainerDetails{
			Description: to.Ptr("Model container description"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}

	testsuite.serverFactory.ModelContainersServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, body armmachinelearningservices.ModelContainerData, options *armmachinelearningservices.ModelContainersClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.ModelContainersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.ModelContainersClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ModelContainersClientCreateOrUpdateResponse{ModelContainerData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelContainersClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ModelContainerData))
}

func (testsuite *FakeTestSuite) TestModelVersions_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Model Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"

	exampleRes := armmachinelearningservices.ModelVersionResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.ModelVersionData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Properties: &armmachinelearningservices.ModelVersionDetails{
					Description: to.Ptr("string"),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Tags: map[string]*string{
						"string": to.Ptr("string"),
					},
					IsAnonymous: to.Ptr(false),
					Flavors: map[string]*armmachinelearningservices.FlavorData{
						"string": &armmachinelearningservices.FlavorData{
							Data: map[string]*string{
								"string": to.Ptr("string"),
							},
						},
					},
					ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
					ModelURI:  to.Ptr("string"),
				},
			}},
	}

	testsuite.serverFactory.ModelVersionsServer.NewListPager = func(resourceGroupName string, workspaceName string, name string, options *armmachinelearningservices.ModelVersionsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.ModelVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		resp = azfake.PagerResponder[armmachinelearningservices.ModelVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.ModelVersionsClientListResponse{ModelVersionResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelVersionsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, exampleName, &armmachinelearningservices.ModelVersionsClientListOptions{Skip: nil,
		OrderBy:      to.Ptr("string"),
		Top:          to.Ptr[int32](1),
		Version:      to.Ptr("string"),
		Description:  to.Ptr("string"),
		Offset:       to.Ptr[int32](1),
		Tags:         to.Ptr("string"),
		Properties:   to.Ptr("string"),
		Feed:         nil,
		ListViewType: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ModelVersionResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestModelVersions_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Model Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	testsuite.serverFactory.ModelVersionsServer.Delete = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.ModelVersionsClientDeleteOptions) (resp azfake.Responder[armmachinelearningservices.ModelVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.ModelVersionsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ModelVersionsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelVersionsClient()
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/delete.json")
}

func (testsuite *FakeTestSuite) TestModelVersions_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Model Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"

	exampleRes := armmachinelearningservices.ModelVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Flavors: map[string]*armmachinelearningservices.FlavorData{
				"string": &armmachinelearningservices.FlavorData{
					Data: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
			ModelURI:  to.Ptr("string"),
		},
	}

	testsuite.serverFactory.ModelVersionsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, options *armmachinelearningservices.ModelVersionsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.ModelVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armmachinelearningservices.ModelVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ModelVersionsClientGetResponse{ModelVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelVersionsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ModelVersionData))
}

func (testsuite *FakeTestSuite) TestModelVersions_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Model Version."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleName string
	var exampleVersion string
	var exampleBody armmachinelearningservices.ModelVersionData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleName = "string"
	exampleVersion = "string"
	exampleBody = armmachinelearningservices.ModelVersionData{
		Properties: &armmachinelearningservices.ModelVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Flavors: map[string]*armmachinelearningservices.FlavorData{
				"string": &armmachinelearningservices.FlavorData{
					Data: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
			ModelURI:  to.Ptr("string"),
		},
	}

	exampleRes := armmachinelearningservices.ModelVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Flavors: map[string]*armmachinelearningservices.FlavorData{
				"string": &armmachinelearningservices.FlavorData{
					Data: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
			ModelURI:  to.Ptr("string"),
		},
	}

	testsuite.serverFactory.ModelVersionsServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, name string, version string, body armmachinelearningservices.ModelVersionData, options *armmachinelearningservices.ModelVersionsClientCreateOrUpdateOptions) (resp azfake.Responder[armmachinelearningservices.ModelVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleName, name)
		testsuite.Require().Equal(exampleVersion, version)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.ModelVersionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.ModelVersionsClientCreateOrUpdateResponse{ModelVersionData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewModelVersionsClient()
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleName, exampleVersion, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ModelVersionData))
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"

	exampleRes := armmachinelearningservices.OnlineEndpointTrackedResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.OnlineEndpointData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Location: to.Ptr("string"),
				Tags:     map[string]*string{},
				Identity: &armmachinelearningservices.ManagedServiceIdentity{
					Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
					TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
						"string": &armmachinelearningservices.UserAssignedIdentity{
							ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
							PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
					},
				},
				Kind: to.Ptr("string"),
				Properties: &armmachinelearningservices.OnlineEndpointDetails{
					Description: to.Ptr("string"),
					AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					ScoringURI:        to.Ptr("https://www.contoso.com/example"),
					SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
					Compute:           to.Ptr("string"),
					ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
					Traffic: map[string]*int32{
						"string": to.Ptr[int32](1),
					},
				},
				SKU: &armmachinelearningservices.SKU{
					Name:     to.Ptr("string"),
					Capacity: to.Ptr[int32](1),
					Family:   to.Ptr("string"),
					Size:     to.Ptr("string"),
					Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
				},
			}},
	}

	testsuite.serverFactory.OnlineEndpointsServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.OnlineEndpointsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.OnlineEndpointsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.OnlineEndpointsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientListResponse{OnlineEndpointTrackedResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, &armmachinelearningservices.OnlineEndpointsClientListOptions{Name: to.Ptr("string"),
		Count:       to.Ptr[int32](1),
		ComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
		Skip:        nil,
		Tags:        to.Ptr("string"),
		Properties:  to.Ptr("string"),
		OrderBy:     to.Ptr(armmachinelearningservices.OrderStringCreatedAtDesc),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OnlineEndpointTrackedResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	testsuite.serverFactory.OnlineEndpointsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.OnlineEndpointsClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/delete.json")
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	exampleRes := armmachinelearningservices.OnlineEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.OnlineEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI:        to.Ptr("https://www.contoso.com/example"),
			SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
			Compute:           to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineEndpointsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.OnlineEndpointsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.OnlineEndpointsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.Responder[armmachinelearningservices.OnlineEndpointsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientGetResponse{OnlineEndpointData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineEndpointData))
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_Update() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleBody armmachinelearningservices.PartialOnlineEndpointPartialTrackedResource
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleBody = armmachinelearningservices.PartialOnlineEndpointPartialTrackedResource{
		Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]any{
				"string": map[string]any{},
			},
		},
		Kind:     to.Ptr("string"),
		Location: to.Ptr("string"),
		Properties: &armmachinelearningservices.PartialOnlineEndpoint{
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.PartialSKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
		Tags: map[string]*string{},
	}

	exampleRes := armmachinelearningservices.OnlineEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.OnlineEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI:        to.Ptr("https://www.contoso.com/example"),
			SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
			Compute:           to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineEndpointsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, body armmachinelearningservices.PartialOnlineEndpointPartialTrackedResource, options *armmachinelearningservices.OnlineEndpointsClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientUpdateResponse{OnlineEndpointData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineEndpointData))
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleBody armmachinelearningservices.OnlineEndpointData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleBody = armmachinelearningservices.OnlineEndpointData{
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.OnlineEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute: to.Ptr("string"),
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	exampleRes := armmachinelearningservices.OnlineEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.OnlineEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI:        to.Ptr("https://www.contoso.com/example"),
			SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
			Compute:           to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineEndpointsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, body armmachinelearningservices.OnlineEndpointData, options *armmachinelearningservices.OnlineEndpointsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientCreateOrUpdateResponse{OnlineEndpointData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineEndpointData))
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_ListKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/listKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"ListKeys Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	exampleRes := armmachinelearningservices.EndpointAuthKeys{
		PrimaryKey:   to.Ptr("string"),
		SecondaryKey: to.Ptr("string"),
	}

	testsuite.serverFactory.OnlineEndpointsServer.ListKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.OnlineEndpointsClientListKeysOptions) (resp azfake.Responder[armmachinelearningservices.OnlineEndpointsClientListKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.Responder[armmachinelearningservices.OnlineEndpointsClientListKeysResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientListKeysResponse{EndpointAuthKeys: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	res, err := client.ListKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/listKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EndpointAuthKeys))
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_RegenerateKeys() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/regenerateKeys.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"RegenerateKeys Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleBody armmachinelearningservices.RegenerateEndpointKeysRequest
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleBody = armmachinelearningservices.RegenerateEndpointKeysRequest{
		KeyType:  to.Ptr(armmachinelearningservices.KeyTypePrimary),
		KeyValue: to.Ptr("string"),
	}

	testsuite.serverFactory.OnlineEndpointsServer.BeginRegenerateKeys = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, body armmachinelearningservices.RegenerateEndpointKeysRequest, options *armmachinelearningservices.OnlineEndpointsClientBeginRegenerateKeysOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientRegenerateKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineEndpointsClientRegenerateKeysResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientRegenerateKeysResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	poller, err := client.BeginRegenerateKeys(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/regenerateKeys.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/regenerateKeys.json")
}

func (testsuite *FakeTestSuite) TestOnlineEndpoints_GetToken() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/getToken.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"GetToken Online Endpoint."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	exampleRes := armmachinelearningservices.EndpointAuthToken{
		AccessToken:         to.Ptr("string"),
		ExpiryTimeUTC:       to.Ptr[int64](1),
		RefreshAfterTimeUTC: to.Ptr[int64](1),
		TokenType:           to.Ptr("string"),
	}

	testsuite.serverFactory.OnlineEndpointsServer.GetToken = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.OnlineEndpointsClientGetTokenOptions) (resp azfake.Responder[armmachinelearningservices.OnlineEndpointsClientGetTokenResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.Responder[armmachinelearningservices.OnlineEndpointsClientGetTokenResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.OnlineEndpointsClientGetTokenResponse{EndpointAuthToken: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineEndpointsClient()
	res, err := client.GetToken(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/getToken.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EndpointAuthToken))
}

func (testsuite *FakeTestSuite) TestOnlineDeployments_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Online Deployments."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"

	exampleRes := armmachinelearningservices.OnlineDeploymentTrackedResourceArmPaginatedResult{
		Value: []*armmachinelearningservices.OnlineDeploymentData{
			{
				Name: to.Ptr("string"),
				Type: to.Ptr("string"),
				ID:   to.Ptr("string"),
				SystemData: &armmachinelearningservices.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
				},
				Location: to.Ptr("string"),
				Tags:     map[string]*string{},
				Identity: &armmachinelearningservices.ManagedServiceIdentity{
					Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
					TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
						"string": &armmachinelearningservices.UserAssignedIdentity{
							ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
							PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
					},
				},
				Kind: to.Ptr("string"),
				Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
					Description: to.Ptr("string"),
					CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
						CodeID:        to.Ptr("string"),
						ScoringScript: to.Ptr("string"),
					},
					EnvironmentID: to.Ptr("string"),
					EnvironmentVariables: map[string]*string{
						"string": to.Ptr("string"),
					},
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					AppInsightsEnabled:  to.Ptr(false),
					EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
					InstanceType:        to.Ptr("string"),
					LivenessProbe: &armmachinelearningservices.ProbeSettings{
						FailureThreshold: to.Ptr[int32](1),
						InitialDelay:     to.Ptr("PT5M"),
						Period:           to.Ptr("PT5M"),
						SuccessThreshold: to.Ptr[int32](1),
						Timeout:          to.Ptr("PT5M"),
					},
					Model:             to.Ptr("string"),
					ModelMountPath:    to.Ptr("string"),
					ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
					RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
						MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
						MaxQueueWait:                     to.Ptr("PT5M"),
						RequestTimeout:                   to.Ptr("PT5M"),
					},
					ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
						ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
					},
					ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
						ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
							CPU:    to.Ptr("\"1\""),
							Gpu:    to.Ptr("\"1\""),
							Memory: to.Ptr("\"2Gi\""),
						},
						ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
							CPU:    to.Ptr("\"1\""),
							Gpu:    to.Ptr("\"1\""),
							Memory: to.Ptr("\"2Gi\""),
						},
					},
				},
				SKU: &armmachinelearningservices.SKU{
					Name:     to.Ptr("string"),
					Capacity: to.Ptr[int32](1),
					Family:   to.Ptr("string"),
					Size:     to.Ptr("string"),
					Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
				},
			}},
	}

	testsuite.serverFactory.OnlineDeploymentsServer.NewListPager = func(resourceGroupName string, workspaceName string, endpointName string, options *armmachinelearningservices.OnlineDeploymentsClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.OnlineDeploymentsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		resp = azfake.PagerResponder[armmachinelearningservices.OnlineDeploymentsClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientListResponse{OnlineDeploymentTrackedResourceArmPaginatedResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineDeploymentsClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, &armmachinelearningservices.OnlineDeploymentsClientListOptions{OrderBy: to.Ptr("string"),
		Top:  to.Ptr[int32](1),
		Skip: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OnlineDeploymentTrackedResourceArmPaginatedResult))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestOnlineDeployments_Delete() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/delete.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Delete Online Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleEndpointName = "testEndpoint"
	exampleDeploymentName = "testDeployment"

	testsuite.serverFactory.OnlineDeploymentsServer.BeginDelete = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, options *armmachinelearningservices.OnlineDeploymentsClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientDeleteResponse{}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineDeploymentsClient()
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/delete.json")
}

func (testsuite *FakeTestSuite) TestOnlineDeployments_Get() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/get.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Kubernetes Online Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"

	exampleRes := armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
			ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
				ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
				ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineDeploymentsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, options *armmachinelearningservices.OnlineDeploymentsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.OnlineDeploymentsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.Responder[armmachinelearningservices.OnlineDeploymentsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientGetResponse{OnlineDeploymentData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineDeploymentsClient()
	res, err := client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineDeploymentData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/get.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Managed Online Deployment."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"

	exampleRes = armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.ManagedOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			ReadinessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](30),
				InitialDelay:     to.Ptr("PT1S"),
				Period:           to.Ptr("PT10S"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT2S"),
			},
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineDeploymentsServer.Get = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, options *armmachinelearningservices.OnlineDeploymentsClientGetOptions) (resp azfake.Responder[armmachinelearningservices.OnlineDeploymentsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		resp = azfake.Responder[armmachinelearningservices.OnlineDeploymentsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientGetResponse{OnlineDeploymentData: exampleRes}, nil)
		return
	}

	res, err = client.Get(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineDeploymentData))
}

func (testsuite *FakeTestSuite) TestOnlineDeployments_Update() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/update.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update Kubernetes Online Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	var exampleBody armmachinelearningservices.PartialOnlineDeploymentPartialTrackedResource
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"
	exampleBody = armmachinelearningservices.PartialOnlineDeploymentPartialTrackedResource{
		Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]any{
				"string": map[string]any{},
			},
		},
		Kind:     to.Ptr("string"),
		Location: to.Ptr("string"),
		Properties: &armmachinelearningservices.PartialKubernetesOnlineDeployment{
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
		},
		SKU: &armmachinelearningservices.PartialSKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
		Tags: map[string]*string{},
	}

	exampleRes := armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
			ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
				ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
				ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineDeploymentsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, body armmachinelearningservices.PartialOnlineDeploymentPartialTrackedResource, options *armmachinelearningservices.OnlineDeploymentsClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientUpdateResponse{OnlineDeploymentData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineDeploymentsClient()
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineDeploymentData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/update.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Update Managed Online Deployment."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"
	exampleBody = armmachinelearningservices.PartialOnlineDeploymentPartialTrackedResource{
		Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]any{
				"string": map[string]any{},
			},
		},
		Kind:     to.Ptr("string"),
		Location: to.Ptr("string"),
		Properties: &armmachinelearningservices.PartialManagedOnlineDeployment{
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
		},
		SKU: &armmachinelearningservices.PartialSKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
		Tags: map[string]*string{},
	}

	exampleRes = armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.ManagedOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			ReadinessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](30),
				InitialDelay:     to.Ptr("PT1S"),
				Period:           to.Ptr("PT10S"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT2S"),
			},
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineDeploymentsServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, body armmachinelearningservices.PartialOnlineDeploymentPartialTrackedResource, options *armmachinelearningservices.OnlineDeploymentsClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientUpdateResponse{OnlineDeploymentData: exampleRes}, nil)
		return
	}

	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/update.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineDeploymentData))
}

func (testsuite *FakeTestSuite) TestOnlineDeployments_CreateOrUpdate() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/createOrUpdate.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Kubernetes Online Deployment."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	var exampleBody armmachinelearningservices.OnlineDeploymentData
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"
	exampleBody = armmachinelearningservices.OnlineDeploymentData{
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:          to.Ptr("string"),
			ModelMountPath: to.Ptr("string"),
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
			ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
				ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
				ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	exampleRes := armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
			ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
				ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
				ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineDeploymentsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, body armmachinelearningservices.OnlineDeploymentData, options *armmachinelearningservices.OnlineDeploymentsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientCreateOrUpdateResponse{OnlineDeploymentData: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineDeploymentsClient()
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineDeploymentData))

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Managed Online Deployment."},
	})
	exampleResourceGroupName = "test-rg"
	exampleWorkspaceName = "my-aml-workspace"
	exampleEndpointName = "testEndpointName"
	exampleDeploymentName = "testDeploymentName"
	exampleBody = armmachinelearningservices.OnlineDeploymentData{
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.ManagedOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:          to.Ptr("string"),
			ModelMountPath: to.Ptr("string"),
			ReadinessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](30),
				InitialDelay:     to.Ptr("PT1S"),
				Period:           to.Ptr("PT10S"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT2S"),
			},
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	exampleRes = armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.ManagedOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			ReadinessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](30),
				InitialDelay:     to.Ptr("PT1S"),
				Period:           to.Ptr("PT10S"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT2S"),
			},
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}

	testsuite.serverFactory.OnlineDeploymentsServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, body armmachinelearningservices.OnlineDeploymentData, options *armmachinelearningservices.OnlineDeploymentsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.PollerResponder[armmachinelearningservices.OnlineDeploymentsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientCreateOrUpdateResponse{OnlineDeploymentData: exampleRes}, nil)
		return
	}

	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/createOrUpdate.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/createOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OnlineDeploymentData))
}

func (testsuite *FakeTestSuite) TestOnlineDeployments_GetLogs() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/getLogs.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"Get Online Deployment Logs."},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	var exampleEndpointName string
	var exampleDeploymentName string
	var exampleBody armmachinelearningservices.DeploymentLogsRequest
	exampleResourceGroupName = "testrg123"
	exampleWorkspaceName = "workspace123"
	exampleEndpointName = "testEndpoint"
	exampleDeploymentName = "testDeployment"
	exampleBody = armmachinelearningservices.DeploymentLogsRequest{
		ContainerType: to.Ptr(armmachinelearningservices.ContainerTypeStorageInitializer),
		Tail:          to.Ptr[int32](0),
	}

	exampleRes := armmachinelearningservices.DeploymentLogs{
		Content: to.Ptr("string"),
	}

	testsuite.serverFactory.OnlineDeploymentsServer.GetLogs = func(ctx context.Context, resourceGroupName string, workspaceName string, endpointName string, deploymentName string, body armmachinelearningservices.DeploymentLogsRequest, options *armmachinelearningservices.OnlineDeploymentsClientGetLogsOptions) (resp azfake.Responder[armmachinelearningservices.OnlineDeploymentsClientGetLogsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		testsuite.Require().Equal(exampleEndpointName, endpointName)
		testsuite.Require().Equal(exampleDeploymentName, deploymentName)
		testsuite.Require().True(reflect.DeepEqual(exampleBody, body))
		resp = azfake.Responder[armmachinelearningservices.OnlineDeploymentsClientGetLogsResponse]{}
		resp.SetResponse(http.StatusOK, armmachinelearningservices.OnlineDeploymentsClientGetLogsResponse{DeploymentLogs: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewOnlineDeploymentsClient()
	res, err := client.GetLogs(ctx, exampleResourceGroupName, exampleWorkspaceName, exampleEndpointName, exampleDeploymentName, exampleBody, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/getLogs.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DeploymentLogs))
}

func (testsuite *FakeTestSuite) TestWorkspaceFeatures_List() {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceFeature/list.json
	ctx := runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
		"example-id": {"List Workspace features"},
	})
	var exampleResourceGroupName string
	var exampleWorkspaceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleWorkspaceName = "testworkspace"

	exampleRes := armmachinelearningservices.ListAmlUserFeatureResult{
		Value: []*armmachinelearningservices.AmlUserFeature{
			{
				Description: to.Ptr("Create, edit or delete AutoML experiments in the SDK"),
				DisplayName: to.Ptr("Create edit experiments UI"),
				ID:          to.Ptr("automatedml_createeditexperimentsui"),
			},
			{
				Description: to.Ptr("Upgrade workspace from Basic to enterprise from the UI"),
				DisplayName: to.Ptr("Upgrade workspace UI"),
				ID:          to.Ptr("workspace_upgradeworkspaceui"),
			}},
	}

	testsuite.serverFactory.WorkspaceFeaturesServer.NewListPager = func(resourceGroupName string, workspaceName string, options *armmachinelearningservices.WorkspaceFeaturesClientListOptions) (resp azfake.PagerResponder[armmachinelearningservices.WorkspaceFeaturesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleWorkspaceName, workspaceName)
		resp = azfake.PagerResponder[armmachinelearningservices.WorkspaceFeaturesClientListResponse]{}
		resp.AddPage(http.StatusOK, armmachinelearningservices.WorkspaceFeaturesClientListResponse{ListAmlUserFeatureResult: exampleRes}, nil)
		return
	}

	client := testsuite.clientFactory.NewWorkspaceFeaturesClient()
	pager := client.NewListPager(exampleResourceGroupName, exampleWorkspaceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceFeature/list.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListAmlUserFeatureResult))
		if err == nil {
			break
		}
	}
}
