//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsignalr_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/v2/testutil"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr/fake"
	"github.com/stretchr/testify/suite"
)

type FakeTestSuite struct {
	suite.Suite

	cred           azcore.TokenCredential
	subscriptionId string
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.cred = &testutil.FakeCredential{}
	testsuite.subscriptionId = "00000000-0000-0000-0000-000000000000"
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	ctx := context.Background()
	fakeServer := fake.OperationsServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewOperationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewOperationsClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})

	exampleRes := armsignalr.OperationList{
		Value: []*armsignalr.Operation{
			{
				Name: to.Ptr("Microsoft.SignalRService/SignalR/read"),
				Display: &armsignalr.OperationDisplay{
					Description: to.Ptr("View the resource settings and configurations in the management portal or through API"),
					Operation:   to.Ptr("Manage SignalR (read-only)"),
					Provider:    to.Ptr("Microsoft.SignalRService"),
					Resource:    to.Ptr("SignalR"),
				},
				IsDataAction: to.Ptr(false),
				Properties:   &armsignalr.OperationProperties{},
			}},
	}

	fakeServer.NewListPager = func(options *armsignalr.OperationsClientListOptions) (resp azfake.PagerResponder[armsignalr.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armsignalr.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armsignalr.OperationsClientListResponse{OperationList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OperationList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSignalR_CheckNameAvailability() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CheckNameAvailability"},
	})
	var exampleLocation string
	var exampleParameters armsignalr.NameAvailabilityParameters
	exampleLocation = "eastus"
	exampleParameters = armsignalr.NameAvailabilityParameters{
		Name: to.Ptr("mySignalRService"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR"),
	}

	exampleRes := armsignalr.NameAvailability{
		Message:       to.Ptr("The name is already taken. Please try a different name."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}

	fakeServer.CheckNameAvailability = func(ctx context.Context, location string, parameters armsignalr.NameAvailabilityParameters, options *armsignalr.ClientCheckNameAvailabilityOptions) (resp azfake.Responder[armsignalr.ClientCheckNameAvailabilityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armsignalr.ClientCheckNameAvailabilityResponse]{}
		resp.SetResponse(http.StatusOK, armsignalr.ClientCheckNameAvailabilityResponse{NameAvailability: exampleRes}, nil)
		return
	}
	res, err := client.CheckNameAvailability(ctx, exampleLocation, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.NameAvailability))
}

func (testsuite *FakeTestSuite) TestSignalR_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListBySubscription"},
	})

	exampleRes := armsignalr.ResourceInfoList{
		Value: []*armsignalr.ResourceInfo{
			{
				Name:     to.Ptr("mySignalRService"),
				Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				Identity: &armsignalr.ManagedIdentity{
					Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
				},
				Kind: to.Ptr(armsignalr.ServiceKindSignalR),
				Properties: &armsignalr.Properties{
					Cors: &armsignalr.CorsSettings{
						AllowedOrigins: []*string{
							to.Ptr("https://foo.com"),
							to.Ptr("https://bar.com")},
					},
					DisableAADAuth:   to.Ptr(false),
					DisableLocalAuth: to.Ptr(false),
					ExternalIP:       to.Ptr("10.0.0.1"),
					Features: []*armsignalr.Feature{
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
							Properties: map[string]*string{},
							Value:      to.Ptr("Serverless"),
						},
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
							Properties: map[string]*string{},
							Value:      to.Ptr("True"),
						},
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
							Properties: map[string]*string{},
							Value:      to.Ptr("False"),
						},
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
							Properties: map[string]*string{},
							Value:      to.Ptr("False"),
						}},
					HostName: to.Ptr("mysignalrservice.service.signalr.net"),
					NetworkACLs: &armsignalr.NetworkACLs{
						DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
						PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
							{
								Allow: []*armsignalr.SignalRRequestType{
									to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
								Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							}},
						PublicNetwork: &armsignalr.NetworkACL{
							Allow: []*armsignalr.SignalRRequestType{
								to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
						},
					},
					PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
						{
							Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
							ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							Properties: &armsignalr.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armsignalr.PrivateEndpoint{
									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
								},
								PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
								},
								ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
							},
							SystemData: &armsignalr.SystemData{
								CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
								CreatedBy:          to.Ptr("string"),
								CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
								LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
								LastModifiedBy:     to.Ptr("string"),
								LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
							},
						}},
					ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
					PublicNetworkAccess: to.Ptr("Enabled"),
					PublicPort:          to.Ptr[int32](443),
					ServerPort:          to.Ptr[int32](443),
					TLS: &armsignalr.TLSSettings{
						ClientCertEnabled: to.Ptr(true),
					},
					Upstream: &armsignalr.ServerlessUpstreamSettings{
						Templates: []*armsignalr.UpstreamTemplate{
							{
								URLTemplate: to.Ptr("http://foo.com"),
							}},
					},
					Version: to.Ptr("1.0"),
				},
				SKU: &armsignalr.ResourceSKU{
					Name:     to.Ptr("Standard_S1"),
					Capacity: to.Ptr[int32](1),
					Size:     to.Ptr("S1"),
					Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
				},
				SystemData: &armsignalr.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
				},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armsignalr.ClientListBySubscriptionOptions) (resp azfake.PagerResponder[armsignalr.ClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armsignalr.ClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armsignalr.ClientListBySubscriptionResponse{ResourceInfoList: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceInfoList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSignalR_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListByResourceGroup"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armsignalr.ResourceInfoList{
		Value: []*armsignalr.ResourceInfo{
			{
				Name:     to.Ptr("mySignalRService"),
				Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				Identity: &armsignalr.ManagedIdentity{
					Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
				},
				Kind: to.Ptr(armsignalr.ServiceKindSignalR),
				Properties: &armsignalr.Properties{
					Cors: &armsignalr.CorsSettings{
						AllowedOrigins: []*string{
							to.Ptr("https://foo.com"),
							to.Ptr("https://bar.com")},
					},
					DisableAADAuth:   to.Ptr(false),
					DisableLocalAuth: to.Ptr(false),
					ExternalIP:       to.Ptr("10.0.0.1"),
					Features: []*armsignalr.Feature{
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
							Properties: map[string]*string{},
							Value:      to.Ptr("Serverless"),
						},
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
							Properties: map[string]*string{},
							Value:      to.Ptr("True"),
						},
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
							Properties: map[string]*string{},
							Value:      to.Ptr("False"),
						},
						{
							Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
							Properties: map[string]*string{},
							Value:      to.Ptr("False"),
						}},
					HostName: to.Ptr("mysignalrservice.service.signalr.net"),
					NetworkACLs: &armsignalr.NetworkACLs{
						DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
						PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
							{
								Allow: []*armsignalr.SignalRRequestType{
									to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
								Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							}},
						PublicNetwork: &armsignalr.NetworkACL{
							Allow: []*armsignalr.SignalRRequestType{
								to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
						},
					},
					PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
						{
							Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
							ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							Properties: &armsignalr.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armsignalr.PrivateEndpoint{
									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
								},
								PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
								},
								ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
							},
							SystemData: &armsignalr.SystemData{
								CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
								CreatedBy:          to.Ptr("string"),
								CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
								LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
								LastModifiedBy:     to.Ptr("string"),
								LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
							},
						}},
					ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
					PublicNetworkAccess: to.Ptr("Enabled"),
					PublicPort:          to.Ptr[int32](443),
					ServerPort:          to.Ptr[int32](443),
					TLS: &armsignalr.TLSSettings{
						ClientCertEnabled: to.Ptr(true),
					},
					Upstream: &armsignalr.ServerlessUpstreamSettings{
						Templates: []*armsignalr.UpstreamTemplate{
							{
								URLTemplate: to.Ptr("http://foo.com"),
							}},
					},
					Version: to.Ptr("1.0"),
				},
				SKU: &armsignalr.ResourceSKU{
					Name:     to.Ptr("Standard_S1"),
					Capacity: to.Ptr[int32](1),
					Size:     to.Ptr("S1"),
					Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
				},
				SystemData: &armsignalr.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armsignalr.ClientListByResourceGroupOptions) (resp azfake.PagerResponder[armsignalr.ClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armsignalr.ClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armsignalr.ClientListByResourceGroupResponse{ResourceInfoList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceInfoList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSignalR_Get() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Get"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	exampleRes := armsignalr.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armsignalr.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsignalr.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, resourceName string, options *armsignalr.ClientGetOptions) (resp azfake.Responder[armsignalr.ClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armsignalr.ClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armsignalr.ClientGetResponse{ResourceInfo: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ResourceInfo))
}

func (testsuite *FakeTestSuite) TestSignalR_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armsignalr.ResourceInfo
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"
	exampleParameters = armsignalr.ResourceInfo{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type: to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PublicNetworkAccess: to.Ptr("Enabled"),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(false),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						Auth: &armsignalr.UpstreamAuthSettings{
							Type: to.Ptr(armsignalr.UpstreamAuthTypeManagedIdentity),
							ManagedIdentity: &armsignalr.ManagedIdentitySettings{
								Resource: to.Ptr("api://example"),
							},
						},
						CategoryPattern: to.Ptr("*"),
						EventPattern:    to.Ptr("connect,disconnect"),
						HubPattern:      to.Ptr("*"),
						URLTemplate:     to.Ptr("https://example.com/chat/api/connect"),
					}},
			},
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
	}

	exampleRes := armsignalr.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armsignalr.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsignalr.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armsignalr.ResourceInfo, options *armsignalr.ClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armsignalr.ClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armsignalr.ClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armsignalr.ClientCreateOrUpdateResponse{ResourceInfo: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleResourceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ResourceInfo))
}

func (testsuite *FakeTestSuite) TestSignalR_Delete() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Delete"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, resourceName string, options *armsignalr.ClientBeginDeleteOptions) (resp azfake.PollerResponder[armsignalr.ClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armsignalr.ClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armsignalr.ClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json")
}

func (testsuite *FakeTestSuite) TestSignalR_Update() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Update"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armsignalr.ResourceInfo
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"
	exampleParameters = armsignalr.ResourceInfo{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"$(subscriptionId)": to.Ptr("$(subscriptionId)"),
			"key1":              to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type: to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PublicNetworkAccess: to.Ptr("Enabled"),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(false),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						Auth: &armsignalr.UpstreamAuthSettings{
							Type: to.Ptr(armsignalr.UpstreamAuthTypeManagedIdentity),
							ManagedIdentity: &armsignalr.ManagedIdentitySettings{
								Resource: to.Ptr("api://example"),
							},
						},
						CategoryPattern: to.Ptr("*"),
						EventPattern:    to.Ptr("connect,disconnect"),
						HubPattern:      to.Ptr("*"),
						URLTemplate:     to.Ptr("https://example.com/chat/api/connect"),
					}},
			},
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
	}

	exampleRes := armsignalr.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armsignalr.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsignalr.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armsignalr.ResourceInfo, options *armsignalr.ClientBeginUpdateOptions) (resp azfake.PollerResponder[armsignalr.ClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armsignalr.ClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armsignalr.ClientUpdateResponse{ResourceInfo: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleResourceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ResourceInfo))
}

func (testsuite *FakeTestSuite) TestSignalR_ListKeys() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListKeys"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	exampleRes := armsignalr.Keys{}

	fakeServer.ListKeys = func(ctx context.Context, resourceGroupName string, resourceName string, options *armsignalr.ClientListKeysOptions) (resp azfake.Responder[armsignalr.ClientListKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armsignalr.ClientListKeysResponse]{}
		resp.SetResponse(http.StatusOK, armsignalr.ClientListKeysResponse{Keys: exampleRes}, nil)
		return
	}
	res, err := client.ListKeys(ctx, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Keys))
}

func (testsuite *FakeTestSuite) TestSignalR_RegenerateKey() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_RegenerateKey"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armsignalr.RegenerateKeyParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"
	exampleParameters = armsignalr.RegenerateKeyParameters{
		KeyType: to.Ptr(armsignalr.KeyTypePrimary),
	}

	fakeServer.BeginRegenerateKey = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armsignalr.RegenerateKeyParameters, options *armsignalr.ClientBeginRegenerateKeyOptions) (resp azfake.PollerResponder[armsignalr.ClientRegenerateKeyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armsignalr.ClientRegenerateKeyResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armsignalr.ClientRegenerateKeyResponse{}, nil)
		return
	}
	poller, err := client.BeginRegenerateKey(ctx, exampleResourceGroupName, exampleResourceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json")
}

func (testsuite *FakeTestSuite) TestSignalR_Restart() {
	ctx := context.Background()
	fakeServer := fake.Server{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Restart"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, resourceName string, options *armsignalr.ClientBeginRestartOptions) (resp azfake.PollerResponder[armsignalr.ClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armsignalr.ClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armsignalr.ClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json")
}

func (testsuite *FakeTestSuite) TestUsages_List() {
	ctx := context.Background()
	fakeServer := fake.UsagesServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewUsagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewUsagesClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usages_List"},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armsignalr.UsageList{
		Value: []*armsignalr.Usage{
			{
				Name: &armsignalr.UsageName{
					LocalizedValue: to.Ptr("Usage1"),
					Value:          to.Ptr("Usage1"),
				},
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage1"),
				Limit:        to.Ptr[int64](100),
				Unit:         to.Ptr("Count"),
			},
			{
				Name: &armsignalr.UsageName{
					LocalizedValue: to.Ptr("Usage2"),
					Value:          to.Ptr("Usage2"),
				},
				CurrentValue: to.Ptr[int64](0),
				ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage2"),
				Limit:        to.Ptr[int64](100),
				Unit:         to.Ptr("Count"),
			}},
	}

	fakeServer.NewListPager = func(location string, options *armsignalr.UsagesClientListOptions) (resp azfake.PagerResponder[armsignalr.UsagesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armsignalr.UsagesClientListResponse]{}
		resp.AddPage(http.StatusOK, armsignalr.UsagesClientListResponse{UsageList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.UsageList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSignalRPrivateEndpointConnections_List() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_List"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	exampleRes := armsignalr.PrivateEndpointConnectionList{
		Value: []*armsignalr.PrivateEndpointConnection{
			{
				Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
				Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
				Properties: &armsignalr.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armsignalr.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
					},
					PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
				},
				SystemData: &armsignalr.SystemData{
					CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
					CreatedBy:          to.Ptr("string"),
					CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
					LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
					LastModifiedBy:     to.Ptr("string"),
					LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, resourceName string, options *armsignalr.PrivateEndpointConnectionsClientListOptions) (resp azfake.PagerResponder[armsignalr.PrivateEndpointConnectionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PagerResponder[armsignalr.PrivateEndpointConnectionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armsignalr.PrivateEndpointConnectionsClientListResponse{PrivateEndpointConnectionList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleResourceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateEndpointConnectionList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSignalRPrivateEndpointConnections_Get() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Get"},
	})
	var examplePrivateEndpointConnectionName string
	var exampleResourceGroupName string
	var exampleResourceName string
	examplePrivateEndpointConnectionName = "mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	exampleRes := armsignalr.PrivateEndpointConnection{
		Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Properties: &armsignalr.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armsignalr.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}

	fakeServer.Get = func(ctx context.Context, privateEndpointConnectionName string, resourceGroupName string, resourceName string, options *armsignalr.PrivateEndpointConnectionsClientGetOptions) (resp azfake.Responder[armsignalr.PrivateEndpointConnectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armsignalr.PrivateEndpointConnectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armsignalr.PrivateEndpointConnectionsClientGetResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, examplePrivateEndpointConnectionName, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestSignalRPrivateEndpointConnections_Update() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Update"},
	})
	var examplePrivateEndpointConnectionName string
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armsignalr.PrivateEndpointConnection
	examplePrivateEndpointConnectionName = "mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"
	exampleParameters = armsignalr.PrivateEndpointConnection{
		Properties: &armsignalr.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armsignalr.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
			},
		},
	}

	exampleRes := armsignalr.PrivateEndpointConnection{
		Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Properties: &armsignalr.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armsignalr.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}

	fakeServer.Update = func(ctx context.Context, privateEndpointConnectionName string, resourceGroupName string, resourceName string, parameters armsignalr.PrivateEndpointConnection, options *armsignalr.PrivateEndpointConnectionsClientUpdateOptions) (resp azfake.Responder[armsignalr.PrivateEndpointConnectionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armsignalr.PrivateEndpointConnectionsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armsignalr.PrivateEndpointConnectionsClientUpdateResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, examplePrivateEndpointConnectionName, exampleResourceGroupName, exampleResourceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestSignalRPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateEndpointConnectionsClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Delete"},
	})
	var examplePrivateEndpointConnectionName string
	var exampleResourceGroupName string
	var exampleResourceName string
	examplePrivateEndpointConnectionName = "mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	fakeServer.BeginDelete = func(ctx context.Context, privateEndpointConnectionName string, resourceGroupName string, resourceName string, options *armsignalr.PrivateEndpointConnectionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armsignalr.PrivateEndpointConnectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armsignalr.PrivateEndpointConnectionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armsignalr.PrivateEndpointConnectionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, examplePrivateEndpointConnectionName, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json")
}

func (testsuite *FakeTestSuite) TestSignalRPrivateLinkResources_List() {
	ctx := context.Background()
	fakeServer := fake.PrivateLinkResourcesServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewPrivateLinkResourcesClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateLinkResources_List"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	exampleRes := armsignalr.PrivateLinkResourceList{
		Value: []*armsignalr.PrivateLinkResource{
			{
				Name: to.Ptr("myPrivateLink"),
				Type: to.Ptr("privateLinkResources"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateLinkResources/myPrivateLink"),
				Properties: &armsignalr.PrivateLinkResourceProperties{
					GroupID: to.Ptr("signalr"),
					RequiredMembers: []*string{
						to.Ptr("signalr")},
					RequiredZoneNames: []*string{
						to.Ptr("privatelink.service.signalr.net")},
					ShareablePrivateLinkResourceTypes: []*armsignalr.ShareablePrivateLinkResourceType{
						{
							Name: to.Ptr("site"),
							Properties: &armsignalr.ShareablePrivateLinkResourceProperties{
								Type:        to.Ptr("Microsoft.Web/sites"),
								Description: to.Ptr("Azure App Service can be used as an upstream"),
								GroupID:     to.Ptr("sites"),
							},
						}},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, resourceName string, options *armsignalr.PrivateLinkResourcesClientListOptions) (resp azfake.PagerResponder[armsignalr.PrivateLinkResourcesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PagerResponder[armsignalr.PrivateLinkResourcesClientListResponse]{}
		resp.AddPage(http.StatusOK, armsignalr.PrivateLinkResourcesClientListResponse{PrivateLinkResourceList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleResourceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateLinkResourceList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSignalRSharedPrivateLinkResources_List() {
	ctx := context.Background()
	fakeServer := fake.SharedPrivateLinkResourcesServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedPrivateLinkResourcesClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_List"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	exampleRes := armsignalr.SharedPrivateLinkResourceList{
		Value: []*armsignalr.SharedPrivateLinkResource{
			{
				Name: to.Ptr("upstream"),
				Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
				Properties: &armsignalr.SharedPrivateLinkResourceProperties{
					GroupID:               to.Ptr("sites"),
					PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
					ProvisioningState:     to.Ptr(armsignalr.ProvisioningStateSucceeded),
					RequestMessage:        to.Ptr("Please approve"),
					Status:                to.Ptr(armsignalr.SharedPrivateLinkResourceStatusApproved),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, resourceName string, options *armsignalr.SharedPrivateLinkResourcesClientListOptions) (resp azfake.PagerResponder[armsignalr.SharedPrivateLinkResourcesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PagerResponder[armsignalr.SharedPrivateLinkResourcesClientListResponse]{}
		resp.AddPage(http.StatusOK, armsignalr.SharedPrivateLinkResourcesClientListResponse{SharedPrivateLinkResourceList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleResourceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SharedPrivateLinkResourceList))
		if err == nil {
			break
		}
	}
}

func (testsuite *FakeTestSuite) TestSignalRSharedPrivateLinkResources_Get() {
	ctx := context.Background()
	fakeServer := fake.SharedPrivateLinkResourcesServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedPrivateLinkResourcesClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Get"},
	})
	var exampleSharedPrivateLinkResourceName string
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleSharedPrivateLinkResourceName = "upstream"
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	exampleRes := armsignalr.SharedPrivateLinkResource{
		Name: to.Ptr("upstream"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
		Properties: &armsignalr.SharedPrivateLinkResourceProperties{
			GroupID:               to.Ptr("sites"),
			PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
			ProvisioningState:     to.Ptr(armsignalr.ProvisioningStateSucceeded),
			RequestMessage:        to.Ptr("Please approve"),
			Status:                to.Ptr(armsignalr.SharedPrivateLinkResourceStatusApproved),
		},
	}

	fakeServer.Get = func(ctx context.Context, sharedPrivateLinkResourceName string, resourceGroupName string, resourceName string, options *armsignalr.SharedPrivateLinkResourcesClientGetOptions) (resp azfake.Responder[armsignalr.SharedPrivateLinkResourcesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleSharedPrivateLinkResourceName, sharedPrivateLinkResourceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armsignalr.SharedPrivateLinkResourcesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armsignalr.SharedPrivateLinkResourcesClientGetResponse{SharedPrivateLinkResource: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleSharedPrivateLinkResourceName, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource))
}

func (testsuite *FakeTestSuite) TestSignalRSharedPrivateLinkResources_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.SharedPrivateLinkResourcesServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedPrivateLinkResourcesClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_CreateOrUpdate"},
	})
	var exampleSharedPrivateLinkResourceName string
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armsignalr.SharedPrivateLinkResource
	exampleSharedPrivateLinkResourceName = "upstream"
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"
	exampleParameters = armsignalr.SharedPrivateLinkResource{
		Properties: &armsignalr.SharedPrivateLinkResourceProperties{
			GroupID:               to.Ptr("sites"),
			PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
			RequestMessage:        to.Ptr("Please approve"),
		},
	}

	exampleRes := armsignalr.SharedPrivateLinkResource{
		Name: to.Ptr("upstream"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
		Properties: &armsignalr.SharedPrivateLinkResourceProperties{
			GroupID:               to.Ptr("sites"),
			PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
			ProvisioningState:     to.Ptr(armsignalr.ProvisioningStateSucceeded),
			RequestMessage:        to.Ptr("Please approve"),
			Status:                to.Ptr(armsignalr.SharedPrivateLinkResourceStatusApproved),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, sharedPrivateLinkResourceName string, resourceGroupName string, resourceName string, parameters armsignalr.SharedPrivateLinkResource, options *armsignalr.SharedPrivateLinkResourcesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armsignalr.SharedPrivateLinkResourcesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleSharedPrivateLinkResourceName, sharedPrivateLinkResourceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armsignalr.SharedPrivateLinkResourcesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armsignalr.SharedPrivateLinkResourcesClientCreateOrUpdateResponse{SharedPrivateLinkResource: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleSharedPrivateLinkResourceName, exampleResourceGroupName, exampleResourceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource))
}

func (testsuite *FakeTestSuite) TestSignalRSharedPrivateLinkResources_Delete() {
	ctx := context.Background()
	fakeServer := fake.SharedPrivateLinkResourcesServer{}
	clientFactory, err := armsignalr.NewClientFactory(testsuite.subscriptionId, testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client factory")
	client := clientFactory.NewSharedPrivateLinkResourcesClient()

	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Delete"},
	})
	var exampleSharedPrivateLinkResourceName string
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleSharedPrivateLinkResourceName = "upstream"
	exampleResourceGroupName = "myResourceGroup"
	exampleResourceName = "mySignalRService"

	fakeServer.BeginDelete = func(ctx context.Context, sharedPrivateLinkResourceName string, resourceGroupName string, resourceName string, options *armsignalr.SharedPrivateLinkResourcesClientBeginDeleteOptions) (resp azfake.PollerResponder[armsignalr.SharedPrivateLinkResourcesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleSharedPrivateLinkResourceName, sharedPrivateLinkResourceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armsignalr.SharedPrivateLinkResourcesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armsignalr.SharedPrivateLinkResourcesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleSharedPrivateLinkResourceName, exampleResourceGroupName, exampleResourceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json")
}
