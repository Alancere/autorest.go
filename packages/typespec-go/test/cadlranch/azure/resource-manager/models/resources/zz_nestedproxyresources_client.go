// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package resources

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// NestedProxyResourcesClient contains the methods for the NestedProxyResources group.
// Don't use this type directly, use NewNestedProxyResourcesClient() instead.
type NestedProxyResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewNestedProxyResourcesClient creates a new instance of NestedProxyResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNestedProxyResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NestedProxyResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NestedProxyResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrReplace - Create a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - resource - Resource create parameters.
//   - options - NestedProxyResourcesClientBeginCreateOrReplaceOptions contains the optional parameters for the NestedProxyResourcesClient.BeginCreateOrReplace
//     method.
func (client *NestedProxyResourcesClient) BeginCreateOrReplace(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, resource NestedProxyResource, options *NestedProxyResourcesClientBeginCreateOrReplaceOptions) (*runtime.Poller[NestedProxyResourcesClientCreateOrReplaceResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrReplace(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NestedProxyResourcesClientCreateOrReplaceResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NestedProxyResourcesClientCreateOrReplaceResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrReplace - Create a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *NestedProxyResourcesClient) createOrReplace(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, resource NestedProxyResource, options *NestedProxyResourcesClientBeginCreateOrReplaceOptions) (*http.Response, error) {
	var err error
	const operationName = "NestedProxyResourcesClient.BeginCreateOrReplace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrReplaceCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrReplaceCreateRequest creates the CreateOrReplace request.
func (client *NestedProxyResourcesClient) createOrReplaceCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, resource NestedProxyResource, _ *NestedProxyResourcesClientBeginCreateOrReplaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - options - NestedProxyResourcesClientBeginDeleteOptions contains the optional parameters for the NestedProxyResourcesClient.BeginDelete
//     method.
func (client *NestedProxyResourcesClient) BeginDelete(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *NestedProxyResourcesClientBeginDeleteOptions) (*runtime.Poller[NestedProxyResourcesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NestedProxyResourcesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NestedProxyResourcesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *NestedProxyResourcesClient) deleteOperation(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *NestedProxyResourcesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "NestedProxyResourcesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *NestedProxyResourcesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, _ *NestedProxyResourcesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - options - NestedProxyResourcesClientGetOptions contains the optional parameters for the NestedProxyResourcesClient.Get
//     method.
func (client *NestedProxyResourcesClient) Get(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *NestedProxyResourcesClientGetOptions) (NestedProxyResourcesClientGetResponse, error) {
	var err error
	const operationName = "NestedProxyResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, options)
	if err != nil {
		return NestedProxyResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NestedProxyResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NestedProxyResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *NestedProxyResourcesClient) getCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, _ *NestedProxyResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NestedProxyResourcesClient) getHandleResponse(resp *http.Response) (NestedProxyResourcesClientGetResponse, error) {
	result := NestedProxyResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NestedProxyResource); err != nil {
		return NestedProxyResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByTopLevelTrackedResourcePager - List NestedProxyResource resources by TopLevelTrackedResource
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - options - NestedProxyResourcesClientListByTopLevelTrackedResourceOptions contains the optional parameters for the NestedProxyResourcesClient.NewListByTopLevelTrackedResourcePager
//     method.
func (client *NestedProxyResourcesClient) NewListByTopLevelTrackedResourcePager(resourceGroupName string, topLevelTrackedResourceName string, options *NestedProxyResourcesClientListByTopLevelTrackedResourceOptions) *runtime.Pager[NestedProxyResourcesClientListByTopLevelTrackedResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[NestedProxyResourcesClientListByTopLevelTrackedResourceResponse]{
		More: func(page NestedProxyResourcesClientListByTopLevelTrackedResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NestedProxyResourcesClientListByTopLevelTrackedResourceResponse) (NestedProxyResourcesClientListByTopLevelTrackedResourceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NestedProxyResourcesClient.NewListByTopLevelTrackedResourcePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByTopLevelTrackedResourceCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, options)
			}, nil)
			if err != nil {
				return NestedProxyResourcesClientListByTopLevelTrackedResourceResponse{}, err
			}
			return client.listByTopLevelTrackedResourceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByTopLevelTrackedResourceCreateRequest creates the ListByTopLevelTrackedResource request.
func (client *NestedProxyResourcesClient) listByTopLevelTrackedResourceCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, _ *NestedProxyResourcesClientListByTopLevelTrackedResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByTopLevelTrackedResourceHandleResponse handles the ListByTopLevelTrackedResource response.
func (client *NestedProxyResourcesClient) listByTopLevelTrackedResourceHandleResponse(resp *http.Response) (NestedProxyResourcesClientListByTopLevelTrackedResourceResponse, error) {
	result := NestedProxyResourcesClientListByTopLevelTrackedResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NestedProxyResourceListResult); err != nil {
		return NestedProxyResourcesClientListByTopLevelTrackedResourceResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - properties - The resource properties to be updated.
//   - options - NestedProxyResourcesClientBeginUpdateOptions contains the optional parameters for the NestedProxyResourcesClient.BeginUpdate
//     method.
func (client *NestedProxyResourcesClient) BeginUpdate(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, properties NestedProxyResource, options *NestedProxyResourcesClientBeginUpdateOptions) (*runtime.Poller[NestedProxyResourcesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NestedProxyResourcesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NestedProxyResourcesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *NestedProxyResourcesClient) update(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, properties NestedProxyResource, options *NestedProxyResourcesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "NestedProxyResourcesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *NestedProxyResourcesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, properties NestedProxyResource, _ *NestedProxyResourcesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
