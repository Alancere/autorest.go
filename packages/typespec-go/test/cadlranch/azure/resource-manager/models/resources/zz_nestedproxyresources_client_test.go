// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package resources_test

import (
	"context"
	"net/http"
	"resources"
	"testing"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/stretchr/testify/require"
)

func TestNestedProxyResourcesClient(t *testing.T) {
	// NestedProxyResources Get
	expectedNestedProxyResourcesClientGetResponse := resources.NestedProxyResourcesClientGetResponse{
		NestedProxyResource: resources.NestedProxyResource{
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/top/nestedProxyResources/nested"),
			Name: to.Ptr("nested"),
			Type: to.Ptr("Azure.ResourceManager.Models.Resources/topLevelTrackedResources/top/nestedProxyResources"),
			Properties: &resources.NestedProxyResourceProperties{
				Description:       to.Ptr("valid"),
				ProvisioningState: to.Ptr(resources.ProvisioningStateSucceeded),
			},
			SystemData: &resources.SystemData{
				CreatedBy:          to.Ptr("AzureSDK"),
				CreatedByType:      to.Ptr(resources.CreatedByTypeUser),
				CreatedAt:          to.Ptr(time.Now()),
				LastModifiedBy:     to.Ptr("AzureSDK"),
				LastModifiedAt:     to.Ptr(time.Now()),
				LastModifiedByType: to.Ptr(resources.CreatedByTypeUser),
			},
		},
	}
	nestedProxyResourcesClientGetResponse, err := clientFactory.NewNestedProxyResourcesClient().Get(
		context.Background(),
		"test-rg",
		"top",
		"nested",
		nil,
	)
	require.NoError(t, err)
	require.Equal(t, *expectedNestedProxyResourcesClientGetResponse.ID, *nestedProxyResourcesClientGetResponse.ID)
	require.Equal(t, *expectedNestedProxyResourcesClientGetResponse.Name, *nestedProxyResourcesClientGetResponse.Name)
	require.Equal(t, *expectedNestedProxyResourcesClientGetResponse.Type, *nestedProxyResourcesClientGetResponse.Type)

	// NestedProxyResources CreateOrReplace
	expectedNestedProxyResourcesClientCreateOrReplaceResponse := resources.NestedProxyResourcesClientCreateOrReplaceResponse{
		NestedProxyResource: resources.NestedProxyResource{
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/top/nestedProxyResources/nested"),
			Name: to.Ptr("nested"),
			Type: to.Ptr("Azure.ResourceManager.Models.Resources/topLevelTrackedResources/top/nestedProxyResources"),
			Properties: &resources.NestedProxyResourceProperties{
				Description:       to.Ptr("valid"),
				ProvisioningState: to.Ptr(resources.ProvisioningStateSucceeded),
			},
			SystemData: &resources.SystemData{
				CreatedBy:          to.Ptr("AzureSDK"),
				CreatedByType:      to.Ptr(resources.CreatedByTypeUser),
				CreatedAt:          to.Ptr(time.Now()),
				LastModifiedBy:     to.Ptr("AzureSDK"),
				LastModifiedAt:     to.Ptr(time.Now()),
				LastModifiedByType: to.Ptr(resources.CreatedByTypeUser),
			},
		},
	}
	nestedProxyResourcesClientCreateOrReplaceResponsePoller, err := clientFactory.NewNestedProxyResourcesClient().BeginCreateOrReplace(
		context.Background(),
		"test-rg",
		"top",
		"nested",
		resources.NestedProxyResource{
			Properties: &resources.NestedProxyResourceProperties{
				Description: to.Ptr("valid"),
			},
		},
		nil,
	)
	require.NoError(t, err)
	nestedProxyResourcesClientCreateOrReplaceResponse, err := nestedProxyResourcesClientCreateOrReplaceResponsePoller.PollUntilDone(context.Background(), nil)
	require.NoError(t, err)
	require.Equal(t, *expectedNestedProxyResourcesClientCreateOrReplaceResponse.ID, *nestedProxyResourcesClientCreateOrReplaceResponse.ID)
	require.Equal(t, *expectedNestedProxyResourcesClientCreateOrReplaceResponse.Name, *nestedProxyResourcesClientCreateOrReplaceResponse.Name)
	require.Equal(t, *expectedNestedProxyResourcesClientCreateOrReplaceResponse.Type, *nestedProxyResourcesClientCreateOrReplaceResponse.Type)
	require.Equal(t, *expectedNestedProxyResourcesClientCreateOrReplaceResponse.Properties.Description, *nestedProxyResourcesClientCreateOrReplaceResponse.Properties.Description)

	// NestedProxyResources Update
	expectedNestedProxyResourcesClientUpdateResponse := resources.NestedProxyResourcesClientUpdateResponse{
		NestedProxyResource: resources.NestedProxyResource{
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/top/nestedProxyResources/nested"),
			Name: to.Ptr("nested"),
			Type: to.Ptr("Azure.ResourceManager.Models.Resources/topLevelTrackedResources/top/nestedProxyResources"),
			Properties: &resources.NestedProxyResourceProperties{
				Description:       to.Ptr("valid2"),
				ProvisioningState: to.Ptr(resources.ProvisioningStateSucceeded),
			},
			SystemData: &resources.SystemData{
				CreatedBy:          to.Ptr("AzureSDK"),
				CreatedByType:      to.Ptr(resources.CreatedByTypeUser),
				CreatedAt:          to.Ptr(time.Now()),
				LastModifiedBy:     to.Ptr("AzureSDK"),
				LastModifiedAt:     to.Ptr(time.Now()),
				LastModifiedByType: to.Ptr(resources.CreatedByTypeUser),
			},
		},
	}
	nestedProxyResourcesClientUpdateResponsePoller, err := clientFactory.NewNestedProxyResourcesClient().BeginUpdate(
		context.Background(),
		"test-rg",
		"top",
		"nested",
		resources.NestedProxyResource{
			Properties: &resources.NestedProxyResourceProperties{
				Description: to.Ptr("valid2"),
			},
		},
		nil,
	)
	require.NoError(t, err)
	nestedProxyResourcesClientUpdateResponse, err := nestedProxyResourcesClientUpdateResponsePoller.PollUntilDone(context.Background(), nil)
	require.NoError(t, err)
	require.Equal(t, *expectedNestedProxyResourcesClientUpdateResponse.ID, *nestedProxyResourcesClientUpdateResponse.ID)
	require.Equal(t, *expectedNestedProxyResourcesClientUpdateResponse.Name, *nestedProxyResourcesClientUpdateResponse.Name)
	require.Equal(t, *expectedNestedProxyResourcesClientUpdateResponse.Type, *nestedProxyResourcesClientUpdateResponse.Type)
	require.Equal(t, *expectedNestedProxyResourcesClientUpdateResponse.Properties.Description, *nestedProxyResourcesClientUpdateResponse.Properties.Description)

	// NestedProxyResources Delete
	nestedProxyResourcesClientDeleteResponsePoller, err := clientFactory.NewNestedProxyResourcesClient().BeginDelete(context.Background(), "test-rg", "top", "nested", nil)
	require.NoError(t, err)
	nestedProxyResourcesClientDeleteResponse, err := nestedProxyResourcesClientDeleteResponsePoller.Poll(context.Background())
	require.NoError(t, err)
	require.Equal(t, http.StatusNoContent, nestedProxyResourcesClientDeleteResponse.StatusCode)

	// NestedProxyResources ListByTopLevelTrackedResourc
	nestedProxyResourcesClientListByTopLevelTrackedResourceResponsePager := clientFactory.NewNestedProxyResourcesClient().NewListByTopLevelTrackedResourcePager("test-rg", "top", nil)
	require.True(t, nestedProxyResourcesClientListByTopLevelTrackedResourceResponsePager.More())
	nestedProxyResourcesClientListByTopLevelTrackedResourceResponse, err := nestedProxyResourcesClientListByTopLevelTrackedResourceResponsePager.NextPage(context.Background())
	require.NoError(t, err)
	require.Len(t, nestedProxyResourcesClientListByTopLevelTrackedResourceResponse.Value, 1)
}
